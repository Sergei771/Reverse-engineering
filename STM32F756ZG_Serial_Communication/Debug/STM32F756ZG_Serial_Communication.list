
STM32F756ZG_Serial_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006008  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  080061d8  080061d8  000071d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006728  08006728  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006728  08006728  00007728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006730  08006730  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006730  08006730  00007730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006734  08006734  00007734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006738  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000060  08006798  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08006798  000083dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011446  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c52  00000000  00000000  000194d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0001c128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc2  00000000  00000000  0001d068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028190  00000000  00000000  0001dc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015927  00000000  00000000  00045dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3920  00000000  00000000  0005b6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f001  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042cc  00000000  00000000  0014f044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00153310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080061c0 	.word	0x080061c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080061c0 	.word	0x080061c0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <Command_Parser_Init>:
  *         - Désactive le flag de commande complète
  * @param  None
  * @retval None
  */
void Command_Parser_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  memset(commandBuffer, 0, COMMAND_BUFFER_SIZE);
 8000610:	2240      	movs	r2, #64	@ 0x40
 8000612:	2100      	movs	r1, #0
 8000614:	4805      	ldr	r0, [pc, #20]	@ (800062c <Command_Parser_Init+0x20>)
 8000616:	f005 f943 	bl	80058a0 <memset>
  bufferIndex = 0;
 800061a:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <Command_Parser_Init+0x24>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
  commandComplete = false;
 8000620:	4b04      	ldr	r3, [pc, #16]	@ (8000634 <Command_Parser_Init+0x28>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000007c 	.word	0x2000007c
 8000630:	200000bc 	.word	0x200000bc
 8000634:	200000bd 	.word	0x200000bd

08000638 <Command_Parser_ProcessChar>:
 * @brief  Traite un caractère reçu
 * @param  c: Caractère reçu
 * @retval Aucun
 */
void Command_Parser_ProcessChar(char c)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
  // Si une commande vient d'être traitée, on s'assure que le buffer est prêt
  if (commandComplete) {
 8000642:	4b33      	ldr	r3, [pc, #204]	@ (8000710 <Command_Parser_ProcessChar+0xd8>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00a      	beq.n	8000660 <Command_Parser_ProcessChar+0x28>
      memset(commandBuffer, 0, COMMAND_BUFFER_SIZE);
 800064a:	2240      	movs	r2, #64	@ 0x40
 800064c:	2100      	movs	r1, #0
 800064e:	4831      	ldr	r0, [pc, #196]	@ (8000714 <Command_Parser_ProcessChar+0xdc>)
 8000650:	f005 f926 	bl	80058a0 <memset>
      bufferIndex = 0;
 8000654:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <Command_Parser_ProcessChar+0xe0>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
      commandComplete = false;
 800065a:	4b2d      	ldr	r3, [pc, #180]	@ (8000710 <Command_Parser_ProcessChar+0xd8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
  }

  // Convertir en majuscule
  char upperC = toupper((unsigned char)c);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	3301      	adds	r3, #1
 8000668:	4a2c      	ldr	r2, [pc, #176]	@ (800071c <Command_Parser_ProcessChar+0xe4>)
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	f003 0303 	and.w	r3, r3, #3
 8000672:	2b02      	cmp	r3, #2
 8000674:	d102      	bne.n	800067c <Command_Parser_ProcessChar+0x44>
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	3b20      	subs	r3, #32
 800067a:	e000      	b.n	800067e <Command_Parser_ProcessChar+0x46>
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	73bb      	strb	r3, [r7, #14]

  /* Ignorer le Line Feed */
  if (upperC == '\n')
 8000680:	7bbb      	ldrb	r3, [r7, #14]
 8000682:	2b0a      	cmp	r3, #10
 8000684:	d03d      	beq.n	8000702 <Command_Parser_ProcessChar+0xca>
  {
      return;
  }

  /* Gestion du retour chariot (fin de commande) */
  if (upperC == '\r')
 8000686:	7bbb      	ldrb	r3, [r7, #14]
 8000688:	2b0d      	cmp	r3, #13
 800068a:	d109      	bne.n	80006a0 <Command_Parser_ProcessChar+0x68>
  {
    commandBuffer[bufferIndex] = '\0'; // Terminer la chaîne
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <Command_Parser_ProcessChar+0xe0>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <Command_Parser_ProcessChar+0xdc>)
 8000694:	2100      	movs	r1, #0
 8000696:	5499      	strb	r1, [r3, r2]
    commandComplete = true;
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <Command_Parser_ProcessChar+0xd8>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
    return;
 800069e:	e033      	b.n	8000708 <Command_Parser_ProcessChar+0xd0>
  }

  /* Gestion du retour arrière (Backspace) */
  if (upperC == '\b' || upperC == 127) // ASCII Backspace ou DEL
 80006a0:	7bbb      	ldrb	r3, [r7, #14]
 80006a2:	2b08      	cmp	r3, #8
 80006a4:	d002      	beq.n	80006ac <Command_Parser_ProcessChar+0x74>
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80006aa:	d110      	bne.n	80006ce <Command_Parser_ProcessChar+0x96>
  {
    if (bufferIndex > 0)
 80006ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <Command_Parser_ProcessChar+0xe0>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d028      	beq.n	8000706 <Command_Parser_ProcessChar+0xce>
    {
      bufferIndex--;
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <Command_Parser_ProcessChar+0xe0>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <Command_Parser_ProcessChar+0xe0>)
 80006be:	701a      	strb	r2, [r3, #0]
      commandBuffer[bufferIndex] = '\0'; // Effacer le dernier caractère
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <Command_Parser_ProcessChar+0xe0>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <Command_Parser_ProcessChar+0xdc>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	5499      	strb	r1, [r3, r2]
    }
    return;
 80006cc:	e01b      	b.n	8000706 <Command_Parser_ProcessChar+0xce>
  }

  /* Stockage du caractère si imprimable et place disponible */
  if (bufferIndex < COMMAND_BUFFER_SIZE - 1 && isprint((unsigned char)upperC))
 80006ce:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <Command_Parser_ProcessChar+0xe0>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80006d4:	d818      	bhi.n	8000708 <Command_Parser_ProcessChar+0xd0>
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a10      	ldr	r2, [pc, #64]	@ (800071c <Command_Parser_ProcessChar+0xe4>)
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00f      	beq.n	8000708 <Command_Parser_ProcessChar+0xd0>
  {
    commandBuffer[bufferIndex] = upperC;
 80006e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <Command_Parser_ProcessChar+0xe0>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	4a09      	ldr	r2, [pc, #36]	@ (8000714 <Command_Parser_ProcessChar+0xdc>)
 80006f0:	7bbb      	ldrb	r3, [r7, #14]
 80006f2:	5453      	strb	r3, [r2, r1]
    bufferIndex++;
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <Command_Parser_ProcessChar+0xe0>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <Command_Parser_ProcessChar+0xe0>)
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	e002      	b.n	8000708 <Command_Parser_ProcessChar+0xd0>
      return;
 8000702:	bf00      	nop
 8000704:	e000      	b.n	8000708 <Command_Parser_ProcessChar+0xd0>
    return;
 8000706:	bf00      	nop
  }
}
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000bd 	.word	0x200000bd
 8000714:	2000007c 	.word	0x2000007c
 8000718:	200000bc 	.word	0x200000bc
 800071c:	080065f4 	.word	0x080065f4

08000720 <Command_Parser_ProcessCommands>:
  *         - Réinitialise le buffer après traitement
  * @param  None
  * @retval None
  */
void Command_Parser_ProcessCommands(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
  if (!commandComplete) { return; }
 8000726:	4b57      	ldr	r3, [pc, #348]	@ (8000884 <Command_Parser_ProcessCommands+0x164>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f083 0301 	eor.w	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	f040 80a2 	bne.w	800087a <Command_Parser_ProcessCommands+0x15a>

  bool commandProcessed = false;
 8000736:	2300      	movs	r3, #0
 8000738:	71fb      	strb	r3, [r7, #7]
  bool isEmptyCommand = (strlen(commandBuffer) == 0); // Vérifier si vide AVANT traitement
 800073a:	4b53      	ldr	r3, [pc, #332]	@ (8000888 <Command_Parser_ProcessCommands+0x168>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf0c      	ite	eq
 8000742:	2301      	moveq	r3, #1
 8000744:	2300      	movne	r3, #0
 8000746:	71bb      	strb	r3, [r7, #6]

  // Traitement des commandes principales
  if (!isEmptyCommand) {
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	f083 0301 	eor.w	r3, r3, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d07d      	beq.n	8000850 <Command_Parser_ProcessCommands+0x130>
      if (strcmp(commandBuffer, CMD_STATUS) == 0) {
 8000754:	494d      	ldr	r1, [pc, #308]	@ (800088c <Command_Parser_ProcessCommands+0x16c>)
 8000756:	484c      	ldr	r0, [pc, #304]	@ (8000888 <Command_Parser_ProcessCommands+0x168>)
 8000758:	f7ff fd5a 	bl	8000210 <strcmp>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d104      	bne.n	800076c <Command_Parser_ProcessCommands+0x4c>
          commandProcessed = Execute_STATUS_Command();
 8000762:	f000 fae7 	bl	8000d34 <Execute_STATUS_Command>
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
 800076a:	e068      	b.n	800083e <Command_Parser_ProcessCommands+0x11e>
      }
      else if (strcmp(commandBuffer, CMD_STOP) == 0) {
 800076c:	4948      	ldr	r1, [pc, #288]	@ (8000890 <Command_Parser_ProcessCommands+0x170>)
 800076e:	4846      	ldr	r0, [pc, #280]	@ (8000888 <Command_Parser_ProcessCommands+0x168>)
 8000770:	f7ff fd4e 	bl	8000210 <strcmp>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <Command_Parser_ProcessCommands+0x64>
          commandProcessed = Execute_STOP_Command();
 800077a:	f000 fac5 	bl	8000d08 <Execute_STOP_Command>
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
 8000782:	e05c      	b.n	800083e <Command_Parser_ProcessCommands+0x11e>
      }
      else if (strncmp(commandBuffer, CMD_LED, strlen(CMD_LED)) == 0) {
 8000784:	2203      	movs	r2, #3
 8000786:	4943      	ldr	r1, [pc, #268]	@ (8000894 <Command_Parser_ProcessCommands+0x174>)
 8000788:	483f      	ldr	r0, [pc, #252]	@ (8000888 <Command_Parser_ProcessCommands+0x168>)
 800078a:	f005 f891 	bl	80058b0 <strncmp>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d105      	bne.n	80007a0 <Command_Parser_ProcessCommands+0x80>
          commandProcessed = Parse_LED_Command(commandBuffer);
 8000794:	483c      	ldr	r0, [pc, #240]	@ (8000888 <Command_Parser_ProcessCommands+0x168>)
 8000796:	f000 f893 	bl	80008c0 <Parse_LED_Command>
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	e04e      	b.n	800083e <Command_Parser_ProcessCommands+0x11e>
      }
      else if (strncmp(commandBuffer, CMD_CHENILLARD, strlen(CMD_CHENILLARD)) == 0) {
 80007a0:	220a      	movs	r2, #10
 80007a2:	493d      	ldr	r1, [pc, #244]	@ (8000898 <Command_Parser_ProcessCommands+0x178>)
 80007a4:	4838      	ldr	r0, [pc, #224]	@ (8000888 <Command_Parser_ProcessCommands+0x168>)
 80007a6:	f005 f883 	bl	80058b0 <strncmp>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d131      	bne.n	8000814 <Command_Parser_ProcessCommands+0xf4>
          const char* argPart = commandBuffer + strlen(CMD_CHENILLARD);
 80007b0:	4b3a      	ldr	r3, [pc, #232]	@ (800089c <Command_Parser_ProcessCommands+0x17c>)
 80007b2:	603b      	str	r3, [r7, #0]
          // CHENILLARD<N> ON
          // Vérifier si le premier char après CHENILLARD est un chiffre et si la fin est " ON"
          if (strlen(argPart) >= 4 && isdigit((unsigned char)argPart[0]) && strcmp(argPart + 1, " " CMD_ON) == 0) {
 80007b4:	6838      	ldr	r0, [r7, #0]
 80007b6:	f7ff fd35 	bl	8000224 <strlen>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d918      	bls.n	80007f2 <Command_Parser_ProcessCommands+0xd2>
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a36      	ldr	r2, [pc, #216]	@ (80008a0 <Command_Parser_ProcessCommands+0x180>)
 80007c8:	4413      	add	r3, r2
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00e      	beq.n	80007f2 <Command_Parser_ProcessCommands+0xd2>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4932      	ldr	r1, [pc, #200]	@ (80008a4 <Command_Parser_ProcessCommands+0x184>)
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fd18 	bl	8000210 <strcmp>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d105      	bne.n	80007f2 <Command_Parser_ProcessCommands+0xd2>
              commandProcessed = Parse_Chenillard_ON_Command(commandBuffer);
 80007e6:	4828      	ldr	r0, [pc, #160]	@ (8000888 <Command_Parser_ProcessCommands+0x168>)
 80007e8:	f000 f8fa 	bl	80009e0 <Parse_Chenillard_ON_Command>
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	e025      	b.n	800083e <Command_Parser_ProcessCommands+0x11e>
          }
          // CHENILLARD FREQUENCE<F>
          else if (strncmp(argPart, " " CMD_FREQ_PREFIX, strlen(" " CMD_FREQ_PREFIX)) == 0) {
 80007f2:	220a      	movs	r2, #10
 80007f4:	492c      	ldr	r1, [pc, #176]	@ (80008a8 <Command_Parser_ProcessCommands+0x188>)
 80007f6:	6838      	ldr	r0, [r7, #0]
 80007f8:	f005 f85a 	bl	80058b0 <strncmp>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d105      	bne.n	800080e <Command_Parser_ProcessCommands+0xee>
              commandProcessed = Parse_Chenillard_Frequency_Command(commandBuffer);
 8000802:	4821      	ldr	r0, [pc, #132]	@ (8000888 <Command_Parser_ProcessCommands+0x168>)
 8000804:	f000 f944 	bl	8000a90 <Parse_Chenillard_Frequency_Command>
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
 800080c:	e017      	b.n	800083e <Command_Parser_ProcessCommands+0x11e>
          }
           // Ignorer "CHENILLARD OFF" ou autre format invalide
          else {
             commandProcessed = false; // Sera traité comme inconnu plus bas
 800080e:	2300      	movs	r3, #0
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	e014      	b.n	800083e <Command_Parser_ProcessCommands+0x11e>
          }
      }
      else if (strncmp(commandBuffer, CMD_PAT, strlen(CMD_PAT)) == 0 ||
 8000814:	2203      	movs	r2, #3
 8000816:	4925      	ldr	r1, [pc, #148]	@ (80008ac <Command_Parser_ProcessCommands+0x18c>)
 8000818:	481b      	ldr	r0, [pc, #108]	@ (8000888 <Command_Parser_ProcessCommands+0x168>)
 800081a:	f005 f849 	bl	80058b0 <strncmp>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d007      	beq.n	8000834 <Command_Parser_ProcessCommands+0x114>
               strncmp(commandBuffer, CMD_FREQ, strlen(CMD_FREQ)) == 0)
 8000824:	2204      	movs	r2, #4
 8000826:	4922      	ldr	r1, [pc, #136]	@ (80008b0 <Command_Parser_ProcessCommands+0x190>)
 8000828:	4817      	ldr	r0, [pc, #92]	@ (8000888 <Command_Parser_ProcessCommands+0x168>)
 800082a:	f005 f841 	bl	80058b0 <strncmp>
 800082e:	4603      	mov	r3, r0
      else if (strncmp(commandBuffer, CMD_PAT, strlen(CMD_PAT)) == 0 ||
 8000830:	2b00      	cmp	r3, #0
 8000832:	d104      	bne.n	800083e <Command_Parser_ProcessCommands+0x11e>
      {
          commandProcessed = Parse_Shortcut_Command(commandBuffer);
 8000834:	4814      	ldr	r0, [pc, #80]	@ (8000888 <Command_Parser_ProcessCommands+0x168>)
 8000836:	f000 f9a3 	bl	8000b80 <Parse_Shortcut_Command>
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
      }

      // Si aucune commande n'a été reconnue ou traitée avec succès
      if (!commandProcessed)
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f083 0301 	eor.w	r3, r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d002      	beq.n	8000850 <Command_Parser_ProcessCommands+0x130>
      {
          Send_Error_Message("Commande inconnue ou format invalide");
 800084a:	481a      	ldr	r0, [pc, #104]	@ (80008b4 <Command_Parser_ProcessCommands+0x194>)
 800084c:	f000 fb26 	bl	8000e9c <Send_Error_Message>
      }
  } // Fin if (!isEmptyCommand)

  // Réinitialisation (ne plus faire dans ProcessChar)
  memset(commandBuffer, 0, COMMAND_BUFFER_SIZE);
 8000850:	2240      	movs	r2, #64	@ 0x40
 8000852:	2100      	movs	r1, #0
 8000854:	480c      	ldr	r0, [pc, #48]	@ (8000888 <Command_Parser_ProcessCommands+0x168>)
 8000856:	f005 f823 	bl	80058a0 <memset>
  bufferIndex = 0;
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <Command_Parser_ProcessCommands+0x198>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
  commandComplete = false; // Marquer comme traitée pour ProcessChar
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <Command_Parser_ProcessCommands+0x164>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]

  // Afficher le prompt seulement si ce n'était pas une commande vide
  if (!isEmptyCommand) {
 8000866:	79bb      	ldrb	r3, [r7, #6]
 8000868:	f083 0301 	eor.w	r3, r3, #1
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d004      	beq.n	800087c <Command_Parser_ProcessCommands+0x15c>
    UART_SendString("STM32> ");
 8000872:	4812      	ldr	r0, [pc, #72]	@ (80008bc <Command_Parser_ProcessCommands+0x19c>)
 8000874:	f000 ff06 	bl	8001684 <UART_SendString>
 8000878:	e000      	b.n	800087c <Command_Parser_ProcessCommands+0x15c>
  if (!commandComplete) { return; }
 800087a:	bf00      	nop
  }
}
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000bd 	.word	0x200000bd
 8000888:	2000007c 	.word	0x2000007c
 800088c:	080061d8 	.word	0x080061d8
 8000890:	080061e0 	.word	0x080061e0
 8000894:	080061e8 	.word	0x080061e8
 8000898:	080061ec 	.word	0x080061ec
 800089c:	20000086 	.word	0x20000086
 80008a0:	080065f4 	.word	0x080065f4
 80008a4:	080061f8 	.word	0x080061f8
 80008a8:	080061fc 	.word	0x080061fc
 80008ac:	08006208 	.word	0x08006208
 80008b0:	0800620c 	.word	0x0800620c
 80008b4:	08006214 	.word	0x08006214
 80008b8:	200000bc 	.word	0x200000bc
 80008bc:	0800623c 	.word	0x0800623c

080008c0 <Parse_LED_Command>:
  *         Exemple : "LED1 ON" ou "LED2 OFF"
  * @param  command: Commande à analyser
  * @retval true si la commande est valide, false sinon
  */
static bool Parse_LED_Command(const char* command)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b090      	sub	sp, #64	@ 0x40
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	6078      	str	r0, [r7, #4]
  size_t prefixLen = strlen(CMD_LED);
 80008c8:	2303      	movs	r3, #3
 80008ca:	633b      	str	r3, [r7, #48]	@ 0x30

  // Vérification longueur minimale (LED1 ON = 6)
  if (strlen(command) < prefixLen + 4) { // LEDN ON
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff fca9 	bl	8000224 <strlen>
 80008d2:	4602      	mov	r2, r0
 80008d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008d6:	3304      	adds	r3, #4
 80008d8:	429a      	cmp	r2, r3
 80008da:	d204      	bcs.n	80008e6 <Parse_LED_Command+0x26>
    Send_Error_Message("Format LED invalide (trop court)");
 80008dc:	4838      	ldr	r0, [pc, #224]	@ (80009c0 <Parse_LED_Command+0x100>)
 80008de:	f000 fadd 	bl	8000e9c <Send_Error_Message>
    return false;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e067      	b.n	80009b6 <Parse_LED_Command+0xf6>
  }

  // Extraction et validation Numéro
  char ledNumChar = command[prefixLen];
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008ea:	4413      	add	r3, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (ledNumChar < '1' || ledNumChar > ('0' + LED_COUNT)) {
 80008f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008f6:	2b30      	cmp	r3, #48	@ 0x30
 80008f8:	d903      	bls.n	8000902 <Parse_LED_Command+0x42>
 80008fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008fe:	2b33      	cmp	r3, #51	@ 0x33
 8000900:	d904      	bls.n	800090c <Parse_LED_Command+0x4c>
      Send_Error_Message("Numero LED invalide (1-3)");
 8000902:	4830      	ldr	r0, [pc, #192]	@ (80009c4 <Parse_LED_Command+0x104>)
 8000904:	f000 faca 	bl	8000e9c <Send_Error_Message>
      return false;
 8000908:	2300      	movs	r3, #0
 800090a:	e054      	b.n	80009b6 <Parse_LED_Command+0xf6>
  }
  uint8_t ledNumber = ledNumChar - '0';
 800090c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000910:	3b30      	subs	r3, #48	@ 0x30
 8000912:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

  // Vérification Espace
  if (command[prefixLen + 1] != ' ') {
 8000916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000918:	3301      	adds	r3, #1
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b20      	cmp	r3, #32
 8000922:	d004      	beq.n	800092e <Parse_LED_Command+0x6e>
      Send_Error_Message("Format LED invalide (espace manquant)");
 8000924:	4828      	ldr	r0, [pc, #160]	@ (80009c8 <Parse_LED_Command+0x108>)
 8000926:	f000 fab9 	bl	8000e9c <Send_Error_Message>
      return false;
 800092a:	2300      	movs	r3, #0
 800092c:	e043      	b.n	80009b6 <Parse_LED_Command+0xf6>
  }

  // Extraction et validation Etat
  const char* stateStr = &command[prefixLen + 2];
 800092e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000930:	3302      	adds	r3, #2
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  LED_State ledState;

  if (strcmp(stateStr, CMD_ON) == 0) {
 8000938:	4924      	ldr	r1, [pc, #144]	@ (80009cc <Parse_LED_Command+0x10c>)
 800093a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800093c:	f7ff fc68 	bl	8000210 <strcmp>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d103      	bne.n	800094e <Parse_LED_Command+0x8e>
    ledState = LED_ON;
 8000946:	2301      	movs	r3, #1
 8000948:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800094c:	e00f      	b.n	800096e <Parse_LED_Command+0xae>
  } else if (strcmp(stateStr, CMD_OFF) == 0) {
 800094e:	4920      	ldr	r1, [pc, #128]	@ (80009d0 <Parse_LED_Command+0x110>)
 8000950:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000952:	f7ff fc5d 	bl	8000210 <strcmp>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d103      	bne.n	8000964 <Parse_LED_Command+0xa4>
    ledState = LED_OFF;
 800095c:	2300      	movs	r3, #0
 800095e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000962:	e004      	b.n	800096e <Parse_LED_Command+0xae>
  } else {
    Send_Error_Message("Etat LED invalide (ON/OFF attendu)");
 8000964:	481b      	ldr	r0, [pc, #108]	@ (80009d4 <Parse_LED_Command+0x114>)
 8000966:	f000 fa99 	bl	8000e9c <Send_Error_Message>
    return false;
 800096a:	2300      	movs	r3, #0
 800096c:	e023      	b.n	80009b6 <Parse_LED_Command+0xf6>
  }

  // Application et message
  if (!LED_SetState(ledNumber, ledState)) {
 800096e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000972:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fb3f 	bl	8000ffc <LED_SetState>
 800097e:	4603      	mov	r3, r0
 8000980:	f083 0301 	eor.w	r3, r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d004      	beq.n	8000994 <Parse_LED_Command+0xd4>
      Send_Error_Message("Impossible de changer LED (pattern actif?)");
 800098a:	4813      	ldr	r0, [pc, #76]	@ (80009d8 <Parse_LED_Command+0x118>)
 800098c:	f000 fa86 	bl	8000e9c <Send_Error_Message>
      return false;
 8000990:	2300      	movs	r3, #0
 8000992:	e010      	b.n	80009b6 <Parse_LED_Command+0xf6>
  }
  char successMsg[30];
  snprintf(successMsg, sizeof(successMsg), "LED %d mise a %s\r\n", ledNumber, stateStr);
 8000994:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000998:	f107 0008 	add.w	r0, r7, #8
 800099c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	4613      	mov	r3, r2
 80009a2:	4a0e      	ldr	r2, [pc, #56]	@ (80009dc <Parse_LED_Command+0x11c>)
 80009a4:	211e      	movs	r1, #30
 80009a6:	f004 ff45 	bl	8005834 <sniprintf>
  Send_Success_Message(successMsg);
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fa3e 	bl	8000e30 <Send_Success_Message>
  return true;
 80009b4:	2301      	movs	r3, #1
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3738      	adds	r7, #56	@ 0x38
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	08006244 	.word	0x08006244
 80009c4:	08006268 	.word	0x08006268
 80009c8:	08006284 	.word	0x08006284
 80009cc:	080062ac 	.word	0x080062ac
 80009d0:	080062b0 	.word	0x080062b0
 80009d4:	080062b4 	.word	0x080062b4
 80009d8:	080062d8 	.word	0x080062d8
 80009dc:	08006304 	.word	0x08006304

080009e0 <Parse_Chenillard_ON_Command>:
  * @brief  Analyse une commande CHENILLARD<N> ON
  * @param  command: Commande à analyser
  * @retval true si la commande est valide et traitée, false sinon
  */
static bool Parse_Chenillard_ON_Command(const char* command)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	@ 0x38
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  // Format: "CHENILLARD<N> ON"
  size_t prefixLen = strlen(CMD_CHENILLARD); // 10
 80009e8:	230a      	movs	r3, #10
 80009ea:	637b      	str	r3, [r7, #52]	@ 0x34

  // Extraction Numéro
  char patternNumChar = command[prefixLen];
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (patternNumChar < '1' || patternNumChar > ('0' + PATTERN_COUNT)) {
 80009f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009fc:	2b30      	cmp	r3, #48	@ 0x30
 80009fe:	d903      	bls.n	8000a08 <Parse_Chenillard_ON_Command+0x28>
 8000a00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a04:	2b33      	cmp	r3, #51	@ 0x33
 8000a06:	d904      	bls.n	8000a12 <Parse_Chenillard_ON_Command+0x32>
      Send_Error_Message("Numero chenillard invalide (1-3)");
 8000a08:	481c      	ldr	r0, [pc, #112]	@ (8000a7c <Parse_Chenillard_ON_Command+0x9c>)
 8000a0a:	f000 fa47 	bl	8000e9c <Send_Error_Message>
      return false;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e02f      	b.n	8000a72 <Parse_Chenillard_ON_Command+0x92>
  }
  uint8_t patternNumber = patternNumChar - '0';
 8000a12:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a16:	3b30      	subs	r3, #48	@ 0x30
 8000a18:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

  // Vérification " ON"
  if (strcmp(&command[prefixLen + 1], " " CMD_ON) != 0) {
 8000a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a1e:	3301      	adds	r3, #1
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	4916      	ldr	r1, [pc, #88]	@ (8000a80 <Parse_Chenillard_ON_Command+0xa0>)
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fbf2 	bl	8000210 <strcmp>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d004      	beq.n	8000a3c <Parse_Chenillard_ON_Command+0x5c>
      Send_Error_Message("Format chenillard ON invalide");
 8000a32:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <Parse_Chenillard_ON_Command+0xa4>)
 8000a34:	f000 fa32 	bl	8000e9c <Send_Error_Message>
      return false;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e01a      	b.n	8000a72 <Parse_Chenillard_ON_Command+0x92>
  }

  // Démarrage et message
  if (Pattern_Start(patternNumber)) {
 8000a3c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fb85 	bl	8001150 <Pattern_Start>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d00e      	beq.n	8000a6a <Parse_Chenillard_ON_Command+0x8a>
      char msg[40];
      snprintf(msg, sizeof(msg), "Chenillard %d active\r\n", patternNumber);
 8000a4c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000a50:	f107 0008 	add.w	r0, r7, #8
 8000a54:	4a0c      	ldr	r2, [pc, #48]	@ (8000a88 <Parse_Chenillard_ON_Command+0xa8>)
 8000a56:	2128      	movs	r1, #40	@ 0x28
 8000a58:	f004 feec 	bl	8005834 <sniprintf>
      Send_Success_Message(msg);
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f9e5 	bl	8000e30 <Send_Success_Message>
      return true;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e003      	b.n	8000a72 <Parse_Chenillard_ON_Command+0x92>
  } else {
      Send_Error_Message("Impossible de demarrer chenillard");
 8000a6a:	4808      	ldr	r0, [pc, #32]	@ (8000a8c <Parse_Chenillard_ON_Command+0xac>)
 8000a6c:	f000 fa16 	bl	8000e9c <Send_Error_Message>
      return false;
 8000a70:	2300      	movs	r3, #0
  }
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3738      	adds	r7, #56	@ 0x38
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	08006318 	.word	0x08006318
 8000a80:	080061f8 	.word	0x080061f8
 8000a84:	0800633c 	.word	0x0800633c
 8000a88:	0800635c 	.word	0x0800635c
 8000a8c:	08006374 	.word	0x08006374

08000a90 <Parse_Chenillard_Frequency_Command>:
  * @brief  Analyse une commande CHENILLARD FREQUENCE<F>
  * @param  command: Commande à analyser
  * @retval true si la commande est valide et traitée, false sinon
  */
static bool Parse_Chenillard_Frequency_Command(const char* command)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b092      	sub	sp, #72	@ 0x48
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  // Format: "CHENILLARD FREQUENCE<F>"
  const char* prefix = CMD_CHENILLARD " " CMD_FREQ_PREFIX; // "CHENILLARD FREQUENCE"
 8000a98:	4b31      	ldr	r3, [pc, #196]	@ (8000b60 <Parse_Chenillard_Frequency_Command+0xd0>)
 8000a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  size_t prefixLen = strlen(prefix);
 8000a9c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000a9e:	f7ff fbc1 	bl	8000224 <strlen>
 8000aa2:	63b8      	str	r0, [r7, #56]	@ 0x38

  if (strlen(command) != prefixLen + 1 || strncmp(command, prefix, prefixLen) != 0) {
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff fbbd 	bl	8000224 <strlen>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aae:	3301      	adds	r3, #1
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d107      	bne.n	8000ac4 <Parse_Chenillard_Frequency_Command+0x34>
 8000ab4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ab6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f004 fef9 	bl	80058b0 <strncmp>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d004      	beq.n	8000ace <Parse_Chenillard_Frequency_Command+0x3e>
      Send_Error_Message("Format Frequence invalide");
 8000ac4:	4827      	ldr	r0, [pc, #156]	@ (8000b64 <Parse_Chenillard_Frequency_Command+0xd4>)
 8000ac6:	f000 f9e9 	bl	8000e9c <Send_Error_Message>
      return false;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e043      	b.n	8000b56 <Parse_Chenillard_Frequency_Command+0xc6>
  }

  // Extraction Numéro Fréquence (1, 2, 3)
  char freqNumChar = command[prefixLen];
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  Pattern_Frequency patternFreq;
  const char* freqStr = NULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	643b      	str	r3, [r7, #64]	@ 0x40

  switch (freqNumChar) {
 8000ade:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ae2:	2b33      	cmp	r3, #51	@ 0x33
 8000ae4:	d012      	beq.n	8000b0c <Parse_Chenillard_Frequency_Command+0x7c>
 8000ae6:	2b33      	cmp	r3, #51	@ 0x33
 8000ae8:	dc16      	bgt.n	8000b18 <Parse_Chenillard_Frequency_Command+0x88>
 8000aea:	2b31      	cmp	r3, #49	@ 0x31
 8000aec:	d002      	beq.n	8000af4 <Parse_Chenillard_Frequency_Command+0x64>
 8000aee:	2b32      	cmp	r3, #50	@ 0x32
 8000af0:	d006      	beq.n	8000b00 <Parse_Chenillard_Frequency_Command+0x70>
 8000af2:	e011      	b.n	8000b18 <Parse_Chenillard_Frequency_Command+0x88>
      case '1': patternFreq = PATTERN_FREQ_500MS; freqStr = "500MS"; break;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000afa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <Parse_Chenillard_Frequency_Command+0xd8>)
 8000afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8000afe:	e010      	b.n	8000b22 <Parse_Chenillard_Frequency_Command+0x92>
      case '2': patternFreq = PATTERN_FREQ_1S; freqStr = "1S"; break;
 8000b00:	2301      	movs	r3, #1
 8000b02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000b06:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <Parse_Chenillard_Frequency_Command+0xdc>)
 8000b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b0a:	e00a      	b.n	8000b22 <Parse_Chenillard_Frequency_Command+0x92>
      case '3': patternFreq = PATTERN_FREQ_3S; freqStr = "3S"; break;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000b12:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <Parse_Chenillard_Frequency_Command+0xe0>)
 8000b14:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b16:	e004      	b.n	8000b22 <Parse_Chenillard_Frequency_Command+0x92>
      default:
          Send_Error_Message("Numero Frequence invalide (1-3)");
 8000b18:	4816      	ldr	r0, [pc, #88]	@ (8000b74 <Parse_Chenillard_Frequency_Command+0xe4>)
 8000b1a:	f000 f9bf 	bl	8000e9c <Send_Error_Message>
          return false;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e019      	b.n	8000b56 <Parse_Chenillard_Frequency_Command+0xc6>
  }

  // Mise à jour et message
  if (Pattern_SetFrequency(patternFreq)) {
 8000b22:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fb68 	bl	80011fc <Pattern_SetFrequency>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00d      	beq.n	8000b4e <Parse_Chenillard_Frequency_Command+0xbe>
      char msg[40];
      snprintf(msg, sizeof(msg), "Frequence reglee a %s\r\n", freqStr);
 8000b32:	f107 000c 	add.w	r0, r7, #12
 8000b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b38:	4a0f      	ldr	r2, [pc, #60]	@ (8000b78 <Parse_Chenillard_Frequency_Command+0xe8>)
 8000b3a:	2128      	movs	r1, #40	@ 0x28
 8000b3c:	f004 fe7a 	bl	8005834 <sniprintf>
      Send_Success_Message(msg);
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f973 	bl	8000e30 <Send_Success_Message>
      return true;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e003      	b.n	8000b56 <Parse_Chenillard_Frequency_Command+0xc6>
  } else {
      Send_Error_Message("Impossible de regler frequence");
 8000b4e:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <Parse_Chenillard_Frequency_Command+0xec>)
 8000b50:	f000 f9a4 	bl	8000e9c <Send_Error_Message>
      return false;
 8000b54:	2300      	movs	r3, #0
  }
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3748      	adds	r7, #72	@ 0x48
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	08006398 	.word	0x08006398
 8000b64:	080063b0 	.word	0x080063b0
 8000b68:	080063cc 	.word	0x080063cc
 8000b6c:	080063d4 	.word	0x080063d4
 8000b70:	080063d8 	.word	0x080063d8
 8000b74:	080063dc 	.word	0x080063dc
 8000b78:	080063fc 	.word	0x080063fc
 8000b7c:	08006414 	.word	0x08006414

08000b80 <Parse_Shortcut_Command>:
  * @brief  Analyse une commande raccourci (PAT, FREQ, STOP)
  * @param  command: Commande à analyser
  * @retval true si la commande est valide et traitée, false sinon
  */
static bool Parse_Shortcut_Command(const char* command)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b090      	sub	sp, #64	@ 0x40
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    // STOP
    if (strcmp(command, CMD_STOP) == 0) {
 8000b88:	4952      	ldr	r1, [pc, #328]	@ (8000cd4 <Parse_Shortcut_Command+0x154>)
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fb40 	bl	8000210 <strcmp>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d103      	bne.n	8000b9e <Parse_Shortcut_Command+0x1e>
        return Execute_STOP_Command(); // Appelle la fonction dédiée
 8000b96:	f000 f8b7 	bl	8000d08 <Execute_STOP_Command>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	e096      	b.n	8000ccc <Parse_Shortcut_Command+0x14c>
    }
    // PAT<N>
    else if (strncmp(command, CMD_PAT, strlen(CMD_PAT)) == 0 && strlen(command) == strlen(CMD_PAT) + 1) {
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	494d      	ldr	r1, [pc, #308]	@ (8000cd8 <Parse_Shortcut_Command+0x158>)
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f004 fe84 	bl	80058b0 <strncmp>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d138      	bne.n	8000c20 <Parse_Shortcut_Command+0xa0>
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fb38 	bl	8000224 <strlen>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	d132      	bne.n	8000c20 <Parse_Shortcut_Command+0xa0>
        char patternNumChar = command[strlen(CMD_PAT)];
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3303      	adds	r3, #3
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if (patternNumChar >= '1' && patternNumChar <= ('0' + PATTERN_COUNT)) {
 8000bc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000bc8:	2b30      	cmp	r3, #48	@ 0x30
 8000bca:	d924      	bls.n	8000c16 <Parse_Shortcut_Command+0x96>
 8000bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000bd0:	2b33      	cmp	r3, #51	@ 0x33
 8000bd2:	d820      	bhi.n	8000c16 <Parse_Shortcut_Command+0x96>
            uint8_t patternNumber = patternNumChar - '0';
 8000bd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000bd8:	3b30      	subs	r3, #48	@ 0x30
 8000bda:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
            if (Pattern_Start(patternNumber)) {
 8000bde:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fab4 	bl	8001150 <Pattern_Start>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00e      	beq.n	8000c0c <Parse_Shortcut_Command+0x8c>
                char msg[40];
                snprintf(msg, sizeof(msg), "Chenillard %d active\r\n", patternNumber);
 8000bee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000bf2:	f107 000c 	add.w	r0, r7, #12
 8000bf6:	4a39      	ldr	r2, [pc, #228]	@ (8000cdc <Parse_Shortcut_Command+0x15c>)
 8000bf8:	2128      	movs	r1, #40	@ 0x28
 8000bfa:	f004 fe1b 	bl	8005834 <sniprintf>
                Send_Success_Message(msg);
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f914 	bl	8000e30 <Send_Success_Message>
                return true;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e05f      	b.n	8000ccc <Parse_Shortcut_Command+0x14c>
            } else {
                Send_Error_Message("Impossible de demarrer chenillard");
 8000c0c:	4834      	ldr	r0, [pc, #208]	@ (8000ce0 <Parse_Shortcut_Command+0x160>)
 8000c0e:	f000 f945 	bl	8000e9c <Send_Error_Message>
                return false;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e05a      	b.n	8000ccc <Parse_Shortcut_Command+0x14c>
            }
        } else {
             Send_Error_Message("Numero PAT invalide (1-3)");
 8000c16:	4833      	ldr	r0, [pc, #204]	@ (8000ce4 <Parse_Shortcut_Command+0x164>)
 8000c18:	f000 f940 	bl	8000e9c <Send_Error_Message>
             return false;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e055      	b.n	8000ccc <Parse_Shortcut_Command+0x14c>
        }
    }
    // FREQ<F>
    else if (strncmp(command, CMD_FREQ, strlen(CMD_FREQ)) == 0 && strlen(command) == strlen(CMD_FREQ) + 1) {
 8000c20:	2204      	movs	r2, #4
 8000c22:	4931      	ldr	r1, [pc, #196]	@ (8000ce8 <Parse_Shortcut_Command+0x168>)
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f004 fe43 	bl	80058b0 <strncmp>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d149      	bne.n	8000cc4 <Parse_Shortcut_Command+0x144>
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff faf7 	bl	8000224 <strlen>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b05      	cmp	r3, #5
 8000c3a:	d143      	bne.n	8000cc4 <Parse_Shortcut_Command+0x144>
        char freqNumChar = command[strlen(CMD_FREQ)];
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3304      	adds	r3, #4
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        Pattern_Frequency patternFreq;
        const char* freqStr = NULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	63bb      	str	r3, [r7, #56]	@ 0x38

        switch (freqNumChar) {
 8000c4a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000c4e:	2b33      	cmp	r3, #51	@ 0x33
 8000c50:	d012      	beq.n	8000c78 <Parse_Shortcut_Command+0xf8>
 8000c52:	2b33      	cmp	r3, #51	@ 0x33
 8000c54:	dc16      	bgt.n	8000c84 <Parse_Shortcut_Command+0x104>
 8000c56:	2b31      	cmp	r3, #49	@ 0x31
 8000c58:	d002      	beq.n	8000c60 <Parse_Shortcut_Command+0xe0>
 8000c5a:	2b32      	cmp	r3, #50	@ 0x32
 8000c5c:	d006      	beq.n	8000c6c <Parse_Shortcut_Command+0xec>
 8000c5e:	e011      	b.n	8000c84 <Parse_Shortcut_Command+0x104>
            case '1': patternFreq = PATTERN_FREQ_500MS; freqStr = "500MS"; break;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000c66:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <Parse_Shortcut_Command+0x16c>)
 8000c68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c6a:	e010      	b.n	8000c8e <Parse_Shortcut_Command+0x10e>
            case '2': patternFreq = PATTERN_FREQ_1S; freqStr = "1S"; break;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <Parse_Shortcut_Command+0x170>)
 8000c74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c76:	e00a      	b.n	8000c8e <Parse_Shortcut_Command+0x10e>
            case '3': patternFreq = PATTERN_FREQ_3S; freqStr = "3S"; break;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <Parse_Shortcut_Command+0x174>)
 8000c80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c82:	e004      	b.n	8000c8e <Parse_Shortcut_Command+0x10e>
            default:
                 Send_Error_Message("Numero FREQ invalide (1-3)");
 8000c84:	481c      	ldr	r0, [pc, #112]	@ (8000cf8 <Parse_Shortcut_Command+0x178>)
 8000c86:	f000 f909 	bl	8000e9c <Send_Error_Message>
                 return false;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e01e      	b.n	8000ccc <Parse_Shortcut_Command+0x14c>
        }

        if (Pattern_SetFrequency(patternFreq)) {
 8000c8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fab2 	bl	80011fc <Pattern_SetFrequency>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00d      	beq.n	8000cba <Parse_Shortcut_Command+0x13a>
            char msg[40];
            snprintf(msg, sizeof(msg), "Frequence reglee a %s\r\n", freqStr);
 8000c9e:	f107 000c 	add.w	r0, r7, #12
 8000ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ca4:	4a15      	ldr	r2, [pc, #84]	@ (8000cfc <Parse_Shortcut_Command+0x17c>)
 8000ca6:	2128      	movs	r1, #40	@ 0x28
 8000ca8:	f004 fdc4 	bl	8005834 <sniprintf>
            Send_Success_Message(msg);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 f8bd 	bl	8000e30 <Send_Success_Message>
            return true;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e008      	b.n	8000ccc <Parse_Shortcut_Command+0x14c>
        } else {
             Send_Error_Message("Impossible de regler frequence");
 8000cba:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <Parse_Shortcut_Command+0x180>)
 8000cbc:	f000 f8ee 	bl	8000e9c <Send_Error_Message>
             return false;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e003      	b.n	8000ccc <Parse_Shortcut_Command+0x14c>
        }
    }

    Send_Error_Message("Raccourci invalide");
 8000cc4:	480f      	ldr	r0, [pc, #60]	@ (8000d04 <Parse_Shortcut_Command+0x184>)
 8000cc6:	f000 f8e9 	bl	8000e9c <Send_Error_Message>
    return false;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3740      	adds	r7, #64	@ 0x40
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	080061e0 	.word	0x080061e0
 8000cd8:	08006208 	.word	0x08006208
 8000cdc:	0800635c 	.word	0x0800635c
 8000ce0:	08006374 	.word	0x08006374
 8000ce4:	08006434 	.word	0x08006434
 8000ce8:	0800620c 	.word	0x0800620c
 8000cec:	080063cc 	.word	0x080063cc
 8000cf0:	080063d4 	.word	0x080063d4
 8000cf4:	080063d8 	.word	0x080063d8
 8000cf8:	08006450 	.word	0x08006450
 8000cfc:	080063fc 	.word	0x080063fc
 8000d00:	08006414 	.word	0x08006414
 8000d04:	0800646c 	.word	0x0800646c

08000d08 <Execute_STOP_Command>:
/**
  * @brief  Execute le STOP command
  * @retval true si la commande est traitée avec succès, false sinon
  */
static bool Execute_STOP_Command(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
    if (Pattern_Stop()) {
 8000d0c:	f000 fa4e 	bl	80011ac <Pattern_Stop>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d004      	beq.n	8000d20 <Execute_STOP_Command+0x18>
        Send_Success_Message("Chenillard arrete\r\n");
 8000d16:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <Execute_STOP_Command+0x24>)
 8000d18:	f000 f88a 	bl	8000e30 <Send_Success_Message>
        return true;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e003      	b.n	8000d28 <Execute_STOP_Command+0x20>
    } else {
        Send_Error_Message("Aucun chenillard actif a arreter");
 8000d20:	4803      	ldr	r0, [pc, #12]	@ (8000d30 <Execute_STOP_Command+0x28>)
 8000d22:	f000 f8bb 	bl	8000e9c <Send_Error_Message>
        // Considérer comme traité pour éviter "commande inconnue"
        return true;
 8000d26:	2301      	movs	r3, #1
    }
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	08006480 	.word	0x08006480
 8000d30:	08006494 	.word	0x08006494

08000d34 <Execute_STATUS_Command>:
/**
  * @brief  Execute le STATUS command
  * @retval true si la commande est traitée avec succès, false sinon
  */
static bool Execute_STATUS_Command(void)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b099      	sub	sp, #100	@ 0x64
 8000d38:	af02      	add	r7, sp, #8
    char buffer[80];
    UART_SendString("--- Statut ---\r\n");
 8000d3a:	4833      	ldr	r0, [pc, #204]	@ (8000e08 <Execute_STATUS_Command+0xd4>)
 8000d3c:	f000 fca2 	bl	8001684 <UART_SendString>

    // LEDs
    for (uint8_t i = 1; i <= LED_COUNT; i++) {
 8000d40:	2301      	movs	r3, #1
 8000d42:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000d46:	e01c      	b.n	8000d82 <Execute_STATUS_Command+0x4e>
        snprintf(buffer, sizeof(buffer), "LED %d: %s\r\n", i, (LED_GetState(i) == LED_ON) ? CMD_ON : CMD_OFF);
 8000d48:	f897 4057 	ldrb.w	r4, [r7, #87]	@ 0x57
 8000d4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f98d 	bl	8001070 <LED_GetState>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <Execute_STATUS_Command+0x2c>
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e0c <Execute_STATUS_Command+0xd8>)
 8000d5e:	e000      	b.n	8000d62 <Execute_STATUS_Command+0x2e>
 8000d60:	4b2b      	ldr	r3, [pc, #172]	@ (8000e10 <Execute_STATUS_Command+0xdc>)
 8000d62:	4638      	mov	r0, r7
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	4623      	mov	r3, r4
 8000d68:	4a2a      	ldr	r2, [pc, #168]	@ (8000e14 <Execute_STATUS_Command+0xe0>)
 8000d6a:	2150      	movs	r1, #80	@ 0x50
 8000d6c:	f004 fd62 	bl	8005834 <sniprintf>
        UART_SendString(buffer);
 8000d70:	463b      	mov	r3, r7
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fc86 	bl	8001684 <UART_SendString>
    for (uint8_t i = 1; i <= LED_COUNT; i++) {
 8000d78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000d82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d9de      	bls.n	8000d48 <Execute_STATUS_Command+0x14>
    }

    // Chenillard
    Pattern_Type activePat = Pattern_GetActive();
 8000d8a:	f000 fa5f 	bl	800124c <Pattern_GetActive>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    Pattern_Frequency currentFreq = Pattern_GetFrequency();
 8000d94:	f000 fa66 	bl	8001264 <Pattern_GetFrequency>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    const char* freqStr = (currentFreq == PATTERN_FREQ_500MS) ? "500MS" : ((currentFreq == PATTERN_FREQ_1S) ? "1S" : "3S");
 8000d9e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d007      	beq.n	8000db6 <Execute_STATUS_Command+0x82>
 8000da6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d101      	bne.n	8000db2 <Execute_STATUS_Command+0x7e>
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <Execute_STATUS_Command+0xe4>)
 8000db0:	e002      	b.n	8000db8 <Execute_STATUS_Command+0x84>
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <Execute_STATUS_Command+0xe8>)
 8000db4:	e000      	b.n	8000db8 <Execute_STATUS_Command+0x84>
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <Execute_STATUS_Command+0xec>)
 8000db8:	653b      	str	r3, [r7, #80]	@ 0x50
    if (activePat == PATTERN_NONE) {
 8000dba:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d106      	bne.n	8000dd0 <Execute_STATUS_Command+0x9c>
        snprintf(buffer, sizeof(buffer), "Chenillard: INACTIF (Freq select: %s)\r\n", freqStr);
 8000dc2:	4638      	mov	r0, r7
 8000dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000dc6:	4a17      	ldr	r2, [pc, #92]	@ (8000e24 <Execute_STATUS_Command+0xf0>)
 8000dc8:	2150      	movs	r1, #80	@ 0x50
 8000dca:	f004 fd33 	bl	8005834 <sniprintf>
 8000dce:	e009      	b.n	8000de4 <Execute_STATUS_Command+0xb0>
    } else {
        snprintf(buffer, sizeof(buffer), "Chenillard: ACTIF (Pattern: %d, Freq: %s)\r\n", activePat, freqStr);
 8000dd0:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8000dd4:	4638      	mov	r0, r7
 8000dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <Execute_STATUS_Command+0xf4>)
 8000dde:	2150      	movs	r1, #80	@ 0x50
 8000de0:	f004 fd28 	bl	8005834 <sniprintf>
    }
    UART_SendString(buffer);
 8000de4:	463b      	mov	r3, r7
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 fc4c 	bl	8001684 <UART_SendString>

    // Overflow UART?
    if (UART_HasOverflow()) {
 8000dec:	f000 fc9c 	bl	8001728 <UART_HasOverflow>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <Execute_STATUS_Command+0xc8>
        UART_SendString("Attention: Debordement buffer UART detecte!\r\n");
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <Execute_STATUS_Command+0xf8>)
 8000df8:	f000 fc44 	bl	8001684 <UART_SendString>
    }

    return true;
 8000dfc:	2301      	movs	r3, #1
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	375c      	adds	r7, #92	@ 0x5c
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	bf00      	nop
 8000e08:	080064b8 	.word	0x080064b8
 8000e0c:	080062ac 	.word	0x080062ac
 8000e10:	080062b0 	.word	0x080062b0
 8000e14:	080064cc 	.word	0x080064cc
 8000e18:	080063d4 	.word	0x080063d4
 8000e1c:	080063d8 	.word	0x080063d8
 8000e20:	080063cc 	.word	0x080063cc
 8000e24:	080064dc 	.word	0x080064dc
 8000e28:	08006504 	.word	0x08006504
 8000e2c:	08006530 	.word	0x08006530

08000e30 <Send_Success_Message>:

/**
  * @brief  Envoi d'un message de succès
  */
static void Send_Success_Message(const char* message)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09c      	sub	sp, #112	@ 0x70
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    char buffer[100];
    // Assurer que le message original finit par \r\n pour la clarté
    size_t msgLen = strlen(message);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff f9f3 	bl	8000224 <strlen>
 8000e3e:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (msgLen > 2 && message[msgLen-2] == '\r' && message[msgLen-1] == '\n') {
 8000e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d915      	bls.n	8000e72 <Send_Success_Message+0x42>
 8000e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b0d      	cmp	r3, #13
 8000e52:	d10e      	bne.n	8000e72 <Send_Success_Message+0x42>
 8000e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e56:	3b01      	subs	r3, #1
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b0a      	cmp	r3, #10
 8000e60:	d107      	bne.n	8000e72 <Send_Success_Message+0x42>
        snprintf(buffer, sizeof(buffer), "[OK] %s", message);
 8000e62:	f107 0008 	add.w	r0, r7, #8
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <Send_Success_Message+0x64>)
 8000e6a:	2164      	movs	r1, #100	@ 0x64
 8000e6c:	f004 fce2 	bl	8005834 <sniprintf>
 8000e70:	e006      	b.n	8000e80 <Send_Success_Message+0x50>
    } else {
        snprintf(buffer, sizeof(buffer), "[OK] %s\r\n", message);
 8000e72:	f107 0008 	add.w	r0, r7, #8
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a07      	ldr	r2, [pc, #28]	@ (8000e98 <Send_Success_Message+0x68>)
 8000e7a:	2164      	movs	r1, #100	@ 0x64
 8000e7c:	f004 fcda 	bl	8005834 <sniprintf>
    }
    UART_SendString(buffer);
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fbfd 	bl	8001684 <UART_SendString>
}
 8000e8a:	bf00      	nop
 8000e8c:	3770      	adds	r7, #112	@ 0x70
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	08006560 	.word	0x08006560
 8000e98:	08006568 	.word	0x08006568

08000e9c <Send_Error_Message>:

/**
  * @brief  Envoi d'un message d'erreur
  */
static void Send_Error_Message(const char* message)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09c      	sub	sp, #112	@ 0x70
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    char buffer[100];
    snprintf(buffer, sizeof(buffer), "[ERR] %s\r\n", message);
 8000ea4:	f107 000c 	add.w	r0, r7, #12
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a06      	ldr	r2, [pc, #24]	@ (8000ec4 <Send_Error_Message+0x28>)
 8000eac:	2164      	movs	r1, #100	@ 0x64
 8000eae:	f004 fcc1 	bl	8005834 <sniprintf>
    UART_SendString(buffer);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fbe4 	bl	8001684 <UART_SendString>
}
 8000ebc:	bf00      	nop
 8000ebe:	3770      	adds	r7, #112	@ 0x70
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	08006574 	.word	0x08006574

08000ec8 <LED_Controller_Init>:
  * @brief  Initialise le contrôleur de LED
  * @param  Aucun
  * @retval Aucun
  */
void LED_Controller_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  /* Activation de l'horloge du port GPIOB */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <LED_Controller_Init+0x60>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a15      	ldr	r2, [pc, #84]	@ (8000f28 <LED_Controller_Init+0x60>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <LED_Controller_Init+0x60>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  
  /* Configuration des broches */
  GPIO_InitStruct.Pin = LED1_PIN | LED2_PIN | LED3_PIN;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <LED_Controller_Init+0x64>)
 8000ee8:	f244 0281 	movw	r2, #16513	@ 0x4081
 8000eec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <LED_Controller_Init+0x64>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <LED_Controller_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <LED_Controller_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
  
  /* Initialisation des broches */
  HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8000f00:	490a      	ldr	r1, [pc, #40]	@ (8000f2c <LED_Controller_Init+0x64>)
 8000f02:	480b      	ldr	r0, [pc, #44]	@ (8000f30 <LED_Controller_Init+0x68>)
 8000f04:	f001 fa6a 	bl	80023dc <HAL_GPIO_Init>
  
  /* Extinction de toutes les LED */
  LED_SetState(1, LED_OFF);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f000 f876 	bl	8000ffc <LED_SetState>
  LED_SetState(2, LED_OFF);
 8000f10:	2100      	movs	r1, #0
 8000f12:	2002      	movs	r0, #2
 8000f14:	f000 f872 	bl	8000ffc <LED_SetState>
  LED_SetState(3, LED_OFF);
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f000 f86e 	bl	8000ffc <LED_SetState>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	200000c0 	.word	0x200000c0
 8000f30:	40020400 	.word	0x40020400

08000f34 <LED_IsValidNumber>:
  *         Les numéros valides sont compris entre 1 et LED_COUNT.
  * @param  ledNumber: Numéro de la LED à vérifier
  * @retval true si le numéro est valide, false sinon
  */
bool LED_IsValidNumber(uint8_t ledNumber)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  return (ledNumber >= 1 && ledNumber <= LED_COUNT);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <LED_IsValidNumber+0x1a>
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d801      	bhi.n	8000f4e <LED_IsValidNumber+0x1a>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <LED_IsValidNumber+0x1c>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	b2db      	uxtb	r3, r3
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LED_NumberToPin>:
  *         LED1 -> PB0, LED2 -> PB7, LED3 -> PB14
  * @param  ledNumber: Numéro de la LED
  * @retval Broche GPIO correspondante, ou 0 si le numéro est invalide
  */
static uint16_t LED_NumberToPin(uint8_t ledNumber)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
  switch (ledNumber)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d00a      	beq.n	8000f88 <LED_NumberToPin+0x26>
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	dc0b      	bgt.n	8000f8e <LED_NumberToPin+0x2c>
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d002      	beq.n	8000f80 <LED_NumberToPin+0x1e>
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d002      	beq.n	8000f84 <LED_NumberToPin+0x22>
 8000f7e:	e006      	b.n	8000f8e <LED_NumberToPin+0x2c>
  {
    case 1:
      return LED1_PIN;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e005      	b.n	8000f90 <LED_NumberToPin+0x2e>
    case 2:
      return LED2_PIN;
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	e003      	b.n	8000f90 <LED_NumberToPin+0x2e>
    case 3:
      return LED3_PIN;
 8000f88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f8c:	e000      	b.n	8000f90 <LED_NumberToPin+0x2e>
    default:
      return 0;
 8000f8e:	2300      	movs	r3, #0
  }
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LED_ForceState>:
  * @param  ledNumber: Numéro de la LED à modifier
  * @param  state: Nouvel état de la LED (LED_ON ou LED_OFF)
  * @retval None
  */
void LED_ForceState(uint8_t ledNumber, LED_State state)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	71bb      	strb	r3, [r7, #6]
  /* Vérification de la validité du numéro de LED */
  if (!LED_IsValidNumber(ledNumber))
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ffc0 	bl	8000f34 <LED_IsValidNumber>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f083 0301 	eor.w	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d115      	bne.n	8000fec <LED_ForceState+0x50>
  {
    return; // Ne rien faire si le numéro est invalide
  }

  /* Conversion du numéro de LED en broche GPIO */
  uint16_t pin = LED_NumberToPin(ledNumber);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ffcd 	bl	8000f62 <LED_NumberToPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	81fb      	strh	r3, [r7, #14]
  if (pin == 0)
 8000fcc:	89fb      	ldrh	r3, [r7, #14]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00e      	beq.n	8000ff0 <LED_ForceState+0x54>
  {
    return; // Ne rien faire si le pin est invalide
  }

  /* Modification de l'état de la LED */
  HAL_GPIO_WritePin(LED_PORT, pin, (state == LED_ON) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	89fb      	ldrh	r3, [r7, #14]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <LED_ForceState+0x5c>)
 8000fe6:	f001 fbbd 	bl	8002764 <HAL_GPIO_WritePin>
 8000fea:	e002      	b.n	8000ff2 <LED_ForceState+0x56>
    return; // Ne rien faire si le numéro est invalide
 8000fec:	bf00      	nop
 8000fee:	e000      	b.n	8000ff2 <LED_ForceState+0x56>
    return; // Ne rien faire si le pin est invalide
 8000ff0:	bf00      	nop
}
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40020400 	.word	0x40020400

08000ffc <LED_SetState>:
  * @param  ledNumber: Numéro de la LED à modifier
  * @param  state: Nouvel état de la LED (LED_ON ou LED_OFF)
  * @retval true si l'opération a réussi, false sinon
  */
bool LED_SetState(uint8_t ledNumber, LED_State state)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
  /* Vérification de la validité du numéro de LED */
  if (!LED_IsValidNumber(ledNumber))
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff90 	bl	8000f34 <LED_IsValidNumber>
 8001014:	4603      	mov	r3, r0
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <LED_SetState+0x28>
  {
    return false;
 8001020:	2300      	movs	r3, #0
 8001022:	e01e      	b.n	8001062 <LED_SetState+0x66>
  }
  
  /* Vérification qu'aucun chenillard n'est actif */
  if (Pattern_IsActive())
 8001024:	f000 f92a 	bl	800127c <Pattern_IsActive>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <LED_SetState+0x36>
  {
    return false;
 800102e:	2300      	movs	r3, #0
 8001030:	e017      	b.n	8001062 <LED_SetState+0x66>
  }
  
  /* Conversion du numéro de LED en broche GPIO */
  uint16_t pin = LED_NumberToPin(ledNumber);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff94 	bl	8000f62 <LED_NumberToPin>
 800103a:	4603      	mov	r3, r0
 800103c:	81fb      	strh	r3, [r7, #14]
  if (pin == 0)
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <LED_SetState+0x4c>
  {
    return false;
 8001044:	2300      	movs	r3, #0
 8001046:	e00c      	b.n	8001062 <LED_SetState+0x66>
  }
  
  /* Modification de l'état de la LED */
  HAL_GPIO_WritePin(LED_PORT, pin, (state == LED_ON) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	2b01      	cmp	r3, #1
 800104c:	bf0c      	ite	eq
 800104e:	2301      	moveq	r3, #1
 8001050:	2300      	movne	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	89fb      	ldrh	r3, [r7, #14]
 8001058:	4619      	mov	r1, r3
 800105a:	4804      	ldr	r0, [pc, #16]	@ (800106c <LED_SetState+0x70>)
 800105c:	f001 fb82 	bl	8002764 <HAL_GPIO_WritePin>
  
  return true;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40020400 	.word	0x40020400

08001070 <LED_GetState>:
  * @note   Cette fonction permet de connaître l'état actuel d'une LED.
  * @param  ledNumber: Numéro de la LED
  * @retval État de la LED (LED_ON ou LED_OFF), ou LED_ERROR en cas d'erreur
  */
LED_State LED_GetState(uint8_t ledNumber)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  /* Vérification de la validité du numéro de LED */
  if (!LED_IsValidNumber(ledNumber))
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff59 	bl	8000f34 <LED_IsValidNumber>
 8001082:	4603      	mov	r3, r0
 8001084:	f083 0301 	eor.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <LED_GetState+0x22>
  {
    return LED_ERROR;
 800108e:	2302      	movs	r3, #2
 8001090:	e017      	b.n	80010c2 <LED_GetState+0x52>
  }
  
  /* Conversion du numéro de LED en broche GPIO */
  uint16_t pin = LED_NumberToPin(ledNumber);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff64 	bl	8000f62 <LED_NumberToPin>
 800109a:	4603      	mov	r3, r0
 800109c:	81fb      	strh	r3, [r7, #14]
  if (pin == 0)
 800109e:	89fb      	ldrh	r3, [r7, #14]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <LED_GetState+0x38>
  {
    return LED_ERROR;
 80010a4:	2302      	movs	r3, #2
 80010a6:	e00c      	b.n	80010c2 <LED_GetState+0x52>
  }
  
  /* Lecture de l'état de la LED */
  GPIO_PinState pinState = HAL_GPIO_ReadPin(LED_PORT, pin);
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	4619      	mov	r1, r3
 80010ac:	4807      	ldr	r0, [pc, #28]	@ (80010cc <LED_GetState+0x5c>)
 80010ae:	f001 fb41 	bl	8002734 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	737b      	strb	r3, [r7, #13]
  return (pinState == GPIO_PIN_SET) ? LED_ON : LED_OFF;
 80010b6:	7b7b      	ldrb	r3, [r7, #13]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	bf0c      	ite	eq
 80010bc:	2301      	moveq	r3, #1
 80010be:	2300      	movne	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40020400 	.word	0x40020400

080010d0 <LED_Init>:

/**
  * @brief  Wrapper pour LED_Controller_Init
  */
void LED_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    LED_Controller_Init();
 80010d4:	f7ff fef8 	bl	8000ec8 <LED_Controller_Init>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <PATTERN_Init>:

/**
  * @brief  Wrapper pour Pattern_Init
  */
void PATTERN_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
    Pattern_Controller_Init();
 80010e0:	f000 f81a 	bl	8001118 <Pattern_Controller_Init>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <TIMER_Init>:

/**
  * @brief  Wrapper pour Timer_Init
  */
void TIMER_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
    Timer_Init();
 80010ec:	f000 f9e2 	bl	80014b4 <Timer_Init>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <COMMAND_Init>:

/**
  * @brief  Wrapper pour Command_Parser_Init
  */
void COMMAND_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
    Command_Parser_Init();
 80010f8:	f7ff fa88 	bl	800060c <Command_Parser_Init>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <COMMAND_Process>:

/**
  * @brief  Wrapper pour Command_Parser_ProcessCommands
  */
void COMMAND_Process(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
    Command_Parser_ProcessCommands();
 8001104:	f7ff fb0c 	bl	8000720 <Command_Parser_ProcessCommands>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <PATTERN_Process>:

/**
  * @brief  Wrapper pour Pattern_Process
  */
void PATTERN_Process(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    Pattern_Controller_Update();
 8001110:	f000 f8c4 	bl	800129c <Pattern_Controller_Update>
} 
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <Pattern_Controller_Init>:
  *         - Désactive le flag de mise à jour
  * @param  None
  * @retval None
  */
void Pattern_Controller_Init(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  activePattern = PATTERN_NONE;
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <Pattern_Controller_Init+0x28>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
  currentFrequency = PATTERN_FREQ_1S;
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <Pattern_Controller_Init+0x2c>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
  patternStep = 0;
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <Pattern_Controller_Init+0x30>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
  patternNeedsUpdate = false;
 800112e:	4b07      	ldr	r3, [pc, #28]	@ (800114c <Pattern_Controller_Init+0x34>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200000d4 	.word	0x200000d4
 8001144:	20000000 	.word	0x20000000
 8001148:	200000d5 	.word	0x200000d5
 800114c:	200000d6 	.word	0x200000d6

08001150 <Pattern_Start>:
  *         - Force une mise à jour immédiate pour voir l'effet
  * @param  pattern: Type de chenillard à démarrer (PATTERN_1, PATTERN_2, PATTERN_3)
  * @retval true si l'opération a réussi, false sinon
  */
bool Pattern_Start(Pattern_Type pattern)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  /* Vérification de la validité du type de chenillard */
  if (pattern <= PATTERN_NONE || pattern > PATTERN_COUNT)
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <Pattern_Start+0x16>
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d901      	bls.n	800116a <Pattern_Start+0x1a>
  {
    return false;
 8001166:	2300      	movs	r3, #0
 8001168:	e014      	b.n	8001194 <Pattern_Start+0x44>
  }
  
  /* Arrêt du chenillard actif si nécessaire */
  if (activePattern != PATTERN_NONE)
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <Pattern_Start+0x4c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <Pattern_Start+0x26>
  {
    Pattern_Stop();
 8001172:	f000 f81b 	bl	80011ac <Pattern_Stop>
  }
  
  /* Activation du chenillard demandé */
  activePattern = pattern;
 8001176:	4a09      	ldr	r2, [pc, #36]	@ (800119c <Pattern_Start+0x4c>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	7013      	strb	r3, [r2, #0]
  patternStep = 0;
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <Pattern_Start+0x50>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
  
  /* Démarrage du timer correspondant à la fréquence actuelle */
  Timer_Start(currentFrequency);
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <Pattern_Start+0x54>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f9ae 	bl	80014e8 <Timer_Start>
  
  /* Mise à jour immédiate pour voir un effet */
  patternNeedsUpdate = true;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <Pattern_Start+0x58>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
  
  return true;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200000d4 	.word	0x200000d4
 80011a0:	200000d5 	.word	0x200000d5
 80011a4:	20000000 	.word	0x20000000
 80011a8:	200000d6 	.word	0x200000d6

080011ac <Pattern_Stop>:
  *         - Éteint toutes les LED
  * @param  None
  * @retval true si l'opération a réussi, false sinon
  */
bool Pattern_Stop(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  /* Vérification qu'un chenillard est actif */
  if (activePattern == PATTERN_NONE)
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <Pattern_Stop+0x48>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <Pattern_Stop+0x12>
  {
    return false;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e016      	b.n	80011ec <Pattern_Stop+0x40>
  }
  
  /* Arrêt du timer */
  Timer_Stop(currentFrequency);
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <Pattern_Stop+0x4c>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f9c4 	bl	8001550 <Timer_Stop>
  
  /* Désactivation du chenillard */
  activePattern = PATTERN_NONE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <Pattern_Stop+0x48>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
  
  /* Extinction de toutes les LED */
  for (uint8_t i = 1; i <= LED_COUNT; i++)
 80011ce:	2301      	movs	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	e007      	b.n	80011e4 <Pattern_Stop+0x38>
  {
    LED_ForceState(i, LED_OFF);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fedf 	bl	8000f9c <LED_ForceState>
  for (uint8_t i = 1; i <= LED_COUNT; i++)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	3301      	adds	r3, #1
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d9f4      	bls.n	80011d4 <Pattern_Stop+0x28>
  }
  
  return true;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200000d4 	.word	0x200000d4
 80011f8:	20000000 	.word	0x20000000

080011fc <Pattern_SetFrequency>:
  *         - Sinon, met juste à jour la fréquence pour utilisation future
  * @param  freq: Nouvelle fréquence (PATTERN_FREQ_500MS, PATTERN_FREQ_1S, PATTERN_FREQ_3S)
  * @retval true si l'opération a réussi, false sinon
  */
bool Pattern_SetFrequency(Pattern_Frequency freq)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  /* Vérification de la validité de la fréquence */
  if (freq < PATTERN_FREQ_500MS || freq > PATTERN_FREQ_3S)
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <Pattern_SetFrequency+0x14>
  {
    return false;
 800120c:	2300      	movs	r3, #0
 800120e:	e015      	b.n	800123c <Pattern_SetFrequency+0x40>
  }
  
  /* Si un chenillard est actif, on doit changer le timer */
  if (activePattern != PATTERN_NONE)
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <Pattern_SetFrequency+0x48>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00d      	beq.n	8001234 <Pattern_SetFrequency+0x38>
  {
    /* Arrêt du timer actuel */
    Timer_Stop(currentFrequency);
 8001218:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <Pattern_SetFrequency+0x4c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f997 	bl	8001550 <Timer_Stop>
    
    /* Mise à jour de la fréquence */
    currentFrequency = freq;
 8001222:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <Pattern_SetFrequency+0x4c>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	7013      	strb	r3, [r2, #0]
    
    /* Démarrage du nouveau timer */
    Timer_Start(currentFrequency);
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <Pattern_SetFrequency+0x4c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f95b 	bl	80014e8 <Timer_Start>
 8001232:	e002      	b.n	800123a <Pattern_SetFrequency+0x3e>
  }
  else
  {
    /* Mise à jour de la fréquence pour utilisation future */
    currentFrequency = freq;
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <Pattern_SetFrequency+0x4c>)
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	7013      	strb	r3, [r2, #0]
  }
  
  return true;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000d4 	.word	0x200000d4
 8001248:	20000000 	.word	0x20000000

0800124c <Pattern_GetActive>:
  * @note   Retourne le type de chenillard actuellement actif
  * @param  None
  * @retval Type de chenillard actif (PATTERN_NONE si aucun)
  */
Pattern_Type Pattern_GetActive(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return activePattern;
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <Pattern_GetActive+0x14>)
 8001252:	781b      	ldrb	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	200000d4 	.word	0x200000d4

08001264 <Pattern_GetFrequency>:
  * @note   Retourne la fréquence actuellement configurée
  * @param  None
  * @retval Fréquence actuelle
  */
Pattern_Frequency Pattern_GetFrequency(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return currentFrequency;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <Pattern_GetFrequency+0x14>)
 800126a:	781b      	ldrb	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000000 	.word	0x20000000

0800127c <Pattern_IsActive>:
  *         pendant qu'un chenillard est actif
  * @param  None
  * @retval true si un chenillard est actif, false sinon
  */
bool Pattern_IsActive(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return (activePattern != PATTERN_NONE);
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <Pattern_IsActive+0x1c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf14      	ite	ne
 8001288:	2301      	movne	r3, #1
 800128a:	2300      	moveq	r3, #0
 800128c:	b2db      	uxtb	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	200000d4 	.word	0x200000d4

0800129c <Pattern_Controller_Update>:
  *         - Réinitialise le flag de mise à jour
  * @param  None
  * @retval None
  */
void Pattern_Controller_Update(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Vérification si une mise à jour est nécessaire */
  if (!patternNeedsUpdate || activePattern == PATTERN_NONE)
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <Pattern_Controller_Update+0x50>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	f083 0301 	eor.w	r3, r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d11c      	bne.n	80012e8 <Pattern_Controller_Update+0x4c>
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <Pattern_Controller_Update+0x54>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d018      	beq.n	80012e8 <Pattern_Controller_Update+0x4c>
  {
    return;
  }
  
  /* Mise à jour du chenillard en fonction du type */
  switch (activePattern)
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <Pattern_Controller_Update+0x54>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d00c      	beq.n	80012d8 <Pattern_Controller_Update+0x3c>
 80012be:	2b03      	cmp	r3, #3
 80012c0:	dc0d      	bgt.n	80012de <Pattern_Controller_Update+0x42>
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d002      	beq.n	80012cc <Pattern_Controller_Update+0x30>
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d003      	beq.n	80012d2 <Pattern_Controller_Update+0x36>
      Pattern3_Update();
      break;
    
    default:
      /* Ne devrait jamais arriver */
      break;
 80012ca:	e008      	b.n	80012de <Pattern_Controller_Update+0x42>
      Pattern1_Update();
 80012cc:	f000 f830 	bl	8001330 <Pattern1_Update>
      break;
 80012d0:	e006      	b.n	80012e0 <Pattern_Controller_Update+0x44>
      Pattern2_Update();
 80012d2:	f000 f85d 	bl	8001390 <Pattern2_Update>
      break;
 80012d6:	e003      	b.n	80012e0 <Pattern_Controller_Update+0x44>
      Pattern3_Update();
 80012d8:	f000 f888 	bl	80013ec <Pattern3_Update>
      break;
 80012dc:	e000      	b.n	80012e0 <Pattern_Controller_Update+0x44>
      break;
 80012de:	bf00      	nop
  }
  
  /* Réinitialisation du flag de mise à jour */
  patternNeedsUpdate = false;
 80012e0:	4b02      	ldr	r3, [pc, #8]	@ (80012ec <Pattern_Controller_Update+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	e000      	b.n	80012ea <Pattern_Controller_Update+0x4e>
    return;
 80012e8:	bf00      	nop
}
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200000d6 	.word	0x200000d6
 80012f0:	200000d4 	.word	0x200000d4

080012f4 <Pattern_TimerCallback>:
  *         - Active le flag de mise à jour si nécessaire
  * @param  timerType: Type de timer qui a expiré
  * @retval None
  */
void Pattern_TimerCallback(Pattern_Frequency timerType)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  /* Vérification que le timer correspond au pattern actif */
  if (activePattern != PATTERN_NONE && timerType == currentFrequency)
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <Pattern_TimerCallback+0x30>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <Pattern_TimerCallback+0x22>
 8001306:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <Pattern_TimerCallback+0x34>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	429a      	cmp	r2, r3
 800130e:	d102      	bne.n	8001316 <Pattern_TimerCallback+0x22>
  {
    patternNeedsUpdate = true;
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <Pattern_TimerCallback+0x38>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	200000d4 	.word	0x200000d4
 8001328:	20000000 	.word	0x20000000
 800132c:	200000d6 	.word	0x200000d6

08001330 <Pattern1_Update>:
  *         Puis retour à l'étape 0
  * @param  None
  * @retval None
  */
static void Pattern1_Update(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  /* Extinction de toutes les LED */
  for (uint8_t i = 1; i <= LED_COUNT; i++)
 8001336:	2301      	movs	r3, #1
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	e007      	b.n	800134c <Pattern1_Update+0x1c>
  {
    LED_ForceState(i, LED_OFF);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fe2b 	bl	8000f9c <LED_ForceState>
  for (uint8_t i = 1; i <= LED_COUNT; i++)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	3301      	adds	r3, #1
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d9f4      	bls.n	800133c <Pattern1_Update+0xc>
  }
  
  /* Allumage de la LED correspondant à l'étape actuelle */
  LED_ForceState(patternStep + 1, LED_ON);
 8001352:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <Pattern1_Update+0x58>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2101      	movs	r1, #1
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe1d 	bl	8000f9c <LED_ForceState>
  
  /* Passage à l'étape suivante */
  patternStep = (patternStep + 1) % LED_COUNT;
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <Pattern1_Update+0x58>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <Pattern1_Update+0x5c>)
 800136a:	fb83 3102 	smull	r3, r1, r3, r2
 800136e:	17d3      	asrs	r3, r2, #31
 8001370:	1ac9      	subs	r1, r1, r3
 8001372:	460b      	mov	r3, r1
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	440b      	add	r3, r1
 8001378:	1ad1      	subs	r1, r2, r3
 800137a:	b2ca      	uxtb	r2, r1
 800137c:	4b02      	ldr	r3, [pc, #8]	@ (8001388 <Pattern1_Update+0x58>)
 800137e:	701a      	strb	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200000d5 	.word	0x200000d5
 800138c:	55555556 	.word	0x55555556

08001390 <Pattern2_Update>:
  *         Puis retour à l'étape 0
  * @param  None
  * @retval None
  */
static void Pattern2_Update(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Alternance entre LED paires et impaires */
  if (patternStep == 0)
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <Pattern2_Update+0x58>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10c      	bne.n	80013b6 <Pattern2_Update+0x26>
  {
    /* Étape 0 : LED impaires allumées */
    LED_ForceState(1, LED_ON);
 800139c:	2101      	movs	r1, #1
 800139e:	2001      	movs	r0, #1
 80013a0:	f7ff fdfc 	bl	8000f9c <LED_ForceState>
    LED_ForceState(2, LED_OFF);
 80013a4:	2100      	movs	r1, #0
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fdf8 	bl	8000f9c <LED_ForceState>
    LED_ForceState(3, LED_ON);
 80013ac:	2101      	movs	r1, #1
 80013ae:	2003      	movs	r0, #3
 80013b0:	f7ff fdf4 	bl	8000f9c <LED_ForceState>
 80013b4:	e00b      	b.n	80013ce <Pattern2_Update+0x3e>
  }
  else
  {
    /* Étape 1 : LED paires allumées */
    LED_ForceState(1, LED_OFF);
 80013b6:	2100      	movs	r1, #0
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff fdef 	bl	8000f9c <LED_ForceState>
    LED_ForceState(2, LED_ON);
 80013be:	2101      	movs	r1, #1
 80013c0:	2002      	movs	r0, #2
 80013c2:	f7ff fdeb 	bl	8000f9c <LED_ForceState>
    LED_ForceState(3, LED_OFF);
 80013c6:	2100      	movs	r1, #0
 80013c8:	2003      	movs	r0, #3
 80013ca:	f7ff fde7 	bl	8000f9c <LED_ForceState>
  }
  
  /* Passage à l'étape suivante */
  patternStep = (patternStep + 1) % 2;
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <Pattern2_Update+0x58>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	bfb8      	it	lt
 80013dc:	425b      	neglt	r3, r3
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b01      	ldr	r3, [pc, #4]	@ (80013e8 <Pattern2_Update+0x58>)
 80013e2:	701a      	strb	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200000d5 	.word	0x200000d5

080013ec <Pattern3_Update>:
  *         Puis retour à l'étape 0
  * @param  None
  * @retval None
  */
static void Pattern3_Update(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  /* Extinction de toutes les LED */
  for (uint8_t i = 1; i <= LED_COUNT; i++)
 80013f2:	2301      	movs	r3, #1
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	e007      	b.n	8001408 <Pattern3_Update+0x1c>
  {
    LED_ForceState(i, LED_OFF);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fdcd 	bl	8000f9c <LED_ForceState>
  for (uint8_t i = 1; i <= LED_COUNT; i++)
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	3301      	adds	r3, #1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d9f4      	bls.n	80013f8 <Pattern3_Update+0xc>
  }
  
  /* Allumage des LED selon l'étape */
  switch (patternStep)
 800140e:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <Pattern3_Update+0xc0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b04      	cmp	r3, #4
 8001414:	d835      	bhi.n	8001482 <Pattern3_Update+0x96>
 8001416:	a201      	add	r2, pc, #4	@ (adr r2, 800141c <Pattern3_Update+0x30>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	08001431 	.word	0x08001431
 8001420:	0800143b 	.word	0x0800143b
 8001424:	0800144d 	.word	0x0800144d
 8001428:	08001467 	.word	0x08001467
 800142c:	08001479 	.word	0x08001479
  {
    case 0:
      LED_ForceState(1, LED_ON);
 8001430:	2101      	movs	r1, #1
 8001432:	2001      	movs	r0, #1
 8001434:	f7ff fdb2 	bl	8000f9c <LED_ForceState>
      break;
 8001438:	e024      	b.n	8001484 <Pattern3_Update+0x98>
    case 1:
      LED_ForceState(1, LED_ON);
 800143a:	2101      	movs	r1, #1
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff fdad 	bl	8000f9c <LED_ForceState>
      LED_ForceState(2, LED_ON);
 8001442:	2101      	movs	r1, #1
 8001444:	2002      	movs	r0, #2
 8001446:	f7ff fda9 	bl	8000f9c <LED_ForceState>
      break;
 800144a:	e01b      	b.n	8001484 <Pattern3_Update+0x98>
    case 2:
      LED_ForceState(1, LED_ON);
 800144c:	2101      	movs	r1, #1
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff fda4 	bl	8000f9c <LED_ForceState>
      LED_ForceState(2, LED_ON);
 8001454:	2101      	movs	r1, #1
 8001456:	2002      	movs	r0, #2
 8001458:	f7ff fda0 	bl	8000f9c <LED_ForceState>
      LED_ForceState(3, LED_ON);
 800145c:	2101      	movs	r1, #1
 800145e:	2003      	movs	r0, #3
 8001460:	f7ff fd9c 	bl	8000f9c <LED_ForceState>
      break;
 8001464:	e00e      	b.n	8001484 <Pattern3_Update+0x98>
    case 3:
      LED_ForceState(2, LED_ON);
 8001466:	2101      	movs	r1, #1
 8001468:	2002      	movs	r0, #2
 800146a:	f7ff fd97 	bl	8000f9c <LED_ForceState>
      LED_ForceState(3, LED_ON);
 800146e:	2101      	movs	r1, #1
 8001470:	2003      	movs	r0, #3
 8001472:	f7ff fd93 	bl	8000f9c <LED_ForceState>
      break;
 8001476:	e005      	b.n	8001484 <Pattern3_Update+0x98>
    case 4:
      LED_ForceState(3, LED_ON);
 8001478:	2101      	movs	r1, #1
 800147a:	2003      	movs	r0, #3
 800147c:	f7ff fd8e 	bl	8000f9c <LED_ForceState>
      break;
 8001480:	e000      	b.n	8001484 <Pattern3_Update+0x98>
    default:
      break;
 8001482:	bf00      	nop
  }
  
  /* Passage à l'étape suivante */
  patternStep = (patternStep + 1) % 6;
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <Pattern3_Update+0xc0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <Pattern3_Update+0xc4>)
 800148c:	fb83 3102 	smull	r3, r1, r3, r2
 8001490:	17d3      	asrs	r3, r2, #31
 8001492:	1ac9      	subs	r1, r1, r3
 8001494:	460b      	mov	r3, r1
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	440b      	add	r3, r1
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	1ad1      	subs	r1, r2, r3
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	4b02      	ldr	r3, [pc, #8]	@ (80014ac <Pattern3_Update+0xc0>)
 80014a2:	701a      	strb	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200000d5 	.word	0x200000d5
 80014b0:	2aaaaaab 	.word	0x2aaaaaab

080014b4 <Timer_Init>:
  * @brief  Initialise les timers
  * @param  Aucun
  * @retval Aucun
  */
void Timer_Init(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
  // Les timers sont initialisés par la fonction MX_TIMx_Init générée par CubeMX
  // Rien à faire ici car les timers sont déjà configurés
  
  // Assurez-vous que tous les timers sont arrêtés initialement
  for (int i = 0; i < TIMER_COUNT; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	e007      	b.n	80014d0 <Timer_Init+0x1c>
    timerActive[i] = false;
 80014c0:	4a08      	ldr	r2, [pc, #32]	@ (80014e4 <Timer_Init+0x30>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < TIMER_COUNT; i++) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	ddf4      	ble.n	80014c0 <Timer_Init+0xc>
  }
  
  // Ne pas renvoyer de valeur dans une fonction void
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	200000d8 	.word	0x200000d8

080014e8 <Timer_Start>:
  * @brief  Démarre un timer
  * @param  timerType: Type du timer à démarrer
  * @retval true si le démarrage a réussi, false sinon
  */
bool Timer_Start(uint8_t timerType)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  TIM_HandleTypeDef* htim;
  
  /* Sélection du timer approprié */
  switch (timerType)
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d00c      	beq.n	8001512 <Timer_Start+0x2a>
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	dc0d      	bgt.n	8001518 <Timer_Start+0x30>
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <Timer_Start+0x1e>
 8001500:	2b01      	cmp	r3, #1
 8001502:	d003      	beq.n	800150c <Timer_Start+0x24>
 8001504:	e008      	b.n	8001518 <Timer_Start+0x30>
  {
    case PATTERN_FREQ_500MS:
      htim = &htim2;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <Timer_Start+0x58>)
 8001508:	60fb      	str	r3, [r7, #12]
      break;
 800150a:	e007      	b.n	800151c <Timer_Start+0x34>
    
    case PATTERN_FREQ_1S:
      htim = &htim3;
 800150c:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <Timer_Start+0x5c>)
 800150e:	60fb      	str	r3, [r7, #12]
      break;
 8001510:	e004      	b.n	800151c <Timer_Start+0x34>
    
    case PATTERN_FREQ_3S:
      htim = &htim4;
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <Timer_Start+0x60>)
 8001514:	60fb      	str	r3, [r7, #12]
      break;
 8001516:	e001      	b.n	800151c <Timer_Start+0x34>
    
    default:
      return false;
 8001518:	2300      	movs	r3, #0
 800151a:	e00c      	b.n	8001536 <Timer_Start+0x4e>
  }
  
  /* Démarrage du timer */
  if (HAL_TIM_Base_Start_IT(htim) != HAL_OK)
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f002 fa0d 	bl	800393c <HAL_TIM_Base_Start_IT>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <Timer_Start+0x44>
  {
    return false;
 8001528:	2300      	movs	r3, #0
 800152a:	e004      	b.n	8001536 <Timer_Start+0x4e>
  // snprintf(debugMsg, sizeof(debugMsg), "Timer %d (TIM%d) START\r\n", timerType, (timerType == PATTERN_FREQ_500MS) ? 2 : ((timerType == PATTERN_FREQ_1S) ? 3 : 4));
  // UART_SendString(debugMsg);
  // --- Fin DEBUG ---
  
  /* Mise à jour de l'état */
  timerActive[timerType] = true;
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4a07      	ldr	r2, [pc, #28]	@ (800154c <Timer_Start+0x64>)
 8001530:	2101      	movs	r1, #1
 8001532:	54d1      	strb	r1, [r2, r3]
  
  return true;
 8001534:	2301      	movs	r3, #1
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000124 	.word	0x20000124
 8001544:	20000170 	.word	0x20000170
 8001548:	200001bc 	.word	0x200001bc
 800154c:	200000d8 	.word	0x200000d8

08001550 <Timer_Stop>:
  * @brief  Arrête un timer
  * @param  timerType: Type du timer à arrêter
  * @retval true si l'arrêt a réussi, false sinon
  */
bool Timer_Stop(uint8_t timerType)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  TIM_HandleTypeDef* htim;
  
  /* Sélection du timer approprié */
  switch (timerType)
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d00c      	beq.n	800157a <Timer_Stop+0x2a>
 8001560:	2b02      	cmp	r3, #2
 8001562:	dc0d      	bgt.n	8001580 <Timer_Stop+0x30>
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <Timer_Stop+0x1e>
 8001568:	2b01      	cmp	r3, #1
 800156a:	d003      	beq.n	8001574 <Timer_Stop+0x24>
 800156c:	e008      	b.n	8001580 <Timer_Stop+0x30>
  {
    case PATTERN_FREQ_500MS:
      htim = &htim2;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <Timer_Stop+0x58>)
 8001570:	60fb      	str	r3, [r7, #12]
      break;
 8001572:	e007      	b.n	8001584 <Timer_Stop+0x34>
    
    case PATTERN_FREQ_1S:
      htim = &htim3;
 8001574:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <Timer_Stop+0x5c>)
 8001576:	60fb      	str	r3, [r7, #12]
      break;
 8001578:	e004      	b.n	8001584 <Timer_Stop+0x34>
    
    case PATTERN_FREQ_3S:
      htim = &htim4;
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <Timer_Stop+0x60>)
 800157c:	60fb      	str	r3, [r7, #12]
      break;
 800157e:	e001      	b.n	8001584 <Timer_Stop+0x34>
    
    default:
      return false;
 8001580:	2300      	movs	r3, #0
 8001582:	e00c      	b.n	800159e <Timer_Stop+0x4e>
  }
  
  /* Arrêt du timer */
  if (HAL_TIM_Base_Stop_IT(htim) != HAL_OK)
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f002 fa51 	bl	8003a2c <HAL_TIM_Base_Stop_IT>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <Timer_Stop+0x44>
  {
    return false;
 8001590:	2300      	movs	r3, #0
 8001592:	e004      	b.n	800159e <Timer_Stop+0x4e>
  }
  
  /* Mise à jour de l'état */
  timerActive[timerType] = false;
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <Timer_Stop+0x64>)
 8001598:	2100      	movs	r1, #0
 800159a:	54d1      	strb	r1, [r2, r3]
  
  return true;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000124 	.word	0x20000124
 80015ac:	20000170 	.word	0x20000170
 80015b0:	200001bc 	.word	0x200001bc
 80015b4:	200000d8 	.word	0x200000d8

080015b8 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  Callbacks d'interruption des timers
  * @note   Ces fonctions sont appelées lorsqu'une interruption timer se produit
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
      UART_SendString(debugMsg);
  }
  */
  // --- Fin DEBUG ---

  if (htim->Instance == TIM2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015c8:	d103      	bne.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    Pattern_TimerCallback(PATTERN_FREQ_500MS);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff fe92 	bl	80012f4 <Pattern_TimerCallback>
  }
  else if (htim->Instance == TIM4)
  {
    Pattern_TimerCallback(PATTERN_FREQ_3S);
  }
}
 80015d0:	e010      	b.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x3c>
  else if (htim->Instance == TIM3)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a09      	ldr	r2, [pc, #36]	@ (80015fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d103      	bne.n	80015e4 <HAL_TIM_PeriodElapsedCallback+0x2c>
    Pattern_TimerCallback(PATTERN_FREQ_1S);
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff fe89 	bl	80012f4 <Pattern_TimerCallback>
}
 80015e2:	e007      	b.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x3c>
  else if (htim->Instance == TIM4)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d102      	bne.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x3c>
    Pattern_TimerCallback(PATTERN_FREQ_3S);
 80015ee:	2002      	movs	r0, #2
 80015f0:	f7ff fe80 	bl	80012f4 <Pattern_TimerCallback>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40000400 	.word	0x40000400
 8001600:	40000800 	.word	0x40000800

08001604 <UART_Init>:
  *         - Les flags d'état
  * @param  None
  * @retval true si l'initialisation a réussi, false sinon
  */
bool UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Configuration de l'UART */
  huart3.Instance = USART3;
 8001608:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <UART_Init+0x70>)
 800160a:	4a1b      	ldr	r2, [pc, #108]	@ (8001678 <UART_Init+0x74>)
 800160c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <UART_Init+0x70>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <UART_Init+0x70>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <UART_Init+0x70>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001622:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <UART_Init+0x70>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <UART_Init+0x70>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <UART_Init+0x70>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <UART_Init+0x70>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  
  /* Initialisation de l'UART */
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800163a:	480e      	ldr	r0, [pc, #56]	@ (8001674 <UART_Init+0x70>)
 800163c:	f002 fe10 	bl	8004260 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <UART_Init+0x46>
  {
    return false;
 8001646:	2300      	movs	r3, #0
 8001648:	e012      	b.n	8001670 <UART_Init+0x6c>
  }
  
  /* Activation des interruptions de réception */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2027      	movs	r0, #39	@ 0x27
 8001650:	f000 fd83 	bl	800215a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001654:	2027      	movs	r0, #39	@ 0x27
 8001656:	f000 fd9c 	bl	8002192 <HAL_NVIC_EnableIRQ>
  
  /* Démarrage de la réception */
  HAL_UART_Receive_IT(&huart3, &rxBuffer[rxIndex], 1);
 800165a:	4b08      	ldr	r3, [pc, #32]	@ (800167c <UART_Init+0x78>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <UART_Init+0x7c>)
 8001662:	4413      	add	r3, r2
 8001664:	2201      	movs	r2, #1
 8001666:	4619      	mov	r1, r3
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <UART_Init+0x70>)
 800166a:	f002 fed0 	bl	800440e <HAL_UART_Receive_IT>
  
  return true;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000208 	.word	0x20000208
 8001678:	40004800 	.word	0x40004800
 800167c:	2000011c 	.word	0x2000011c
 8001680:	200000dc 	.word	0x200000dc

08001684 <UART_SendString>:
 * @brief  Envoie une chaîne de caractères par UART
 * @param  str: Chaîne à envoyer
 * @retval Aucun
 */
void UART_SendString(const char* str)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), UART_TIMEOUT);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7fe fdc9 	bl	8000224 <strlen>
 8001692:	4603      	mov	r3, r0
 8001694:	b29a      	uxth	r2, r3
 8001696:	2364      	movs	r3, #100	@ 0x64
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <UART_SendString+0x24>)
 800169c:	f002 fe2e 	bl	80042fc <HAL_UART_Transmit>
  // Ne pas renvoyer de valeur dans une fonction void
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000208 	.word	0x20000208

080016ac <HAL_UART_RxCpltCallback>:
  *         - Redémarre la réception
  * @param  huart: Handle de l'UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Vérification que c'est bien notre UART */
  if (huart->Instance != USART3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a16      	ldr	r2, [pc, #88]	@ (8001714 <HAL_UART_RxCpltCallback+0x68>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d125      	bne.n	800170a <HAL_UART_RxCpltCallback+0x5e>
  {
    return;
  }
  
  /* Traitement du caractère reçu */
  char receivedChar = (char)rxBuffer[rxIndex];
 80016be:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <HAL_UART_RxCpltCallback+0x6c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b15      	ldr	r3, [pc, #84]	@ (800171c <HAL_UART_RxCpltCallback+0x70>)
 80016c6:	5c9b      	ldrb	r3, [r3, r2]
 80016c8:	73fb      	strb	r3, [r7, #15]
  
  /* Gestion du dépassement de buffer */
  if (rxIndex >= UART_BUFFER_SIZE - 1)
 80016ca:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <HAL_UART_RxCpltCallback+0x6c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80016d0:	d906      	bls.n	80016e0 <HAL_UART_RxCpltCallback+0x34>
  {
    rxOverflow = true;
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <HAL_UART_RxCpltCallback+0x74>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
    rxIndex = 0;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <HAL_UART_RxCpltCallback+0x6c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	e005      	b.n	80016ec <HAL_UART_RxCpltCallback+0x40>
  }
  else
  {
    rxIndex++;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <HAL_UART_RxCpltCallback+0x6c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_UART_RxCpltCallback+0x6c>)
 80016ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Transmission du caractère au parseur de commandes */
  Command_Parser_ProcessChar(receivedChar);
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ffa2 	bl	8000638 <Command_Parser_ProcessChar>
  
  /* Redémarrage de la réception */
  HAL_UART_Receive_IT(&huart3, &rxBuffer[rxIndex], 1);
 80016f4:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <HAL_UART_RxCpltCallback+0x6c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <HAL_UART_RxCpltCallback+0x70>)
 80016fc:	4413      	add	r3, r2
 80016fe:	2201      	movs	r2, #1
 8001700:	4619      	mov	r1, r3
 8001702:	4808      	ldr	r0, [pc, #32]	@ (8001724 <HAL_UART_RxCpltCallback+0x78>)
 8001704:	f002 fe83 	bl	800440e <HAL_UART_Receive_IT>
 8001708:	e000      	b.n	800170c <HAL_UART_RxCpltCallback+0x60>
    return;
 800170a:	bf00      	nop
}
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40004800 	.word	0x40004800
 8001718:	2000011c 	.word	0x2000011c
 800171c:	200000dc 	.word	0x200000dc
 8001720:	2000011d 	.word	0x2000011d
 8001724:	20000208 	.word	0x20000208

08001728 <UART_HasOverflow>:
  *         s'est produit depuis le dernier appel.
  * @param  None
  * @retval true si un dépassement s'est produit, false sinon
  */
bool UART_HasOverflow(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
  bool overflow = rxOverflow;
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <UART_HasOverflow+0x20>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  rxOverflow = false;
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <UART_HasOverflow+0x20>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
  return overflow;
 800173a:	79fb      	ldrb	r3, [r7, #7]
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	2000011d 	.word	0x2000011d

0800174c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <MX_GPIO_Init+0x78>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <MX_GPIO_Init+0x78>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <MX_GPIO_Init+0x78>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800177a:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <MX_GPIO_Init+0x78>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a11      	ldr	r2, [pc, #68]	@ (80017c4 <MX_GPIO_Init+0x78>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_GPIO_Init+0x78>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001798:	480b      	ldr	r0, [pc, #44]	@ (80017c8 <MX_GPIO_Init+0x7c>)
 800179a:	f000 ffe3 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 800179e:	f244 0381 	movw	r3, #16513	@ 0x4081
 80017a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4619      	mov	r1, r3
 80017b6:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <MX_GPIO_Init+0x7c>)
 80017b8:	f000 fe10 	bl	80023dc <HAL_GPIO_Init>

}
 80017bc:	bf00      	nop
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020400 	.word	0x40020400

080017cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80017d0:	f000 f88a 	bl	80018e8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d4:	f000 fb89 	bl	8001eea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d8:	f000 f82a 	bl	8001830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017dc:	f7ff ffb6 	bl	800174c <MX_GPIO_Init>
  MX_TIM2_Init();
 80017e0:	f000 f978 	bl	8001ad4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017e4:	f000 f9c4 	bl	8001b70 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017e8:	f000 fa12 	bl	8001c10 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80017ec:	f000 fabc 	bl	8001d68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize modules
  LED_Init();
 80017f0:	f7ff fc6e 	bl	80010d0 <LED_Init>
  PATTERN_Init();
 80017f4:	f7ff fc72 	bl	80010dc <PATTERN_Init>
  TIMER_Init();
 80017f8:	f7ff fc76 	bl	80010e8 <TIMER_Init>
  if (!UART_Init()) { 
 80017fc:	f7ff ff02 	bl	8001604 <UART_Init>
      // Que faire si l'UART échoue à l'init? Peut-être clignoter une LED d'erreur?
      // Pour l'instant, on continue, mais c'est un point d'attention.
  }
  COMMAND_Init();
 8001800:	f7ff fc78 	bl	80010f4 <COMMAND_Init>

  // Afficher le message de bienvenue et le premier prompt
  UART_SendString("\r\n\r\n--- Console Serie STM32F756ZG ---\r\n");
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <main+0x58>)
 8001806:	f7ff ff3d 	bl	8001684 <UART_SendString>
  UART_SendString("Tapez HELP pour la liste des commandes.\r\n");
 800180a:	4807      	ldr	r0, [pc, #28]	@ (8001828 <main+0x5c>)
 800180c:	f7ff ff3a 	bl	8001684 <UART_SendString>
  UART_SendString("STM32> "); // Afficher le premier prompt
 8001810:	4806      	ldr	r0, [pc, #24]	@ (800182c <main+0x60>)
 8001812:	f7ff ff37 	bl	8001684 <UART_SendString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    COMMAND_Process();
 8001816:	f7ff fc73 	bl	8001100 <COMMAND_Process>
    PATTERN_Process();
 800181a:	f7ff fc77 	bl	800110c <PATTERN_Process>
    COMMAND_Process();
 800181e:	bf00      	nop
 8001820:	e7f9      	b.n	8001816 <main+0x4a>
 8001822:	bf00      	nop
 8001824:	08006580 	.word	0x08006580
 8001828:	080065a8 	.word	0x080065a8
 800182c:	080065d4 	.word	0x080065d4

08001830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b094      	sub	sp, #80	@ 0x50
 8001834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	2230      	movs	r2, #48	@ 0x30
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f004 f82e 	bl	80058a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <SystemClock_Config+0xb0>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	4a21      	ldr	r2, [pc, #132]	@ (80018e0 <SystemClock_Config+0xb0>)
 800185a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001860:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <SystemClock_Config+0xb0>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800186c:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <SystemClock_Config+0xb4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001874:	4a1b      	ldr	r2, [pc, #108]	@ (80018e4 <SystemClock_Config+0xb4>)
 8001876:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <SystemClock_Config+0xb4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001888:	2302      	movs	r3, #2
 800188a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800188c:	2301      	movs	r3, #1
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001890:	2310      	movs	r3, #16
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001894:	2300      	movs	r3, #0
 8001896:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001898:	f107 0320 	add.w	r3, r7, #32
 800189c:	4618      	mov	r0, r3
 800189e:	f000 ff7b 	bl	8002798 <HAL_RCC_OscConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80018a8:	f000 f84a 	bl	8001940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ac:	230f      	movs	r3, #15
 80018ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 fa0a 	bl	8002ce0 <HAL_RCC_ClockConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018d2:	f000 f835 	bl	8001940 <Error_Handler>
  }
}
 80018d6:	bf00      	nop
 80018d8:	3750      	adds	r7, #80	@ 0x50
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000

080018e8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80018ee:	463b      	mov	r3, r7
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80018fa:	f000 fc65 	bl	80021c8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80018fe:	2301      	movs	r3, #1
 8001900:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001902:	2300      	movs	r3, #0
 8001904:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800190a:	231f      	movs	r3, #31
 800190c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800190e:	2387      	movs	r3, #135	@ 0x87
 8001910:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001912:	2300      	movs	r3, #0
 8001914:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001916:	2300      	movs	r3, #0
 8001918:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800191a:	2301      	movs	r3, #1
 800191c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800191e:	2301      	movs	r3, #1
 8001920:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800192a:	463b      	mov	r3, r7
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fc83 	bl	8002238 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001932:	2004      	movs	r0, #4
 8001934:	f000 fc60 	bl	80021f8 <HAL_MPU_Enable>

}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001944:	b672      	cpsid	i
}
 8001946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <Error_Handler+0x8>

0800194c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <HAL_MspInit+0x44>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	4a0e      	ldr	r2, [pc, #56]	@ (8001990 <HAL_MspInit+0x44>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	@ 0x40
 800195e:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <HAL_MspInit+0x44>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <HAL_MspInit+0x44>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	4a08      	ldr	r2, [pc, #32]	@ (8001990 <HAL_MspInit+0x44>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001974:	6453      	str	r3, [r2, #68]	@ 0x44
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_MspInit+0x44>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <NMI_Handler+0x4>

0800199c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <HardFault_Handler+0x4>

080019a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <MemManage_Handler+0x4>

080019ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <UsageFault_Handler+0x4>

080019bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ea:	f000 fabb 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f8:	4802      	ldr	r0, [pc, #8]	@ (8001a04 <TIM2_IRQHandler+0x10>)
 80019fa:	f002 f846 	bl	8003a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000124 	.word	0x20000124

08001a08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a0c:	4802      	ldr	r0, [pc, #8]	@ (8001a18 <TIM3_IRQHandler+0x10>)
 8001a0e:	f002 f83c 	bl	8003a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000170 	.word	0x20000170

08001a1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a20:	4802      	ldr	r0, [pc, #8]	@ (8001a2c <TIM4_IRQHandler+0x10>)
 8001a22:	f002 f832 	bl	8003a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200001bc 	.word	0x200001bc

08001a30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a34:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <USART3_IRQHandler+0x10>)
 8001a36:	f002 fd2f 	bl	8004498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000208 	.word	0x20000208

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f003 ff2e 	bl	80058d4 <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20050000 	.word	0x20050000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	20000120 	.word	0x20000120
 8001aac:	200003e0 	.word	0x200003e0

08001ab0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <SystemInit+0x20>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aba:	4a05      	ldr	r2, [pc, #20]	@ (8001ad0 <SystemInit+0x20>)
 8001abc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <MX_TIM2_Init+0x98>)
 8001af4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <MX_TIM2_Init+0x98>)
 8001afc:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001b00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <MX_TIM2_Init+0x98>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001b08:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <MX_TIM2_Init+0x98>)
 8001b0a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001b0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b10:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <MX_TIM2_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <MX_TIM2_Init+0x98>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1c:	4813      	ldr	r0, [pc, #76]	@ (8001b6c <MX_TIM2_Init+0x98>)
 8001b1e:	f001 feb5 	bl	800388c <HAL_TIM_Base_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001b28:	f7ff ff0a 	bl	8001940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	4619      	mov	r1, r3
 8001b38:	480c      	ldr	r0, [pc, #48]	@ (8001b6c <MX_TIM2_Init+0x98>)
 8001b3a:	f002 f8ad 	bl	8003c98 <HAL_TIM_ConfigClockSource>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001b44:	f7ff fefc 	bl	8001940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <MX_TIM2_Init+0x98>)
 8001b56:	f002 fad7 	bl	8004108 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001b60:	f7ff feee 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000124 	.word	0x20000124

08001b70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c08 <MX_TIM3_Init+0x98>)
 8001b90:	4a1e      	ldr	r2, [pc, #120]	@ (8001c0c <MX_TIM3_Init+0x9c>)
 8001b92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8001b94:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <MX_TIM3_Init+0x98>)
 8001b96:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001b9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <MX_TIM3_Init+0x98>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <MX_TIM3_Init+0x98>)
 8001ba4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ba8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001baa:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <MX_TIM3_Init+0x98>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <MX_TIM3_Init+0x98>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bb6:	4814      	ldr	r0, [pc, #80]	@ (8001c08 <MX_TIM3_Init+0x98>)
 8001bb8:	f001 fe68 	bl	800388c <HAL_TIM_Base_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001bc2:	f7ff febd 	bl	8001940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <MX_TIM3_Init+0x98>)
 8001bd4:	f002 f860 	bl	8003c98 <HAL_TIM_ConfigClockSource>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001bde:	f7ff feaf 	bl	8001940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	4806      	ldr	r0, [pc, #24]	@ (8001c08 <MX_TIM3_Init+0x98>)
 8001bf0:	f002 fa8a 	bl	8004108 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001bfa:	f7ff fea1 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000170 	.word	0x20000170
 8001c0c:	40000400 	.word	0x40000400

08001c10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c16:	f107 0310 	add.w	r3, r7, #16
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <MX_TIM4_Init+0x98>)
 8001c30:	4a1e      	ldr	r2, [pc, #120]	@ (8001cac <MX_TIM4_Init+0x9c>)
 8001c32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1599;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca8 <MX_TIM4_Init+0x98>)
 8001c36:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001c3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <MX_TIM4_Init+0x98>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 29999;
 8001c42:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <MX_TIM4_Init+0x98>)
 8001c44:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001c48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <MX_TIM4_Init+0x98>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c50:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <MX_TIM4_Init+0x98>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c56:	4814      	ldr	r0, [pc, #80]	@ (8001ca8 <MX_TIM4_Init+0x98>)
 8001c58:	f001 fe18 	bl	800388c <HAL_TIM_Base_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001c62:	f7ff fe6d 	bl	8001940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	4619      	mov	r1, r3
 8001c72:	480d      	ldr	r0, [pc, #52]	@ (8001ca8 <MX_TIM4_Init+0x98>)
 8001c74:	f002 f810 	bl	8003c98 <HAL_TIM_ConfigClockSource>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001c7e:	f7ff fe5f 	bl	8001940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4806      	ldr	r0, [pc, #24]	@ (8001ca8 <MX_TIM4_Init+0x98>)
 8001c90:	f002 fa3a 	bl	8004108 <HAL_TIMEx_MasterConfigSynchronization>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001c9a:	f7ff fe51 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	3720      	adds	r7, #32
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200001bc 	.word	0x200001bc
 8001cac:	40000800 	.word	0x40000800

08001cb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc0:	d114      	bne.n	8001cec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc2:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_TIM_Base_MspInit+0xac>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	4a25      	ldr	r2, [pc, #148]	@ (8001d5c <HAL_TIM_Base_MspInit+0xac>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cce:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <HAL_TIM_Base_MspInit+0xac>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	201c      	movs	r0, #28
 8001ce0:	f000 fa3b 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ce4:	201c      	movs	r0, #28
 8001ce6:	f000 fa54 	bl	8002192 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001cea:	e032      	b.n	8001d52 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d60 <HAL_TIM_Base_MspInit+0xb0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d114      	bne.n	8001d20 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cf6:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_TIM_Base_MspInit+0xac>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a18      	ldr	r2, [pc, #96]	@ (8001d5c <HAL_TIM_Base_MspInit+0xac>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <HAL_TIM_Base_MspInit+0xac>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	201d      	movs	r0, #29
 8001d14:	f000 fa21 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d18:	201d      	movs	r0, #29
 8001d1a:	f000 fa3a 	bl	8002192 <HAL_NVIC_EnableIRQ>
}
 8001d1e:	e018      	b.n	8001d52 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0f      	ldr	r2, [pc, #60]	@ (8001d64 <HAL_TIM_Base_MspInit+0xb4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d113      	bne.n	8001d52 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <HAL_TIM_Base_MspInit+0xac>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d5c <HAL_TIM_Base_MspInit+0xac>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_TIM_Base_MspInit+0xac>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	201e      	movs	r0, #30
 8001d48:	f000 fa07 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d4c:	201e      	movs	r0, #30
 8001d4e:	f000 fa20 	bl	8002192 <HAL_NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40000800 	.word	0x40000800

08001d68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d6c:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <MX_USART3_UART_Init+0x58>)
 8001d6e:	4a15      	ldr	r2, [pc, #84]	@ (8001dc4 <MX_USART3_UART_Init+0x5c>)
 8001d70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d72:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <MX_USART3_UART_Init+0x58>)
 8001d74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <MX_USART3_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc0 <MX_USART3_UART_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <MX_USART3_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <MX_USART3_UART_Init+0x58>)
 8001d8e:	220c      	movs	r2, #12
 8001d90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <MX_USART3_UART_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <MX_USART3_UART_Init+0x58>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <MX_USART3_UART_Init+0x58>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <MX_USART3_UART_Init+0x58>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001daa:	4805      	ldr	r0, [pc, #20]	@ (8001dc0 <MX_USART3_UART_Init+0x58>)
 8001dac:	f002 fa58 	bl	8004260 <HAL_UART_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001db6:	f7ff fdc3 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000208 	.word	0x20000208
 8001dc4:	40004800 	.word	0x40004800

08001dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b0aa      	sub	sp, #168	@ 0xa8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	2284      	movs	r2, #132	@ 0x84
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fd59 	bl	80058a0 <memset>
  if(uartHandle->Instance==USART3)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a26      	ldr	r2, [pc, #152]	@ (8001e8c <HAL_UART_MspInit+0xc4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d144      	bne.n	8001e82 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dfc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	4618      	mov	r0, r3
 8001e08:	f001 f950 	bl	80030ac <HAL_RCCEx_PeriphCLKConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e12:	f7ff fd95 	bl	8001940 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e16:	4b1e      	ldr	r3, [pc, #120]	@ (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e22:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2e:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a17      	ldr	r2, [pc, #92]	@ (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e34:	f043 0308 	orr.w	r3, r3, #8
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e60:	2307      	movs	r3, #7
 8001e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e66:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4809      	ldr	r0, [pc, #36]	@ (8001e94 <HAL_UART_MspInit+0xcc>)
 8001e6e:	f000 fab5 	bl	80023dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2027      	movs	r0, #39	@ 0x27
 8001e78:	f000 f96f 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e7c:	2027      	movs	r0, #39	@ 0x27
 8001e7e:	f000 f988 	bl	8002192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e82:	bf00      	nop
 8001e84:	37a8      	adds	r7, #168	@ 0xa8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40004800 	.word	0x40004800
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020c00 	.word	0x40020c00

08001e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ed0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e9c:	f7ff fe08 	bl	8001ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea0:	480c      	ldr	r0, [pc, #48]	@ (8001ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ea2:	490d      	ldr	r1, [pc, #52]	@ (8001ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f003 fd0b 	bl	80058e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eca:	f7ff fc7f 	bl	80017cc <main>
  bx  lr    
 8001ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001edc:	08006738 	.word	0x08006738
  ldr r2, =_sbss
 8001ee0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ee4:	200003dc 	.word	0x200003dc

08001ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC_IRQHandler>

08001eea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eee:	2003      	movs	r0, #3
 8001ef0:	f000 f928 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef4:	200f      	movs	r0, #15
 8001ef6:	f000 f805 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001efa:	f7ff fd27 	bl	800194c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f0c:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <HAL_InitTick+0x54>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <HAL_InitTick+0x58>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f943 	bl	80021ae <HAL_SYSTICK_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00e      	b.n	8001f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	d80a      	bhi.n	8001f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f000 f90b 	bl	800215a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f44:	4a06      	ldr	r2, [pc, #24]	@ (8001f60 <HAL_InitTick+0x5c>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e000      	b.n	8001f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000004 	.word	0x20000004
 8001f5c:	2000000c 	.word	0x2000000c
 8001f60:	20000008 	.word	0x20000008

08001f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f68:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_IncTick+0x20>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_IncTick+0x24>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	@ (8001f88 <HAL_IncTick+0x24>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2000000c 	.word	0x2000000c
 8001f88:	20000290 	.word	0x20000290

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000290 	.word	0x20000290

08001fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00
 8001fe8:	05fa0000 	.word	0x05fa0000

08001fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	@ (8002040 <__NVIC_EnableIRQ+0x38>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	@ (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	@ (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	@ 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	@ 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002110:	d301      	bcc.n	8002116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002116:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <SysTick_Config+0x40>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211e:	210f      	movs	r1, #15
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f7ff ff8e 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <SysTick_Config+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <SysTick_Config+0x40>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff29 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800216c:	f7ff ff3e 	bl	8001fec <__NVIC_GetPriorityGrouping>
 8002170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f7ff ff8e 	bl	8002098 <NVIC_EncodePriority>
 800217c:	4602      	mov	r2, r0
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff5d 	bl	8002044 <__NVIC_SetPriority>
}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff31 	bl	8002008 <__NVIC_EnableIRQ>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffa2 	bl	8002100 <SysTick_Config>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021cc:	f3bf 8f5f 	dmb	sy
}
 80021d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021d2:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <HAL_MPU_Disable+0x28>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	4a06      	ldr	r2, [pc, #24]	@ (80021f0 <HAL_MPU_Disable+0x28>)
 80021d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021dc:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021de:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_MPU_Disable+0x2c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	605a      	str	r2, [r3, #4]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00
 80021f4:	e000ed90 	.word	0xe000ed90

080021f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002200:	4a0b      	ldr	r2, [pc, #44]	@ (8002230 <HAL_MPU_Enable+0x38>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <HAL_MPU_Enable+0x3c>)
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	4a09      	ldr	r2, [pc, #36]	@ (8002234 <HAL_MPU_Enable+0x3c>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002214:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002216:	f3bf 8f4f 	dsb	sy
}
 800221a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800221c:	f3bf 8f6f 	isb	sy
}
 8002220:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed90 	.word	0xe000ed90
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	785a      	ldrb	r2, [r3, #1]
 8002244:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <HAL_MPU_ConfigRegion+0x7c>)
 8002246:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002248:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <HAL_MPU_ConfigRegion+0x7c>)
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	4a19      	ldr	r2, [pc, #100]	@ (80022b4 <HAL_MPU_ConfigRegion+0x7c>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002254:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <HAL_MPU_ConfigRegion+0x7c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7b1b      	ldrb	r3, [r3, #12]
 8002260:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7adb      	ldrb	r3, [r3, #11]
 8002266:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002268:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7a9b      	ldrb	r3, [r3, #10]
 800226e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002270:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7b5b      	ldrb	r3, [r3, #13]
 8002276:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002278:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7b9b      	ldrb	r3, [r3, #14]
 800227e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002280:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7bdb      	ldrb	r3, [r3, #15]
 8002286:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002288:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7a5b      	ldrb	r3, [r3, #9]
 800228e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002290:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7a1b      	ldrb	r3, [r3, #8]
 8002296:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002298:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022a0:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022a2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022a4:	6113      	str	r3, [r2, #16]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed90 	.word	0xe000ed90

080022b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022c6:	f7ff fe61 	bl	8001f8c <HAL_GetTick>
 80022ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d008      	beq.n	80022ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2280      	movs	r2, #128	@ 0x80
 80022dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e052      	b.n	8002390 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0216 	bic.w	r2, r2, #22
 80022f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002308:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <HAL_DMA_Abort+0x62>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0208 	bic.w	r2, r2, #8
 8002328:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800233a:	e013      	b.n	8002364 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800233c:	f7ff fe26 	bl	8001f8c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b05      	cmp	r3, #5
 8002348:	d90c      	bls.n	8002364 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2220      	movs	r2, #32
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2203      	movs	r2, #3
 8002354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e015      	b.n	8002390 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1e4      	bne.n	800233c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002376:	223f      	movs	r2, #63	@ 0x3f
 8002378:	409a      	lsls	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d004      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2280      	movs	r2, #128	@ 0x80
 80023b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00c      	b.n	80023d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2205      	movs	r2, #5
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	@ 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e175      	b.n	80026e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023fc:	2201      	movs	r2, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	429a      	cmp	r2, r3
 8002416:	f040 8164 	bne.w	80026e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d005      	beq.n	8002432 <HAL_GPIO_Init+0x56>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d130      	bne.n	8002494 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 0201 	and.w	r2, r3, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b03      	cmp	r3, #3
 800249e:	d017      	beq.n	80024d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d123      	bne.n	8002524 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	08da      	lsrs	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3208      	adds	r2, #8
 80024e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	220f      	movs	r2, #15
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	08da      	lsrs	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3208      	adds	r2, #8
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0203 	and.w	r2, r3, #3
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80be 	beq.w	80026e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002566:	4b66      	ldr	r3, [pc, #408]	@ (8002700 <HAL_GPIO_Init+0x324>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	4a65      	ldr	r2, [pc, #404]	@ (8002700 <HAL_GPIO_Init+0x324>)
 800256c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002570:	6453      	str	r3, [r2, #68]	@ 0x44
 8002572:	4b63      	ldr	r3, [pc, #396]	@ (8002700 <HAL_GPIO_Init+0x324>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800257e:	4a61      	ldr	r2, [pc, #388]	@ (8002704 <HAL_GPIO_Init+0x328>)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a58      	ldr	r2, [pc, #352]	@ (8002708 <HAL_GPIO_Init+0x32c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d037      	beq.n	800261a <HAL_GPIO_Init+0x23e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a57      	ldr	r2, [pc, #348]	@ (800270c <HAL_GPIO_Init+0x330>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d031      	beq.n	8002616 <HAL_GPIO_Init+0x23a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a56      	ldr	r2, [pc, #344]	@ (8002710 <HAL_GPIO_Init+0x334>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02b      	beq.n	8002612 <HAL_GPIO_Init+0x236>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a55      	ldr	r2, [pc, #340]	@ (8002714 <HAL_GPIO_Init+0x338>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d025      	beq.n	800260e <HAL_GPIO_Init+0x232>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a54      	ldr	r2, [pc, #336]	@ (8002718 <HAL_GPIO_Init+0x33c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01f      	beq.n	800260a <HAL_GPIO_Init+0x22e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a53      	ldr	r2, [pc, #332]	@ (800271c <HAL_GPIO_Init+0x340>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x22a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a52      	ldr	r2, [pc, #328]	@ (8002720 <HAL_GPIO_Init+0x344>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x226>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a51      	ldr	r2, [pc, #324]	@ (8002724 <HAL_GPIO_Init+0x348>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x222>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a50      	ldr	r2, [pc, #320]	@ (8002728 <HAL_GPIO_Init+0x34c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x21e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4f      	ldr	r2, [pc, #316]	@ (800272c <HAL_GPIO_Init+0x350>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x21a>
 80025f2:	2309      	movs	r3, #9
 80025f4:	e012      	b.n	800261c <HAL_GPIO_Init+0x240>
 80025f6:	230a      	movs	r3, #10
 80025f8:	e010      	b.n	800261c <HAL_GPIO_Init+0x240>
 80025fa:	2308      	movs	r3, #8
 80025fc:	e00e      	b.n	800261c <HAL_GPIO_Init+0x240>
 80025fe:	2307      	movs	r3, #7
 8002600:	e00c      	b.n	800261c <HAL_GPIO_Init+0x240>
 8002602:	2306      	movs	r3, #6
 8002604:	e00a      	b.n	800261c <HAL_GPIO_Init+0x240>
 8002606:	2305      	movs	r3, #5
 8002608:	e008      	b.n	800261c <HAL_GPIO_Init+0x240>
 800260a:	2304      	movs	r3, #4
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x240>
 800260e:	2303      	movs	r3, #3
 8002610:	e004      	b.n	800261c <HAL_GPIO_Init+0x240>
 8002612:	2302      	movs	r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x240>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x240>
 800261a:	2300      	movs	r3, #0
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f002 0203 	and.w	r2, r2, #3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	4093      	lsls	r3, r2
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800262c:	4935      	ldr	r1, [pc, #212]	@ (8002704 <HAL_GPIO_Init+0x328>)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263a:	4b3d      	ldr	r3, [pc, #244]	@ (8002730 <HAL_GPIO_Init+0x354>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265e:	4a34      	ldr	r2, [pc, #208]	@ (8002730 <HAL_GPIO_Init+0x354>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002664:	4b32      	ldr	r3, [pc, #200]	@ (8002730 <HAL_GPIO_Init+0x354>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002688:	4a29      	ldr	r2, [pc, #164]	@ (8002730 <HAL_GPIO_Init+0x354>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268e:	4b28      	ldr	r3, [pc, #160]	@ (8002730 <HAL_GPIO_Init+0x354>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002730 <HAL_GPIO_Init+0x354>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002730 <HAL_GPIO_Init+0x354>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026dc:	4a14      	ldr	r2, [pc, #80]	@ (8002730 <HAL_GPIO_Init+0x354>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	f67f ae86 	bls.w	80023fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3724      	adds	r7, #36	@ 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40013800 	.word	0x40013800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400
 8002710:	40020800 	.word	0x40020800
 8002714:	40020c00 	.word	0x40020c00
 8002718:	40021000 	.word	0x40021000
 800271c:	40021400 	.word	0x40021400
 8002720:	40021800 	.word	0x40021800
 8002724:	40021c00 	.word	0x40021c00
 8002728:	40022000 	.word	0x40022000
 800272c:	40022400 	.word	0x40022400
 8002730:	40013c00 	.word	0x40013c00

08002734 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	e001      	b.n	8002756 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
 8002770:	4613      	mov	r3, r2
 8002772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002774:	787b      	ldrb	r3, [r7, #1]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002780:	e003      	b.n	800278a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002782:	887b      	ldrh	r3, [r7, #2]
 8002784:	041a      	lsls	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	619a      	str	r2, [r3, #24]
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e291      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8087 	beq.w	80028ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027bc:	4b96      	ldr	r3, [pc, #600]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d00c      	beq.n	80027e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c8:	4b93      	ldr	r3, [pc, #588]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d112      	bne.n	80027fa <HAL_RCC_OscConfig+0x62>
 80027d4:	4b90      	ldr	r3, [pc, #576]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027e0:	d10b      	bne.n	80027fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d06c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x130>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d168      	bne.n	80028c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e26b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x7a>
 8002804:	4b84      	ldr	r3, [pc, #528]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a83      	ldr	r2, [pc, #524]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e02e      	b.n	8002870 <HAL_RCC_OscConfig+0xd8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x9c>
 800281a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b7c      	ldr	r3, [pc, #496]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7b      	ldr	r2, [pc, #492]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800282c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e01d      	b.n	8002870 <HAL_RCC_OscConfig+0xd8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0xc0>
 800283e:	4b76      	ldr	r3, [pc, #472]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a75      	ldr	r2, [pc, #468]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b73      	ldr	r3, [pc, #460]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a72      	ldr	r2, [pc, #456]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xd8>
 8002858:	4b6f      	ldr	r3, [pc, #444]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800285e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b6c      	ldr	r3, [pc, #432]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a6b      	ldr	r2, [pc, #428]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800286a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800286e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7ff fb88 	bl	8001f8c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002880:	f7ff fb84 	bl	8001f8c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	@ 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e21f      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	4b61      	ldr	r3, [pc, #388]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0xe8>
 800289e:	e014      	b.n	80028ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7ff fb74 	bl	8001f8c <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a8:	f7ff fb70 	bl	8001f8c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	@ 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e20b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	4b57      	ldr	r3, [pc, #348]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x110>
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d069      	beq.n	80029aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028d6:	4b50      	ldr	r3, [pc, #320]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d11c      	bne.n	8002928 <HAL_RCC_OscConfig+0x190>
 80028ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d116      	bne.n	8002928 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	4b47      	ldr	r3, [pc, #284]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_RCC_OscConfig+0x17a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e1df      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b41      	ldr	r3, [pc, #260]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	493d      	ldr	r1, [pc, #244]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	e040      	b.n	80029aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d023      	beq.n	8002978 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002930:	4b39      	ldr	r3, [pc, #228]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a38      	ldr	r2, [pc, #224]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7ff fb26 	bl	8001f8c <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002944:	f7ff fb22 	bl	8001f8c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1bd      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002956:	4b30      	ldr	r3, [pc, #192]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	4b2d      	ldr	r3, [pc, #180]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4929      	ldr	r1, [pc, #164]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
 8002976:	e018      	b.n	80029aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002978:	4b27      	ldr	r3, [pc, #156]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7ff fb02 	bl	8001f8c <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298c:	f7ff fafe 	bl	8001f8c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e199      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d038      	beq.n	8002a28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d019      	beq.n	80029f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029be:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c2:	4a15      	ldr	r2, [pc, #84]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7ff fadf 	bl	8001f8c <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d2:	f7ff fadb 	bl	8001f8c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e176      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x23a>
 80029f0:	e01a      	b.n	8002a28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f2:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f6:	4a08      	ldr	r2, [pc, #32]	@ (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7ff fac5 	bl	8001f8c <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a06:	f7ff fac1 	bl	8001f8c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d903      	bls.n	8002a1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e15c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
 8002a18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	4b91      	ldr	r3, [pc, #580]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80a4 	beq.w	8002b7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a36:	4b8b      	ldr	r3, [pc, #556]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10d      	bne.n	8002a5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b88      	ldr	r3, [pc, #544]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	4a87      	ldr	r2, [pc, #540]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4e:	4b85      	ldr	r3, [pc, #532]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5e:	4b82      	ldr	r3, [pc, #520]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d118      	bne.n	8002a9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a76:	f7ff fa89 	bl	8001f8c <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7e:	f7ff fa85 	bl	8001f8c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b64      	cmp	r3, #100	@ 0x64
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e120      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a90:	4b75      	ldr	r3, [pc, #468]	@ (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x31a>
 8002aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab0:	e02d      	b.n	8002b0e <HAL_RCC_OscConfig+0x376>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x33c>
 8002aba:	4b6a      	ldr	r3, [pc, #424]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	4a69      	ldr	r2, [pc, #420]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac6:	4b67      	ldr	r3, [pc, #412]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aca:	4a66      	ldr	r2, [pc, #408]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad2:	e01c      	b.n	8002b0e <HAL_RCC_OscConfig+0x376>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x35e>
 8002adc:	4b61      	ldr	r3, [pc, #388]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	4a60      	ldr	r2, [pc, #384]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002ae2:	f043 0304 	orr.w	r3, r3, #4
 8002ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	4a5d      	ldr	r2, [pc, #372]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af4:	e00b      	b.n	8002b0e <HAL_RCC_OscConfig+0x376>
 8002af6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afa:	4a5a      	ldr	r2, [pc, #360]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b02:	4b58      	ldr	r3, [pc, #352]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b06:	4a57      	ldr	r2, [pc, #348]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d015      	beq.n	8002b42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7ff fa39 	bl	8001f8c <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7ff fa35 	bl	8001f8c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e0ce      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b34:	4b4b      	ldr	r3, [pc, #300]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ee      	beq.n	8002b1e <HAL_RCC_OscConfig+0x386>
 8002b40:	e014      	b.n	8002b6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7ff fa23 	bl	8001f8c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7ff fa1f 	bl	8001f8c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e0b8      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b60:	4b40      	ldr	r3, [pc, #256]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ee      	bne.n	8002b4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d105      	bne.n	8002b7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b72:	4b3c      	ldr	r3, [pc, #240]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	4a3b      	ldr	r2, [pc, #236]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80a4 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b88:	4b36      	ldr	r3, [pc, #216]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d06b      	beq.n	8002c6c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d149      	bne.n	8002c30 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b31      	ldr	r3, [pc, #196]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a30      	ldr	r2, [pc, #192]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002ba2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7ff f9f0 	bl	8001f8c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7ff f9ec 	bl	8001f8c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e087      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b28      	ldr	r3, [pc, #160]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002bf6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002bfa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b19      	ldr	r3, [pc, #100]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a18      	ldr	r2, [pc, #96]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7ff f9c0 	bl	8001f8c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7ff f9bc 	bl	8001f8c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e057      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x478>
 8002c2e:	e04f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0b      	ldr	r2, [pc, #44]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002c36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7ff f9a6 	bl	8001f8c <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7ff f9a2 	bl	8001f8c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e03d      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b03      	ldr	r3, [pc, #12]	@ (8002c64 <HAL_RCC_OscConfig+0x4cc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4ac>
 8002c62:	e035      	b.n	8002cd0 <HAL_RCC_OscConfig+0x538>
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cdc <HAL_RCC_OscConfig+0x544>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d028      	beq.n	8002ccc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d121      	bne.n	8002ccc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d11a      	bne.n	8002ccc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ca2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d111      	bne.n	8002ccc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d107      	bne.n	8002ccc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0d0      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d910      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b67      	ldr	r3, [pc, #412]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 020f 	bic.w	r2, r3, #15
 8002d0e:	4965      	ldr	r1, [pc, #404]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b63      	ldr	r3, [pc, #396]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0b8      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d020      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d40:	4b59      	ldr	r3, [pc, #356]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a58      	ldr	r2, [pc, #352]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d58:	4b53      	ldr	r3, [pc, #332]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d64:	4b50      	ldr	r3, [pc, #320]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	494d      	ldr	r1, [pc, #308]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d040      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d115      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e07f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	4b41      	ldr	r3, [pc, #260]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e073      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e06b      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc2:	4b39      	ldr	r3, [pc, #228]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4936      	ldr	r1, [pc, #216]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd4:	f7ff f8da 	bl	8001f8c <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ddc:	f7ff f8d6 	bl	8001f8c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e053      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 020c 	and.w	r2, r3, #12
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1eb      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e04:	4b27      	ldr	r3, [pc, #156]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d210      	bcs.n	8002e34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b24      	ldr	r3, [pc, #144]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 020f 	bic.w	r2, r3, #15
 8002e1a:	4922      	ldr	r1, [pc, #136]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b20      	ldr	r3, [pc, #128]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e032      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e40:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4916      	ldr	r1, [pc, #88]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	490e      	ldr	r1, [pc, #56]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e72:	f000 f821 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e76:	4602      	mov	r2, r0
 8002e78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	490a      	ldr	r1, [pc, #40]	@ (8002eac <HAL_RCC_ClockConfig+0x1cc>)
 8002e84:	5ccb      	ldrb	r3, [r1, r3]
 8002e86:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8a:	4a09      	ldr	r2, [pc, #36]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e8e:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1d4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff f836 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023c00 	.word	0x40023c00
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	080065dc 	.word	0x080065dc
 8002eb0:	20000004 	.word	0x20000004
 8002eb4:	20000008 	.word	0x20000008

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ebc:	b090      	sub	sp, #64	@ 0x40
 8002ebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec8:	2300      	movs	r3, #0
 8002eca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed0:	4b59      	ldr	r3, [pc, #356]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d00d      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	f200 80a1 	bhi.w	8003024 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x34>
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eea:	e09b      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eec:	4b53      	ldr	r3, [pc, #332]	@ (800303c <HAL_RCC_GetSysClockFreq+0x184>)
 8002eee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ef0:	e09b      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ef2:	4b53      	ldr	r3, [pc, #332]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ef6:	e098      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef8:	4b4f      	ldr	r3, [pc, #316]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x180>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f02:	4b4d      	ldr	r3, [pc, #308]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d028      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	2200      	movs	r2, #0
 8002f16:	623b      	str	r3, [r7, #32]
 8002f18:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f20:	2100      	movs	r1, #0
 8002f22:	4b47      	ldr	r3, [pc, #284]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f24:	fb03 f201 	mul.w	r2, r3, r1
 8002f28:	2300      	movs	r3, #0
 8002f2a:	fb00 f303 	mul.w	r3, r0, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a43      	ldr	r2, [pc, #268]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f32:	fba0 1202 	umull	r1, r2, r0, r2
 8002f36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f38:	460a      	mov	r2, r1
 8002f3a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f3e:	4413      	add	r3, r2
 8002f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f44:	2200      	movs	r2, #0
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	61fa      	str	r2, [r7, #28]
 8002f4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f52:	f7fd f9c5 	bl	80002e0 <__aeabi_uldivmod>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f5e:	e053      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f60:	4b35      	ldr	r3, [pc, #212]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	2200      	movs	r2, #0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	617a      	str	r2, [r7, #20]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f72:	f04f 0b00 	mov.w	fp, #0
 8002f76:	4652      	mov	r2, sl
 8002f78:	465b      	mov	r3, fp
 8002f7a:	f04f 0000 	mov.w	r0, #0
 8002f7e:	f04f 0100 	mov.w	r1, #0
 8002f82:	0159      	lsls	r1, r3, #5
 8002f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f88:	0150      	lsls	r0, r2, #5
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	ebb2 080a 	subs.w	r8, r2, sl
 8002f92:	eb63 090b 	sbc.w	r9, r3, fp
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fa2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fa6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002faa:	ebb2 0408 	subs.w	r4, r2, r8
 8002fae:	eb63 0509 	sbc.w	r5, r3, r9
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	00eb      	lsls	r3, r5, #3
 8002fbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc0:	00e2      	lsls	r2, r4, #3
 8002fc2:	4614      	mov	r4, r2
 8002fc4:	461d      	mov	r5, r3
 8002fc6:	eb14 030a 	adds.w	r3, r4, sl
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	eb45 030b 	adc.w	r3, r5, fp
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	028b      	lsls	r3, r1, #10
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe8:	4621      	mov	r1, r4
 8002fea:	028a      	lsls	r2, r1, #10
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	60fa      	str	r2, [r7, #12]
 8002ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ffc:	f7fd f970 	bl	80002e0 <__aeabi_uldivmod>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4613      	mov	r3, r2
 8003006:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x180>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003018:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003022:	e002      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <HAL_RCC_GetSysClockFreq+0x184>)
 8003026:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800302a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800302c:	4618      	mov	r0, r3
 800302e:	3740      	adds	r7, #64	@ 0x40
 8003030:	46bd      	mov	sp, r7
 8003032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	00f42400 	.word	0x00f42400
 8003040:	017d7840 	.word	0x017d7840

08003044 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003048:	4b03      	ldr	r3, [pc, #12]	@ (8003058 <HAL_RCC_GetHCLKFreq+0x14>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000004 	.word	0x20000004

0800305c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003060:	f7ff fff0 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b05      	ldr	r3, [pc, #20]	@ (800307c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	0a9b      	lsrs	r3, r3, #10
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	4903      	ldr	r1, [pc, #12]	@ (8003080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003078:	4618      	mov	r0, r3
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40023800 	.word	0x40023800
 8003080:	080065ec 	.word	0x080065ec

08003084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003088:	f7ff ffdc 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	0b5b      	lsrs	r3, r3, #13
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	4903      	ldr	r1, [pc, #12]	@ (80030a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800
 80030a8:	080065ec 	.word	0x080065ec

080030ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d012      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030d4:	4b69      	ldr	r3, [pc, #420]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a68      	ldr	r2, [pc, #416]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80030de:	6093      	str	r3, [r2, #8]
 80030e0:	4b66      	ldr	r3, [pc, #408]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e8:	4964      	ldr	r1, [pc, #400]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80030f6:	2301      	movs	r3, #1
 80030f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d017      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003106:	4b5d      	ldr	r3, [pc, #372]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800310c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003114:	4959      	ldr	r1, [pc, #356]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003120:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003124:	d101      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003126:	2301      	movs	r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003132:	2301      	movs	r3, #1
 8003134:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d017      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003142:	4b4e      	ldr	r3, [pc, #312]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003148:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	494a      	ldr	r1, [pc, #296]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003160:	d101      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800316e:	2301      	movs	r3, #1
 8003170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800317e:	2301      	movs	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 808b 	beq.w	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003190:	4b3a      	ldr	r3, [pc, #232]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	4a39      	ldr	r2, [pc, #228]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319a:	6413      	str	r3, [r2, #64]	@ 0x40
 800319c:	4b37      	ldr	r3, [pc, #220]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031a8:	4b35      	ldr	r3, [pc, #212]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a34      	ldr	r2, [pc, #208]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b4:	f7fe feea 	bl	8001f8c <HAL_GetTick>
 80031b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031bc:	f7fe fee6 	bl	8001f8c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	@ 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e357      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031da:	4b28      	ldr	r3, [pc, #160]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d035      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d02e      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031f8:	4b20      	ldr	r3, [pc, #128]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003200:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003202:	4b1e      	ldr	r3, [pc, #120]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	4a1d      	ldr	r2, [pc, #116]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800320e:	4b1b      	ldr	r3, [pc, #108]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003212:	4a1a      	ldr	r2, [pc, #104]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003218:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800321a:	4a18      	ldr	r2, [pc, #96]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003220:	4b16      	ldr	r3, [pc, #88]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b01      	cmp	r3, #1
 800322a:	d114      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fe feae 	bl	8001f8c <HAL_GetTick>
 8003230:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003232:	e00a      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003234:	f7fe feaa 	bl	8001f8c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e319      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324a:	4b0c      	ldr	r3, [pc, #48]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0ee      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800325e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003262:	d111      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003264:	4b05      	ldr	r3, [pc, #20]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003270:	4b04      	ldr	r3, [pc, #16]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003272:	400b      	ands	r3, r1
 8003274:	4901      	ldr	r1, [pc, #4]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
 800327a:	e00b      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800327c:	40023800 	.word	0x40023800
 8003280:	40007000 	.word	0x40007000
 8003284:	0ffffcff 	.word	0x0ffffcff
 8003288:	4baa      	ldr	r3, [pc, #680]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4aa9      	ldr	r2, [pc, #676]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003292:	6093      	str	r3, [r2, #8]
 8003294:	4ba7      	ldr	r3, [pc, #668]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003296:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a0:	49a4      	ldr	r1, [pc, #656]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d010      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032b2:	4ba0      	ldr	r3, [pc, #640]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032b8:	4a9e      	ldr	r2, [pc, #632]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80032c2:	4b9c      	ldr	r3, [pc, #624]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032cc:	4999      	ldr	r1, [pc, #612]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032e0:	4b94      	ldr	r3, [pc, #592]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ee:	4991      	ldr	r1, [pc, #580]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003302:	4b8c      	ldr	r3, [pc, #560]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003308:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003310:	4988      	ldr	r1, [pc, #544]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003324:	4b83      	ldr	r3, [pc, #524]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003332:	4980      	ldr	r1, [pc, #512]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003346:	4b7b      	ldr	r3, [pc, #492]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003354:	4977      	ldr	r1, [pc, #476]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003368:	4b72      	ldr	r3, [pc, #456]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336e:	f023 0203 	bic.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	496f      	ldr	r1, [pc, #444]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800338a:	4b6a      	ldr	r3, [pc, #424]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003390:	f023 020c 	bic.w	r2, r3, #12
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003398:	4966      	ldr	r1, [pc, #408]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033ac:	4b61      	ldr	r3, [pc, #388]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ba:	495e      	ldr	r1, [pc, #376]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033ce:	4b59      	ldr	r3, [pc, #356]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033dc:	4955      	ldr	r1, [pc, #340]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033f0:	4b50      	ldr	r3, [pc, #320]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fe:	494d      	ldr	r1, [pc, #308]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003412:	4b48      	ldr	r3, [pc, #288]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003418:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003420:	4944      	ldr	r1, [pc, #272]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003434:	4b3f      	ldr	r3, [pc, #252]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003442:	493c      	ldr	r1, [pc, #240]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003456:	4b37      	ldr	r3, [pc, #220]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003464:	4933      	ldr	r1, [pc, #204]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003478:	4b2e      	ldr	r3, [pc, #184]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003486:	492b      	ldr	r1, [pc, #172]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d011      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800349a:	4b26      	ldr	r3, [pc, #152]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034a8:	4922      	ldr	r1, [pc, #136]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034b8:	d101      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034da:	4b16      	ldr	r3, [pc, #88]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034e8:	4912      	ldr	r1, [pc, #72]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00b      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003502:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800350c:	4909      	ldr	r1, [pc, #36]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d006      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80d9 	beq.w	80036da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003528:	4b02      	ldr	r3, [pc, #8]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a01      	ldr	r2, [pc, #4]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800352e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003532:	e001      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003534:	40023800 	.word	0x40023800
 8003538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353a:	f7fe fd27 	bl	8001f8c <HAL_GetTick>
 800353e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003542:	f7fe fd23 	bl	8001f8c <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b64      	cmp	r3, #100	@ 0x64
 800354e:	d901      	bls.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e194      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003554:	4b6c      	ldr	r3, [pc, #432]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f0      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d021      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003570:	2b00      	cmp	r3, #0
 8003572:	d11d      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003574:	4b64      	ldr	r3, [pc, #400]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800357a:	0c1b      	lsrs	r3, r3, #16
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003582:	4b61      	ldr	r3, [pc, #388]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003588:	0e1b      	lsrs	r3, r3, #24
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	019a      	lsls	r2, r3, #6
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	041b      	lsls	r3, r3, #16
 800359a:	431a      	orrs	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	061b      	lsls	r3, r3, #24
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	071b      	lsls	r3, r3, #28
 80035a8:	4957      	ldr	r1, [pc, #348]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d004      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d02e      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035da:	d129      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035ea:	4b47      	ldr	r3, [pc, #284]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035f0:	0f1b      	lsrs	r3, r3, #28
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	019a      	lsls	r2, r3, #6
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	431a      	orrs	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	071b      	lsls	r3, r3, #28
 8003610:	493d      	ldr	r1, [pc, #244]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003618:	4b3b      	ldr	r3, [pc, #236]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800361e:	f023 021f 	bic.w	r2, r3, #31
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	3b01      	subs	r3, #1
 8003628:	4937      	ldr	r1, [pc, #220]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01d      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800363c:	4b32      	ldr	r3, [pc, #200]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800363e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003642:	0e1b      	lsrs	r3, r3, #24
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800364a:	4b2f      	ldr	r3, [pc, #188]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003650:	0f1b      	lsrs	r3, r3, #28
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	019a      	lsls	r2, r3, #6
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	041b      	lsls	r3, r3, #16
 8003664:	431a      	orrs	r2, r3
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	061b      	lsls	r3, r3, #24
 800366a:	431a      	orrs	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	071b      	lsls	r3, r3, #28
 8003670:	4925      	ldr	r1, [pc, #148]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d011      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	019a      	lsls	r2, r3, #6
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	041b      	lsls	r3, r3, #16
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	061b      	lsls	r3, r3, #24
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	071b      	lsls	r3, r3, #28
 80036a0:	4919      	ldr	r1, [pc, #100]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036a8:	4b17      	ldr	r3, [pc, #92]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a16      	ldr	r2, [pc, #88]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b4:	f7fe fc6a 	bl	8001f8c <HAL_GetTick>
 80036b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036bc:	f7fe fc66 	bl	8001f8c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	@ 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e0d7      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	f040 80cd 	bne.w	800387c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036e2:	4b09      	ldr	r3, [pc, #36]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a08      	ldr	r2, [pc, #32]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ee:	f7fe fc4d 	bl	8001f8c <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036f6:	f7fe fc49 	bl	8001f8c <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b64      	cmp	r3, #100	@ 0x64
 8003702:	d903      	bls.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e0ba      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003708:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800370c:	4b5e      	ldr	r3, [pc, #376]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003718:	d0ed      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003736:	2b00      	cmp	r3, #0
 8003738:	d02e      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d12a      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003742:	4b51      	ldr	r3, [pc, #324]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003750:	4b4d      	ldr	r3, [pc, #308]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003756:	0f1b      	lsrs	r3, r3, #28
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	019a      	lsls	r2, r3, #6
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	061b      	lsls	r3, r3, #24
 8003770:	431a      	orrs	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	071b      	lsls	r3, r3, #28
 8003776:	4944      	ldr	r1, [pc, #272]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800377e:	4b42      	ldr	r3, [pc, #264]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003784:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	3b01      	subs	r3, #1
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	493d      	ldr	r1, [pc, #244]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d022      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037ac:	d11d      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037ae:	4b36      	ldr	r3, [pc, #216]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b4:	0e1b      	lsrs	r3, r3, #24
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037bc:	4b32      	ldr	r3, [pc, #200]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c2:	0f1b      	lsrs	r3, r3, #28
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	019a      	lsls	r2, r3, #6
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	041b      	lsls	r3, r3, #16
 80037d6:	431a      	orrs	r2, r3
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	061b      	lsls	r3, r3, #24
 80037dc:	431a      	orrs	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	071b      	lsls	r3, r3, #28
 80037e2:	4929      	ldr	r1, [pc, #164]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d028      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037f6:	4b24      	ldr	r3, [pc, #144]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fc:	0e1b      	lsrs	r3, r3, #24
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003804:	4b20      	ldr	r3, [pc, #128]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380a:	0c1b      	lsrs	r3, r3, #16
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	019a      	lsls	r2, r3, #6
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	041b      	lsls	r3, r3, #16
 800381c:	431a      	orrs	r2, r3
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	061b      	lsls	r3, r3, #24
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	071b      	lsls	r3, r3, #28
 800382a:	4917      	ldr	r1, [pc, #92]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003832:	4b15      	ldr	r3, [pc, #84]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003838:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	4911      	ldr	r1, [pc, #68]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003848:	4b0f      	ldr	r3, [pc, #60]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a0e      	ldr	r2, [pc, #56]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800384e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003854:	f7fe fb9a 	bl	8001f8c <HAL_GetTick>
 8003858:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800385a:	e008      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800385c:	f7fe fb96 	bl	8001f8c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	@ 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e007      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800386e:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800387a:	d1ef      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800

0800388c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e049      	b.n	8003932 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fe f9fc 	bl	8001cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f000 fad6 	bl	8003e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d001      	beq.n	8003954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e054      	b.n	80039fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a26      	ldr	r2, [pc, #152]	@ (8003a0c <HAL_TIM_Base_Start_IT+0xd0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d022      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800397e:	d01d      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a22      	ldr	r2, [pc, #136]	@ (8003a10 <HAL_TIM_Base_Start_IT+0xd4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d018      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a21      	ldr	r2, [pc, #132]	@ (8003a14 <HAL_TIM_Base_Start_IT+0xd8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d013      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1f      	ldr	r2, [pc, #124]	@ (8003a18 <HAL_TIM_Base_Start_IT+0xdc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00e      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a1c <HAL_TIM_Base_Start_IT+0xe0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d009      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <HAL_TIM_Base_Start_IT+0xe4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a24 <HAL_TIM_Base_Start_IT+0xe8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d115      	bne.n	80039e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	4b19      	ldr	r3, [pc, #100]	@ (8003a28 <HAL_TIM_Base_Start_IT+0xec>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d015      	beq.n	80039fa <HAL_TIM_Base_Start_IT+0xbe>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d4:	d011      	beq.n	80039fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e6:	e008      	b.n	80039fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e000      	b.n	80039fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	40010400 	.word	0x40010400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40001800 	.word	0x40001800
 8003a28:	00010007 	.word	0x00010007

08003a2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a1a      	ldr	r2, [r3, #32]
 8003a4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10f      	bne.n	8003a74 <HAL_TIM_Base_Stop_IT+0x48>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a1a      	ldr	r2, [r3, #32]
 8003a5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_TIM_Base_Stop_IT+0x48>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01b      	beq.n	8003aee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f06f 0202 	mvn.w	r2, #2
 8003abe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f9b3 	bl	8003e40 <HAL_TIM_IC_CaptureCallback>
 8003ada:	e005      	b.n	8003ae8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f9a5 	bl	8003e2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f9b6 	bl	8003e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01b      	beq.n	8003b3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f06f 0204 	mvn.w	r2, #4
 8003b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f98d 	bl	8003e40 <HAL_TIM_IC_CaptureCallback>
 8003b26:	e005      	b.n	8003b34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f97f 	bl	8003e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f990 	bl	8003e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01b      	beq.n	8003b86 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f06f 0208 	mvn.w	r2, #8
 8003b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f967 	bl	8003e40 <HAL_TIM_IC_CaptureCallback>
 8003b72:	e005      	b.n	8003b80 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f959 	bl	8003e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f96a 	bl	8003e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d020      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01b      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f06f 0210 	mvn.w	r2, #16
 8003ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f941 	bl	8003e40 <HAL_TIM_IC_CaptureCallback>
 8003bbe:	e005      	b.n	8003bcc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f933 	bl	8003e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f944 	bl	8003e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00c      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f06f 0201 	mvn.w	r2, #1
 8003bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fd fce1 	bl	80015b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00c      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fb0a 	bl	8004238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00c      	beq.n	8003c48 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fb02 	bl	800424c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00c      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f8fe 	bl	8003e68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00c      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0220 	mvn.w	r2, #32
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 faca 	bl	8004224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e0b4      	b.n	8003e1e <HAL_TIM_ConfigClockSource+0x186>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	4b56      	ldr	r3, [pc, #344]	@ (8003e28 <HAL_TIM_ConfigClockSource+0x190>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cec:	d03e      	beq.n	8003d6c <HAL_TIM_ConfigClockSource+0xd4>
 8003cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cf2:	f200 8087 	bhi.w	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cfa:	f000 8086 	beq.w	8003e0a <HAL_TIM_ConfigClockSource+0x172>
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d02:	d87f      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b70      	cmp	r3, #112	@ 0x70
 8003d06:	d01a      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0xa6>
 8003d08:	2b70      	cmp	r3, #112	@ 0x70
 8003d0a:	d87b      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b60      	cmp	r3, #96	@ 0x60
 8003d0e:	d050      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0x11a>
 8003d10:	2b60      	cmp	r3, #96	@ 0x60
 8003d12:	d877      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b50      	cmp	r3, #80	@ 0x50
 8003d16:	d03c      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0xfa>
 8003d18:	2b50      	cmp	r3, #80	@ 0x50
 8003d1a:	d873      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b40      	cmp	r3, #64	@ 0x40
 8003d1e:	d058      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d20:	2b40      	cmp	r3, #64	@ 0x40
 8003d22:	d86f      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b30      	cmp	r3, #48	@ 0x30
 8003d26:	d064      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d28:	2b30      	cmp	r3, #48	@ 0x30
 8003d2a:	d86b      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d060      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d867      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05c      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d05a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d3c:	e062      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d4e:	f000 f9bb 	bl	80040c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	609a      	str	r2, [r3, #8]
      break;
 8003d6a:	e04f      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d7c:	f000 f9a4 	bl	80040c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d8e:	609a      	str	r2, [r3, #8]
      break;
 8003d90:	e03c      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f000 f918 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2150      	movs	r1, #80	@ 0x50
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f971 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003db0:	e02c      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f000 f937 	bl	8004032 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2160      	movs	r1, #96	@ 0x60
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f961 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003dd0:	e01c      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dde:	461a      	mov	r2, r3
 8003de0:	f000 f8f8 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2140      	movs	r1, #64	@ 0x40
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f951 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003df0:	e00c      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f000 f948 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003e02:	e003      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
      break;
 8003e08:	e000      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	fffeff88 	.word	0xfffeff88

08003e2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a46      	ldr	r2, [pc, #280]	@ (8003fa8 <TIM_Base_SetConfig+0x12c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d013      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9a:	d00f      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a43      	ldr	r2, [pc, #268]	@ (8003fac <TIM_Base_SetConfig+0x130>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a42      	ldr	r2, [pc, #264]	@ (8003fb0 <TIM_Base_SetConfig+0x134>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a41      	ldr	r2, [pc, #260]	@ (8003fb4 <TIM_Base_SetConfig+0x138>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a40      	ldr	r2, [pc, #256]	@ (8003fb8 <TIM_Base_SetConfig+0x13c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d108      	bne.n	8003ece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a35      	ldr	r2, [pc, #212]	@ (8003fa8 <TIM_Base_SetConfig+0x12c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02b      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003edc:	d027      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a32      	ldr	r2, [pc, #200]	@ (8003fac <TIM_Base_SetConfig+0x130>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d023      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a31      	ldr	r2, [pc, #196]	@ (8003fb0 <TIM_Base_SetConfig+0x134>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01f      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a30      	ldr	r2, [pc, #192]	@ (8003fb4 <TIM_Base_SetConfig+0x138>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01b      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb8 <TIM_Base_SetConfig+0x13c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d017      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2e      	ldr	r2, [pc, #184]	@ (8003fbc <TIM_Base_SetConfig+0x140>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc0 <TIM_Base_SetConfig+0x144>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00f      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc4 <TIM_Base_SetConfig+0x148>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00b      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a2b      	ldr	r2, [pc, #172]	@ (8003fc8 <TIM_Base_SetConfig+0x14c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d007      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2a      	ldr	r2, [pc, #168]	@ (8003fcc <TIM_Base_SetConfig+0x150>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d003      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a29      	ldr	r2, [pc, #164]	@ (8003fd0 <TIM_Base_SetConfig+0x154>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d108      	bne.n	8003f40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a10      	ldr	r2, [pc, #64]	@ (8003fa8 <TIM_Base_SetConfig+0x12c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <TIM_Base_SetConfig+0xf8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a12      	ldr	r2, [pc, #72]	@ (8003fb8 <TIM_Base_SetConfig+0x13c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d103      	bne.n	8003f7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d105      	bne.n	8003f9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f023 0201 	bic.w	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	611a      	str	r2, [r3, #16]
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40010000 	.word	0x40010000
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	40000800 	.word	0x40000800
 8003fb4:	40000c00 	.word	0x40000c00
 8003fb8:	40010400 	.word	0x40010400
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800
 8003fc8:	40001800 	.word	0x40001800
 8003fcc:	40001c00 	.word	0x40001c00
 8003fd0:	40002000 	.word	0x40002000

08003fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0201 	bic.w	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f023 030a 	bic.w	r3, r3, #10
 8004010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004032:	b480      	push	{r7}
 8004034:	b087      	sub	sp, #28
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	f023 0210 	bic.w	r2, r3, #16
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800405c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	031b      	lsls	r3, r3, #12
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800406e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f043 0307 	orr.w	r3, r3, #7
 80040b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	021a      	lsls	r2, r3, #8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800411c:	2302      	movs	r3, #2
 800411e:	e06d      	b.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a30      	ldr	r2, [pc, #192]	@ (8004208 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d004      	beq.n	8004154 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2f      	ldr	r2, [pc, #188]	@ (800420c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d108      	bne.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800415a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a20      	ldr	r2, [pc, #128]	@ (8004208 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d022      	beq.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004192:	d01d      	beq.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1d      	ldr	r2, [pc, #116]	@ (8004210 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d018      	beq.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004214 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d013      	beq.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004218 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00e      	beq.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a15      	ldr	r2, [pc, #84]	@ (800420c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d009      	beq.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a16      	ldr	r2, [pc, #88]	@ (800421c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a15      	ldr	r2, [pc, #84]	@ (8004220 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10c      	bne.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40010000 	.word	0x40010000
 800420c:	40010400 	.word	0x40010400
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40000c00 	.word	0x40000c00
 800421c:	40014000 	.word	0x40014000
 8004220:	40001800 	.word	0x40001800

08004224 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e040      	b.n	80042f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd fda0 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2224      	movs	r2, #36	@ 0x24
 800428c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fe4c 	bl	8004f44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fbe5 	bl	8004a7c <UART_SetConfig>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e01b      	b.n	80042f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fecb 	bl	8005088 <UART_CheckIdleState>
 80042f2:	4603      	mov	r3, r0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	@ 0x28
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004310:	2b20      	cmp	r3, #32
 8004312:	d177      	bne.n	8004404 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_UART_Transmit+0x24>
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e070      	b.n	8004406 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2221      	movs	r2, #33	@ 0x21
 8004330:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004332:	f7fd fe2b 	bl	8001f8c <HAL_GetTick>
 8004336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004350:	d108      	bne.n	8004364 <HAL_UART_Transmit+0x68>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d104      	bne.n	8004364 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	e003      	b.n	800436c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004368:	2300      	movs	r3, #0
 800436a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800436c:	e02f      	b.n	80043ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2200      	movs	r2, #0
 8004376:	2180      	movs	r1, #128	@ 0x80
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fedc 	bl	8005136 <UART_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e03b      	b.n	8004406 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10b      	bne.n	80043ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	461a      	mov	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	3302      	adds	r3, #2
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	e007      	b.n	80043bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	781a      	ldrb	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3301      	adds	r3, #1
 80043ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1c9      	bne.n	800436e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	2140      	movs	r1, #64	@ 0x40
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fea6 	bl	8005136 <UART_WaitOnFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e005      	b.n	8004406 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	e000      	b.n	8004406 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004404:	2302      	movs	r3, #2
  }
}
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b08a      	sub	sp, #40	@ 0x28
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	4613      	mov	r3, r2
 800441a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004422:	2b20      	cmp	r3, #32
 8004424:	d132      	bne.n	800448c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_UART_Receive_IT+0x24>
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e02b      	b.n	800448e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d018      	beq.n	800447c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	613b      	str	r3, [r7, #16]
   return(result);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	623b      	str	r3, [r7, #32]
 800446a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	69f9      	ldr	r1, [r7, #28]
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	61bb      	str	r3, [r7, #24]
   return(result);
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	461a      	mov	r2, r3
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fec4 	bl	8005210 <UART_Start_Receive_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	e000      	b.n	800448e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800448c:	2302      	movs	r3, #2
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	3728      	adds	r7, #40	@ 0x28
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b0ba      	sub	sp, #232	@ 0xe8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80044c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80044c6:	4013      	ands	r3, r2
 80044c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80044cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d115      	bne.n	8004500 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00f      	beq.n	8004500 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8297 	beq.w	8004a24 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	4798      	blx	r3
      }
      return;
 80044fe:	e291      	b.n	8004a24 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8117 	beq.w	8004738 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800450a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004516:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800451a:	4b85      	ldr	r3, [pc, #532]	@ (8004730 <HAL_UART_IRQHandler+0x298>)
 800451c:	4013      	ands	r3, r2
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 810a 	beq.w	8004738 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d011      	beq.n	8004554 <HAL_UART_IRQHandler+0xbc>
 8004530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2201      	movs	r2, #1
 8004542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800454a:	f043 0201 	orr.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d011      	beq.n	8004584 <HAL_UART_IRQHandler+0xec>
 8004560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2202      	movs	r2, #2
 8004572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800457a:	f043 0204 	orr.w	r2, r3, #4
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d011      	beq.n	80045b4 <HAL_UART_IRQHandler+0x11c>
 8004590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2204      	movs	r2, #4
 80045a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045aa:	f043 0202 	orr.w	r2, r3, #2
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d017      	beq.n	80045f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d105      	bne.n	80045d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2208      	movs	r2, #8
 80045de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e6:	f043 0208 	orr.w	r2, r3, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d012      	beq.n	8004622 <HAL_UART_IRQHandler+0x18a>
 80045fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004600:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00c      	beq.n	8004622 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004610:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 81fd 	beq.w	8004a28 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00d      	beq.n	8004656 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800463a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800465c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466a:	2b40      	cmp	r3, #64	@ 0x40
 800466c:	d005      	beq.n	800467a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800466e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004672:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004676:	2b00      	cmp	r3, #0
 8004678:	d04f      	beq.n	800471a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fe8e 	bl	800539c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468a:	2b40      	cmp	r3, #64	@ 0x40
 800468c:	d141      	bne.n	8004712 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3308      	adds	r3, #8
 8004694:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3308      	adds	r3, #8
 80046b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1d9      	bne.n	800468e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d013      	beq.n	800470a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e6:	4a13      	ldr	r2, [pc, #76]	@ (8004734 <HAL_UART_IRQHandler+0x29c>)
 80046e8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fd fe52 	bl	8002398 <HAL_DMA_Abort_IT>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d017      	beq.n	800472a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004704:	4610      	mov	r0, r2
 8004706:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	e00f      	b.n	800472a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f9a0 	bl	8004a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	e00b      	b.n	800472a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f99c 	bl	8004a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	e007      	b.n	800472a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f998 	bl	8004a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004728:	e17e      	b.n	8004a28 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472a:	bf00      	nop
    return;
 800472c:	e17c      	b.n	8004a28 <HAL_UART_IRQHandler+0x590>
 800472e:	bf00      	nop
 8004730:	04000120 	.word	0x04000120
 8004734:	08005465 	.word	0x08005465

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473c:	2b01      	cmp	r3, #1
 800473e:	f040 814c 	bne.w	80049da <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 8145 	beq.w	80049da <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 813e 	beq.w	80049da <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2210      	movs	r2, #16
 8004764:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004770:	2b40      	cmp	r3, #64	@ 0x40
 8004772:	f040 80b6 	bne.w	80048e2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004782:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8150 	beq.w	8004a2c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004796:	429a      	cmp	r2, r3
 8004798:	f080 8148 	bcs.w	8004a2c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047b0:	f000 8086 	beq.w	80048c0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1da      	bne.n	80047b4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3308      	adds	r3, #8
 8004804:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800480e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3308      	adds	r3, #8
 800481e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004822:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004826:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800482a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004834:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e1      	bne.n	80047fe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3308      	adds	r3, #8
 8004840:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800484a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800484c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3308      	adds	r3, #8
 800485a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800485e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004860:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004864:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800486c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e3      	bne.n	800483a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800488e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004890:	f023 0310 	bic.w	r3, r3, #16
 8004894:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e4      	bne.n	8004880 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fd fcfc 	bl	80022b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	4619      	mov	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8c2 	bl	8004a64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048e0:	e0a4      	b.n	8004a2c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8096 	beq.w	8004a30 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004904:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8091 	beq.w	8004a30 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800491c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004922:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004930:	647b      	str	r3, [r7, #68]	@ 0x44
 8004932:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004936:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800493e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e4      	bne.n	800490e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3308      	adds	r3, #8
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	623b      	str	r3, [r7, #32]
   return(result);
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3308      	adds	r3, #8
 8004964:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004968:	633a      	str	r2, [r7, #48]	@ 0x30
 800496a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800496e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e3      	bne.n	8004944 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	60fb      	str	r3, [r7, #12]
   return(result);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f023 0310 	bic.w	r3, r3, #16
 80049a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	69b9      	ldr	r1, [r7, #24]
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	617b      	str	r3, [r7, #20]
   return(result);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e4      	bne.n	8004990 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049d0:	4619      	mov	r1, r3
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f846 	bl	8004a64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049d8:	e02a      	b.n	8004a30 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00e      	beq.n	8004a04 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01c      	beq.n	8004a34 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	4798      	blx	r3
    }
    return;
 8004a02:	e017      	b.n	8004a34 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d012      	beq.n	8004a36 <HAL_UART_IRQHandler+0x59e>
 8004a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00c      	beq.n	8004a36 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fd37 	bl	8005490 <UART_EndTransmit_IT>
    return;
 8004a22:	e008      	b.n	8004a36 <HAL_UART_IRQHandler+0x59e>
      return;
 8004a24:	bf00      	nop
 8004a26:	e006      	b.n	8004a36 <HAL_UART_IRQHandler+0x59e>
    return;
 8004a28:	bf00      	nop
 8004a2a:	e004      	b.n	8004a36 <HAL_UART_IRQHandler+0x59e>
      return;
 8004a2c:	bf00      	nop
 8004a2e:	e002      	b.n	8004a36 <HAL_UART_IRQHandler+0x59e>
      return;
 8004a30:	bf00      	nop
 8004a32:	e000      	b.n	8004a36 <HAL_UART_IRQHandler+0x59e>
    return;
 8004a34:	bf00      	nop
  }

}
 8004a36:	37e8      	adds	r7, #232	@ 0xe8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4ba6      	ldr	r3, [pc, #664]	@ (8004d40 <UART_SetConfig+0x2c4>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	6979      	ldr	r1, [r7, #20]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a94      	ldr	r2, [pc, #592]	@ (8004d44 <UART_SetConfig+0x2c8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d120      	bne.n	8004b3a <UART_SetConfig+0xbe>
 8004af8:	4b93      	ldr	r3, [pc, #588]	@ (8004d48 <UART_SetConfig+0x2cc>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d816      	bhi.n	8004b34 <UART_SetConfig+0xb8>
 8004b06:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <UART_SetConfig+0x90>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b1d 	.word	0x08004b1d
 8004b10:	08004b29 	.word	0x08004b29
 8004b14:	08004b23 	.word	0x08004b23
 8004b18:	08004b2f 	.word	0x08004b2f
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e150      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004b22:	2302      	movs	r3, #2
 8004b24:	77fb      	strb	r3, [r7, #31]
 8004b26:	e14d      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	77fb      	strb	r3, [r7, #31]
 8004b2c:	e14a      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004b2e:	2308      	movs	r3, #8
 8004b30:	77fb      	strb	r3, [r7, #31]
 8004b32:	e147      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004b34:	2310      	movs	r3, #16
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	e144      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a83      	ldr	r2, [pc, #524]	@ (8004d4c <UART_SetConfig+0x2d0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d132      	bne.n	8004baa <UART_SetConfig+0x12e>
 8004b44:	4b80      	ldr	r3, [pc, #512]	@ (8004d48 <UART_SetConfig+0x2cc>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d828      	bhi.n	8004ba4 <UART_SetConfig+0x128>
 8004b52:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <UART_SetConfig+0xdc>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b8d 	.word	0x08004b8d
 8004b5c:	08004ba5 	.word	0x08004ba5
 8004b60:	08004ba5 	.word	0x08004ba5
 8004b64:	08004ba5 	.word	0x08004ba5
 8004b68:	08004b99 	.word	0x08004b99
 8004b6c:	08004ba5 	.word	0x08004ba5
 8004b70:	08004ba5 	.word	0x08004ba5
 8004b74:	08004ba5 	.word	0x08004ba5
 8004b78:	08004b93 	.word	0x08004b93
 8004b7c:	08004ba5 	.word	0x08004ba5
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004ba5 	.word	0x08004ba5
 8004b88:	08004b9f 	.word	0x08004b9f
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e118      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004b92:	2302      	movs	r3, #2
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e115      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e112      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e10f      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e10c      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a68      	ldr	r2, [pc, #416]	@ (8004d50 <UART_SetConfig+0x2d4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d120      	bne.n	8004bf6 <UART_SetConfig+0x17a>
 8004bb4:	4b64      	ldr	r3, [pc, #400]	@ (8004d48 <UART_SetConfig+0x2cc>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bbe:	2b30      	cmp	r3, #48	@ 0x30
 8004bc0:	d013      	beq.n	8004bea <UART_SetConfig+0x16e>
 8004bc2:	2b30      	cmp	r3, #48	@ 0x30
 8004bc4:	d814      	bhi.n	8004bf0 <UART_SetConfig+0x174>
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d009      	beq.n	8004bde <UART_SetConfig+0x162>
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d810      	bhi.n	8004bf0 <UART_SetConfig+0x174>
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <UART_SetConfig+0x15c>
 8004bd2:	2b10      	cmp	r3, #16
 8004bd4:	d006      	beq.n	8004be4 <UART_SetConfig+0x168>
 8004bd6:	e00b      	b.n	8004bf0 <UART_SetConfig+0x174>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e0f2      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004bde:	2302      	movs	r3, #2
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e0ef      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004be4:	2304      	movs	r3, #4
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e0ec      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004bea:	2308      	movs	r3, #8
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e0e9      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e0e6      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a56      	ldr	r2, [pc, #344]	@ (8004d54 <UART_SetConfig+0x2d8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d120      	bne.n	8004c42 <UART_SetConfig+0x1c6>
 8004c00:	4b51      	ldr	r3, [pc, #324]	@ (8004d48 <UART_SetConfig+0x2cc>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c0c:	d013      	beq.n	8004c36 <UART_SetConfig+0x1ba>
 8004c0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c10:	d814      	bhi.n	8004c3c <UART_SetConfig+0x1c0>
 8004c12:	2b80      	cmp	r3, #128	@ 0x80
 8004c14:	d009      	beq.n	8004c2a <UART_SetConfig+0x1ae>
 8004c16:	2b80      	cmp	r3, #128	@ 0x80
 8004c18:	d810      	bhi.n	8004c3c <UART_SetConfig+0x1c0>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <UART_SetConfig+0x1a8>
 8004c1e:	2b40      	cmp	r3, #64	@ 0x40
 8004c20:	d006      	beq.n	8004c30 <UART_SetConfig+0x1b4>
 8004c22:	e00b      	b.n	8004c3c <UART_SetConfig+0x1c0>
 8004c24:	2300      	movs	r3, #0
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e0cc      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	77fb      	strb	r3, [r7, #31]
 8004c2e:	e0c9      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004c30:	2304      	movs	r3, #4
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e0c6      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004c36:	2308      	movs	r3, #8
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	e0c3      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e0c0      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a44      	ldr	r2, [pc, #272]	@ (8004d58 <UART_SetConfig+0x2dc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d125      	bne.n	8004c98 <UART_SetConfig+0x21c>
 8004c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8004d48 <UART_SetConfig+0x2cc>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c5a:	d017      	beq.n	8004c8c <UART_SetConfig+0x210>
 8004c5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c60:	d817      	bhi.n	8004c92 <UART_SetConfig+0x216>
 8004c62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c66:	d00b      	beq.n	8004c80 <UART_SetConfig+0x204>
 8004c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c6c:	d811      	bhi.n	8004c92 <UART_SetConfig+0x216>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <UART_SetConfig+0x1fe>
 8004c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c76:	d006      	beq.n	8004c86 <UART_SetConfig+0x20a>
 8004c78:	e00b      	b.n	8004c92 <UART_SetConfig+0x216>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e0a1      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004c80:	2302      	movs	r3, #2
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e09e      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004c86:	2304      	movs	r3, #4
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e09b      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e098      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004c92:	2310      	movs	r3, #16
 8004c94:	77fb      	strb	r3, [r7, #31]
 8004c96:	e095      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a2f      	ldr	r2, [pc, #188]	@ (8004d5c <UART_SetConfig+0x2e0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d125      	bne.n	8004cee <UART_SetConfig+0x272>
 8004ca2:	4b29      	ldr	r3, [pc, #164]	@ (8004d48 <UART_SetConfig+0x2cc>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004cac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cb0:	d017      	beq.n	8004ce2 <UART_SetConfig+0x266>
 8004cb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cb6:	d817      	bhi.n	8004ce8 <UART_SetConfig+0x26c>
 8004cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cbc:	d00b      	beq.n	8004cd6 <UART_SetConfig+0x25a>
 8004cbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cc2:	d811      	bhi.n	8004ce8 <UART_SetConfig+0x26c>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <UART_SetConfig+0x254>
 8004cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ccc:	d006      	beq.n	8004cdc <UART_SetConfig+0x260>
 8004cce:	e00b      	b.n	8004ce8 <UART_SetConfig+0x26c>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e076      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e073      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e070      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	77fb      	strb	r3, [r7, #31]
 8004ce6:	e06d      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e06a      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d60 <UART_SetConfig+0x2e4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d138      	bne.n	8004d6a <UART_SetConfig+0x2ee>
 8004cf8:	4b13      	ldr	r3, [pc, #76]	@ (8004d48 <UART_SetConfig+0x2cc>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004d02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d06:	d017      	beq.n	8004d38 <UART_SetConfig+0x2bc>
 8004d08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d0c:	d82a      	bhi.n	8004d64 <UART_SetConfig+0x2e8>
 8004d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d12:	d00b      	beq.n	8004d2c <UART_SetConfig+0x2b0>
 8004d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d18:	d824      	bhi.n	8004d64 <UART_SetConfig+0x2e8>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <UART_SetConfig+0x2aa>
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d22:	d006      	beq.n	8004d32 <UART_SetConfig+0x2b6>
 8004d24:	e01e      	b.n	8004d64 <UART_SetConfig+0x2e8>
 8004d26:	2300      	movs	r3, #0
 8004d28:	77fb      	strb	r3, [r7, #31]
 8004d2a:	e04b      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	77fb      	strb	r3, [r7, #31]
 8004d30:	e048      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004d32:	2304      	movs	r3, #4
 8004d34:	77fb      	strb	r3, [r7, #31]
 8004d36:	e045      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004d38:	2308      	movs	r3, #8
 8004d3a:	77fb      	strb	r3, [r7, #31]
 8004d3c:	e042      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004d3e:	bf00      	nop
 8004d40:	efff69f3 	.word	0xefff69f3
 8004d44:	40011000 	.word	0x40011000
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	40004400 	.word	0x40004400
 8004d50:	40004800 	.word	0x40004800
 8004d54:	40004c00 	.word	0x40004c00
 8004d58:	40005000 	.word	0x40005000
 8004d5c:	40011400 	.word	0x40011400
 8004d60:	40007800 	.word	0x40007800
 8004d64:	2310      	movs	r3, #16
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e02c      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a72      	ldr	r2, [pc, #456]	@ (8004f38 <UART_SetConfig+0x4bc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d125      	bne.n	8004dc0 <UART_SetConfig+0x344>
 8004d74:	4b71      	ldr	r3, [pc, #452]	@ (8004f3c <UART_SetConfig+0x4c0>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004d7e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d82:	d017      	beq.n	8004db4 <UART_SetConfig+0x338>
 8004d84:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d88:	d817      	bhi.n	8004dba <UART_SetConfig+0x33e>
 8004d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d8e:	d00b      	beq.n	8004da8 <UART_SetConfig+0x32c>
 8004d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d94:	d811      	bhi.n	8004dba <UART_SetConfig+0x33e>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <UART_SetConfig+0x326>
 8004d9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d9e:	d006      	beq.n	8004dae <UART_SetConfig+0x332>
 8004da0:	e00b      	b.n	8004dba <UART_SetConfig+0x33e>
 8004da2:	2300      	movs	r3, #0
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e00d      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004da8:	2302      	movs	r3, #2
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e00a      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004dae:	2304      	movs	r3, #4
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e007      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004db4:	2308      	movs	r3, #8
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e004      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004dba:	2310      	movs	r3, #16
 8004dbc:	77fb      	strb	r3, [r7, #31]
 8004dbe:	e001      	b.n	8004dc4 <UART_SetConfig+0x348>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dcc:	d15b      	bne.n	8004e86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004dce:	7ffb      	ldrb	r3, [r7, #31]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d828      	bhi.n	8004e26 <UART_SetConfig+0x3aa>
 8004dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ddc <UART_SetConfig+0x360>)
 8004dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dda:	bf00      	nop
 8004ddc:	08004e01 	.word	0x08004e01
 8004de0:	08004e09 	.word	0x08004e09
 8004de4:	08004e11 	.word	0x08004e11
 8004de8:	08004e27 	.word	0x08004e27
 8004dec:	08004e17 	.word	0x08004e17
 8004df0:	08004e27 	.word	0x08004e27
 8004df4:	08004e27 	.word	0x08004e27
 8004df8:	08004e27 	.word	0x08004e27
 8004dfc:	08004e1f 	.word	0x08004e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e00:	f7fe f92c 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 8004e04:	61b8      	str	r0, [r7, #24]
        break;
 8004e06:	e013      	b.n	8004e30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e08:	f7fe f93c 	bl	8003084 <HAL_RCC_GetPCLK2Freq>
 8004e0c:	61b8      	str	r0, [r7, #24]
        break;
 8004e0e:	e00f      	b.n	8004e30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e10:	4b4b      	ldr	r3, [pc, #300]	@ (8004f40 <UART_SetConfig+0x4c4>)
 8004e12:	61bb      	str	r3, [r7, #24]
        break;
 8004e14:	e00c      	b.n	8004e30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e16:	f7fe f84f 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8004e1a:	61b8      	str	r0, [r7, #24]
        break;
 8004e1c:	e008      	b.n	8004e30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e22:	61bb      	str	r3, [r7, #24]
        break;
 8004e24:	e004      	b.n	8004e30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004e2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d074      	beq.n	8004f20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	005a      	lsls	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	441a      	add	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b0f      	cmp	r3, #15
 8004e50:	d916      	bls.n	8004e80 <UART_SetConfig+0x404>
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e58:	d212      	bcs.n	8004e80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f023 030f 	bic.w	r3, r3, #15
 8004e62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	89fb      	ldrh	r3, [r7, #14]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	89fa      	ldrh	r2, [r7, #14]
 8004e7c:	60da      	str	r2, [r3, #12]
 8004e7e:	e04f      	b.n	8004f20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	77bb      	strb	r3, [r7, #30]
 8004e84:	e04c      	b.n	8004f20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e86:	7ffb      	ldrb	r3, [r7, #31]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d828      	bhi.n	8004ede <UART_SetConfig+0x462>
 8004e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e94 <UART_SetConfig+0x418>)
 8004e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e92:	bf00      	nop
 8004e94:	08004eb9 	.word	0x08004eb9
 8004e98:	08004ec1 	.word	0x08004ec1
 8004e9c:	08004ec9 	.word	0x08004ec9
 8004ea0:	08004edf 	.word	0x08004edf
 8004ea4:	08004ecf 	.word	0x08004ecf
 8004ea8:	08004edf 	.word	0x08004edf
 8004eac:	08004edf 	.word	0x08004edf
 8004eb0:	08004edf 	.word	0x08004edf
 8004eb4:	08004ed7 	.word	0x08004ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb8:	f7fe f8d0 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 8004ebc:	61b8      	str	r0, [r7, #24]
        break;
 8004ebe:	e013      	b.n	8004ee8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ec0:	f7fe f8e0 	bl	8003084 <HAL_RCC_GetPCLK2Freq>
 8004ec4:	61b8      	str	r0, [r7, #24]
        break;
 8004ec6:	e00f      	b.n	8004ee8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f40 <UART_SetConfig+0x4c4>)
 8004eca:	61bb      	str	r3, [r7, #24]
        break;
 8004ecc:	e00c      	b.n	8004ee8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ece:	f7fd fff3 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8004ed2:	61b8      	str	r0, [r7, #24]
        break;
 8004ed4:	e008      	b.n	8004ee8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eda:	61bb      	str	r3, [r7, #24]
        break;
 8004edc:	e004      	b.n	8004ee8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ee6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d018      	beq.n	8004f20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	085a      	lsrs	r2, r3, #1
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	441a      	add	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b0f      	cmp	r3, #15
 8004f06:	d909      	bls.n	8004f1c <UART_SetConfig+0x4a0>
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f0e:	d205      	bcs.n	8004f1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	e001      	b.n	8004f20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40007c00 	.word	0x40007c00
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	00f42400 	.word	0x00f42400

08004f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01a      	beq.n	800505a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005042:	d10a      	bne.n	800505a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	605a      	str	r2, [r3, #4]
  }
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08c      	sub	sp, #48	@ 0x30
 800508c:	af02      	add	r7, sp, #8
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005098:	f7fc ff78 	bl	8001f8c <HAL_GetTick>
 800509c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d12e      	bne.n	800510a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	2200      	movs	r2, #0
 80050b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f83b 	bl	8005136 <UART_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d021      	beq.n	800510a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	e853 3f00 	ldrex	r3, [r3]
 80050d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050da:	623b      	str	r3, [r7, #32]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	69b9      	ldr	r1, [r7, #24]
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	617b      	str	r3, [r7, #20]
   return(result);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e6      	bne.n	80050c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e011      	b.n	800512e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3728      	adds	r7, #40	@ 0x28
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	4613      	mov	r3, r2
 8005144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005146:	e04f      	b.n	80051e8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d04b      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005150:	f7fc ff1c 	bl	8001f8c <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	429a      	cmp	r2, r3
 800515e:	d302      	bcc.n	8005166 <UART_WaitOnFlagUntilTimeout+0x30>
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e04e      	b.n	8005208 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d037      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b80      	cmp	r3, #128	@ 0x80
 800517c:	d034      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b40      	cmp	r3, #64	@ 0x40
 8005182:	d031      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b08      	cmp	r3, #8
 8005190:	d110      	bne.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2208      	movs	r2, #8
 8005198:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f8fe 	bl	800539c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2208      	movs	r2, #8
 80051a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e029      	b.n	8005208 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051c2:	d111      	bne.n	80051e8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f8e4 	bl	800539c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e00f      	b.n	8005208 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69da      	ldr	r2, [r3, #28]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4013      	ands	r3, r2
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	429a      	cmp	r2, r3
 8005204:	d0a0      	beq.n	8005148 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005210:	b480      	push	{r7}
 8005212:	b097      	sub	sp, #92	@ 0x5c
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	88fa      	ldrh	r2, [r7, #6]
 8005230:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005242:	d10e      	bne.n	8005262 <UART_Start_Receive_IT+0x52>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d105      	bne.n	8005258 <UART_Start_Receive_IT+0x48>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005252:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005256:	e02d      	b.n	80052b4 <UART_Start_Receive_IT+0xa4>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	22ff      	movs	r2, #255	@ 0xff
 800525c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005260:	e028      	b.n	80052b4 <UART_Start_Receive_IT+0xa4>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10d      	bne.n	8005286 <UART_Start_Receive_IT+0x76>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d104      	bne.n	800527c <UART_Start_Receive_IT+0x6c>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	22ff      	movs	r2, #255	@ 0xff
 8005276:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800527a:	e01b      	b.n	80052b4 <UART_Start_Receive_IT+0xa4>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	227f      	movs	r2, #127	@ 0x7f
 8005280:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005284:	e016      	b.n	80052b4 <UART_Start_Receive_IT+0xa4>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800528e:	d10d      	bne.n	80052ac <UART_Start_Receive_IT+0x9c>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <UART_Start_Receive_IT+0x92>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	227f      	movs	r2, #127	@ 0x7f
 800529c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052a0:	e008      	b.n	80052b4 <UART_Start_Receive_IT+0xa4>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	223f      	movs	r2, #63	@ 0x3f
 80052a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052aa:	e003      	b.n	80052b4 <UART_Start_Receive_IT+0xa4>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2222      	movs	r2, #34	@ 0x22
 80052c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3308      	adds	r3, #8
 80052ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	657b      	str	r3, [r7, #84]	@ 0x54
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3308      	adds	r3, #8
 80052e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052e4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80052e6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80052f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e5      	bne.n	80052c4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005300:	d107      	bne.n	8005312 <UART_Start_Receive_IT+0x102>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d103      	bne.n	8005312 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a21      	ldr	r2, [pc, #132]	@ (8005394 <UART_Start_Receive_IT+0x184>)
 800530e:	669a      	str	r2, [r3, #104]	@ 0x68
 8005310:	e002      	b.n	8005318 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a20      	ldr	r2, [pc, #128]	@ (8005398 <UART_Start_Receive_IT+0x188>)
 8005316:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d019      	beq.n	8005354 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005334:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800533e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005340:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800534c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e6      	bne.n	8005320 <UART_Start_Receive_IT+0x110>
 8005352:	e018      	b.n	8005386 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	613b      	str	r3, [r7, #16]
   return(result);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f043 0320 	orr.w	r3, r3, #32
 8005368:	653b      	str	r3, [r7, #80]	@ 0x50
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005372:	623b      	str	r3, [r7, #32]
 8005374:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	69f9      	ldr	r1, [r7, #28]
 8005378:	6a3a      	ldr	r2, [r7, #32]
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e6      	bne.n	8005354 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	375c      	adds	r7, #92	@ 0x5c
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	0800568d 	.word	0x0800568d
 8005398:	080054e5 	.word	0x080054e5

0800539c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800539c:	b480      	push	{r7}
 800539e:	b095      	sub	sp, #84	@ 0x54
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80053c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e6      	bne.n	80053a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3308      	adds	r3, #8
 80053f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e5      	bne.n	80053d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540e:	2b01      	cmp	r3, #1
 8005410:	d118      	bne.n	8005444 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f023 0310 	bic.w	r3, r3, #16
 8005426:	647b      	str	r3, [r7, #68]	@ 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6979      	ldr	r1, [r7, #20]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	613b      	str	r3, [r7, #16]
   return(result);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e6      	bne.n	8005412 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005458:	bf00      	nop
 800545a:	3754      	adds	r7, #84	@ 0x54
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7ff fae4 	bl	8004a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6979      	ldr	r1, [r7, #20]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	613b      	str	r3, [r7, #16]
   return(result);
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e6      	bne.n	8005498 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff fab0 	bl	8004a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054dc:	bf00      	nop
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b09c      	sub	sp, #112	@ 0x70
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054fc:	2b22      	cmp	r3, #34	@ 0x22
 80054fe:	f040 80b9 	bne.w	8005674 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800550c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005510:	b2d9      	uxtb	r1, r3
 8005512:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005516:	b2da      	uxtb	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551c:	400a      	ands	r2, r1
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	f040 809c 	bne.w	8005684 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800555a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800555c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005560:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800556a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800556c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005570:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e6      	bne.n	800554c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3308      	adds	r3, #8
 8005584:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800558e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	667b      	str	r3, [r7, #100]	@ 0x64
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800559e:	647a      	str	r2, [r7, #68]	@ 0x44
 80055a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e5      	bne.n	800557e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d018      	beq.n	8005606 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	623b      	str	r3, [r7, #32]
   return(result);
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e6      	bne.n	80055d4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800560a:	2b01      	cmp	r3, #1
 800560c:	d12e      	bne.n	800566c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60fb      	str	r3, [r7, #12]
   return(result);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f023 0310 	bic.w	r3, r3, #16
 8005628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	69b9      	ldr	r1, [r7, #24]
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	617b      	str	r3, [r7, #20]
   return(result);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b10      	cmp	r3, #16
 8005652:	d103      	bne.n	800565c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2210      	movs	r2, #16
 800565a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff f9fd 	bl	8004a64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800566a:	e00b      	b.n	8005684 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7fc f81d 	bl	80016ac <HAL_UART_RxCpltCallback>
}
 8005672:	e007      	b.n	8005684 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	619a      	str	r2, [r3, #24]
}
 8005684:	bf00      	nop
 8005686:	3770      	adds	r7, #112	@ 0x70
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b09c      	sub	sp, #112	@ 0x70
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800569a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056a4:	2b22      	cmp	r3, #34	@ 0x22
 80056a6:	f040 80b9 	bne.w	800581c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80056ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80056be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80056c2:	4013      	ands	r3, r2
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ce:	1c9a      	adds	r2, r3, #2
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 809c 	bne.w	800582c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005708:	667b      	str	r3, [r7, #100]	@ 0x64
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005712:	657b      	str	r3, [r7, #84]	@ 0x54
 8005714:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005718:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e6      	bne.n	80056f4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3308      	adds	r3, #8
 800572c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	663b      	str	r3, [r7, #96]	@ 0x60
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3308      	adds	r3, #8
 8005744:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005746:	643a      	str	r2, [r7, #64]	@ 0x40
 8005748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800574c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e5      	bne.n	8005726 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d018      	beq.n	80057ae <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	61fb      	str	r3, [r7, #28]
   return(result);
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005790:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800579a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800579c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e6      	bne.n	800577c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d12e      	bne.n	8005814 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f023 0310 	bic.w	r3, r3, #16
 80057d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6979      	ldr	r1, [r7, #20]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	613b      	str	r3, [r7, #16]
   return(result);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e6      	bne.n	80057bc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d103      	bne.n	8005804 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2210      	movs	r2, #16
 8005802:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff f929 	bl	8004a64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005812:	e00b      	b.n	800582c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7fb ff49 	bl	80016ac <HAL_UART_RxCpltCallback>
}
 800581a:	e007      	b.n	800582c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0208 	orr.w	r2, r2, #8
 800582a:	619a      	str	r2, [r3, #24]
}
 800582c:	bf00      	nop
 800582e:	3770      	adds	r7, #112	@ 0x70
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <sniprintf>:
 8005834:	b40c      	push	{r2, r3}
 8005836:	b530      	push	{r4, r5, lr}
 8005838:	4b18      	ldr	r3, [pc, #96]	@ (800589c <sniprintf+0x68>)
 800583a:	1e0c      	subs	r4, r1, #0
 800583c:	681d      	ldr	r5, [r3, #0]
 800583e:	b09d      	sub	sp, #116	@ 0x74
 8005840:	da08      	bge.n	8005854 <sniprintf+0x20>
 8005842:	238b      	movs	r3, #139	@ 0x8b
 8005844:	602b      	str	r3, [r5, #0]
 8005846:	f04f 30ff 	mov.w	r0, #4294967295
 800584a:	b01d      	add	sp, #116	@ 0x74
 800584c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005850:	b002      	add	sp, #8
 8005852:	4770      	bx	lr
 8005854:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005858:	f8ad 3014 	strh.w	r3, [sp, #20]
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005862:	bf14      	ite	ne
 8005864:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005868:	4623      	moveq	r3, r4
 800586a:	9304      	str	r3, [sp, #16]
 800586c:	9307      	str	r3, [sp, #28]
 800586e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005872:	9002      	str	r0, [sp, #8]
 8005874:	9006      	str	r0, [sp, #24]
 8005876:	f8ad 3016 	strh.w	r3, [sp, #22]
 800587a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800587c:	ab21      	add	r3, sp, #132	@ 0x84
 800587e:	a902      	add	r1, sp, #8
 8005880:	4628      	mov	r0, r5
 8005882:	9301      	str	r3, [sp, #4]
 8005884:	f000 f9a6 	bl	8005bd4 <_svfiprintf_r>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	bfbc      	itt	lt
 800588c:	238b      	movlt	r3, #139	@ 0x8b
 800588e:	602b      	strlt	r3, [r5, #0]
 8005890:	2c00      	cmp	r4, #0
 8005892:	d0da      	beq.n	800584a <sniprintf+0x16>
 8005894:	9b02      	ldr	r3, [sp, #8]
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e7d6      	b.n	800584a <sniprintf+0x16>
 800589c:	20000010 	.word	0x20000010

080058a0 <memset>:
 80058a0:	4402      	add	r2, r0
 80058a2:	4603      	mov	r3, r0
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d100      	bne.n	80058aa <memset+0xa>
 80058a8:	4770      	bx	lr
 80058aa:	f803 1b01 	strb.w	r1, [r3], #1
 80058ae:	e7f9      	b.n	80058a4 <memset+0x4>

080058b0 <strncmp>:
 80058b0:	b510      	push	{r4, lr}
 80058b2:	b16a      	cbz	r2, 80058d0 <strncmp+0x20>
 80058b4:	3901      	subs	r1, #1
 80058b6:	1884      	adds	r4, r0, r2
 80058b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d103      	bne.n	80058cc <strncmp+0x1c>
 80058c4:	42a0      	cmp	r0, r4
 80058c6:	d001      	beq.n	80058cc <strncmp+0x1c>
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	d1f5      	bne.n	80058b8 <strncmp+0x8>
 80058cc:	1ad0      	subs	r0, r2, r3
 80058ce:	bd10      	pop	{r4, pc}
 80058d0:	4610      	mov	r0, r2
 80058d2:	e7fc      	b.n	80058ce <strncmp+0x1e>

080058d4 <__errno>:
 80058d4:	4b01      	ldr	r3, [pc, #4]	@ (80058dc <__errno+0x8>)
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	20000010 	.word	0x20000010

080058e0 <__libc_init_array>:
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005918 <__libc_init_array+0x38>)
 80058e4:	4c0d      	ldr	r4, [pc, #52]	@ (800591c <__libc_init_array+0x3c>)
 80058e6:	1b64      	subs	r4, r4, r5
 80058e8:	10a4      	asrs	r4, r4, #2
 80058ea:	2600      	movs	r6, #0
 80058ec:	42a6      	cmp	r6, r4
 80058ee:	d109      	bne.n	8005904 <__libc_init_array+0x24>
 80058f0:	4d0b      	ldr	r5, [pc, #44]	@ (8005920 <__libc_init_array+0x40>)
 80058f2:	4c0c      	ldr	r4, [pc, #48]	@ (8005924 <__libc_init_array+0x44>)
 80058f4:	f000 fc64 	bl	80061c0 <_init>
 80058f8:	1b64      	subs	r4, r4, r5
 80058fa:	10a4      	asrs	r4, r4, #2
 80058fc:	2600      	movs	r6, #0
 80058fe:	42a6      	cmp	r6, r4
 8005900:	d105      	bne.n	800590e <__libc_init_array+0x2e>
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	f855 3b04 	ldr.w	r3, [r5], #4
 8005908:	4798      	blx	r3
 800590a:	3601      	adds	r6, #1
 800590c:	e7ee      	b.n	80058ec <__libc_init_array+0xc>
 800590e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005912:	4798      	blx	r3
 8005914:	3601      	adds	r6, #1
 8005916:	e7f2      	b.n	80058fe <__libc_init_array+0x1e>
 8005918:	08006730 	.word	0x08006730
 800591c:	08006730 	.word	0x08006730
 8005920:	08006730 	.word	0x08006730
 8005924:	08006734 	.word	0x08006734

08005928 <__retarget_lock_acquire_recursive>:
 8005928:	4770      	bx	lr

0800592a <__retarget_lock_release_recursive>:
 800592a:	4770      	bx	lr

0800592c <_free_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4605      	mov	r5, r0
 8005930:	2900      	cmp	r1, #0
 8005932:	d041      	beq.n	80059b8 <_free_r+0x8c>
 8005934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005938:	1f0c      	subs	r4, r1, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	bfb8      	it	lt
 800593e:	18e4      	addlt	r4, r4, r3
 8005940:	f000 f8e0 	bl	8005b04 <__malloc_lock>
 8005944:	4a1d      	ldr	r2, [pc, #116]	@ (80059bc <_free_r+0x90>)
 8005946:	6813      	ldr	r3, [r2, #0]
 8005948:	b933      	cbnz	r3, 8005958 <_free_r+0x2c>
 800594a:	6063      	str	r3, [r4, #4]
 800594c:	6014      	str	r4, [r2, #0]
 800594e:	4628      	mov	r0, r5
 8005950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005954:	f000 b8dc 	b.w	8005b10 <__malloc_unlock>
 8005958:	42a3      	cmp	r3, r4
 800595a:	d908      	bls.n	800596e <_free_r+0x42>
 800595c:	6820      	ldr	r0, [r4, #0]
 800595e:	1821      	adds	r1, r4, r0
 8005960:	428b      	cmp	r3, r1
 8005962:	bf01      	itttt	eq
 8005964:	6819      	ldreq	r1, [r3, #0]
 8005966:	685b      	ldreq	r3, [r3, #4]
 8005968:	1809      	addeq	r1, r1, r0
 800596a:	6021      	streq	r1, [r4, #0]
 800596c:	e7ed      	b.n	800594a <_free_r+0x1e>
 800596e:	461a      	mov	r2, r3
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	b10b      	cbz	r3, 8005978 <_free_r+0x4c>
 8005974:	42a3      	cmp	r3, r4
 8005976:	d9fa      	bls.n	800596e <_free_r+0x42>
 8005978:	6811      	ldr	r1, [r2, #0]
 800597a:	1850      	adds	r0, r2, r1
 800597c:	42a0      	cmp	r0, r4
 800597e:	d10b      	bne.n	8005998 <_free_r+0x6c>
 8005980:	6820      	ldr	r0, [r4, #0]
 8005982:	4401      	add	r1, r0
 8005984:	1850      	adds	r0, r2, r1
 8005986:	4283      	cmp	r3, r0
 8005988:	6011      	str	r1, [r2, #0]
 800598a:	d1e0      	bne.n	800594e <_free_r+0x22>
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	6053      	str	r3, [r2, #4]
 8005992:	4408      	add	r0, r1
 8005994:	6010      	str	r0, [r2, #0]
 8005996:	e7da      	b.n	800594e <_free_r+0x22>
 8005998:	d902      	bls.n	80059a0 <_free_r+0x74>
 800599a:	230c      	movs	r3, #12
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	e7d6      	b.n	800594e <_free_r+0x22>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	1821      	adds	r1, r4, r0
 80059a4:	428b      	cmp	r3, r1
 80059a6:	bf04      	itt	eq
 80059a8:	6819      	ldreq	r1, [r3, #0]
 80059aa:	685b      	ldreq	r3, [r3, #4]
 80059ac:	6063      	str	r3, [r4, #4]
 80059ae:	bf04      	itt	eq
 80059b0:	1809      	addeq	r1, r1, r0
 80059b2:	6021      	streq	r1, [r4, #0]
 80059b4:	6054      	str	r4, [r2, #4]
 80059b6:	e7ca      	b.n	800594e <_free_r+0x22>
 80059b8:	bd38      	pop	{r3, r4, r5, pc}
 80059ba:	bf00      	nop
 80059bc:	200003d8 	.word	0x200003d8

080059c0 <sbrk_aligned>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005a00 <sbrk_aligned+0x40>)
 80059c4:	460c      	mov	r4, r1
 80059c6:	6831      	ldr	r1, [r6, #0]
 80059c8:	4605      	mov	r5, r0
 80059ca:	b911      	cbnz	r1, 80059d2 <sbrk_aligned+0x12>
 80059cc:	f000 fba4 	bl	8006118 <_sbrk_r>
 80059d0:	6030      	str	r0, [r6, #0]
 80059d2:	4621      	mov	r1, r4
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 fb9f 	bl	8006118 <_sbrk_r>
 80059da:	1c43      	adds	r3, r0, #1
 80059dc:	d103      	bne.n	80059e6 <sbrk_aligned+0x26>
 80059de:	f04f 34ff 	mov.w	r4, #4294967295
 80059e2:	4620      	mov	r0, r4
 80059e4:	bd70      	pop	{r4, r5, r6, pc}
 80059e6:	1cc4      	adds	r4, r0, #3
 80059e8:	f024 0403 	bic.w	r4, r4, #3
 80059ec:	42a0      	cmp	r0, r4
 80059ee:	d0f8      	beq.n	80059e2 <sbrk_aligned+0x22>
 80059f0:	1a21      	subs	r1, r4, r0
 80059f2:	4628      	mov	r0, r5
 80059f4:	f000 fb90 	bl	8006118 <_sbrk_r>
 80059f8:	3001      	adds	r0, #1
 80059fa:	d1f2      	bne.n	80059e2 <sbrk_aligned+0x22>
 80059fc:	e7ef      	b.n	80059de <sbrk_aligned+0x1e>
 80059fe:	bf00      	nop
 8005a00:	200003d4 	.word	0x200003d4

08005a04 <_malloc_r>:
 8005a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a08:	1ccd      	adds	r5, r1, #3
 8005a0a:	f025 0503 	bic.w	r5, r5, #3
 8005a0e:	3508      	adds	r5, #8
 8005a10:	2d0c      	cmp	r5, #12
 8005a12:	bf38      	it	cc
 8005a14:	250c      	movcc	r5, #12
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	4606      	mov	r6, r0
 8005a1a:	db01      	blt.n	8005a20 <_malloc_r+0x1c>
 8005a1c:	42a9      	cmp	r1, r5
 8005a1e:	d904      	bls.n	8005a2a <_malloc_r+0x26>
 8005a20:	230c      	movs	r3, #12
 8005a22:	6033      	str	r3, [r6, #0]
 8005a24:	2000      	movs	r0, #0
 8005a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b00 <_malloc_r+0xfc>
 8005a2e:	f000 f869 	bl	8005b04 <__malloc_lock>
 8005a32:	f8d8 3000 	ldr.w	r3, [r8]
 8005a36:	461c      	mov	r4, r3
 8005a38:	bb44      	cbnz	r4, 8005a8c <_malloc_r+0x88>
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f7ff ffbf 	bl	80059c0 <sbrk_aligned>
 8005a42:	1c43      	adds	r3, r0, #1
 8005a44:	4604      	mov	r4, r0
 8005a46:	d158      	bne.n	8005afa <_malloc_r+0xf6>
 8005a48:	f8d8 4000 	ldr.w	r4, [r8]
 8005a4c:	4627      	mov	r7, r4
 8005a4e:	2f00      	cmp	r7, #0
 8005a50:	d143      	bne.n	8005ada <_malloc_r+0xd6>
 8005a52:	2c00      	cmp	r4, #0
 8005a54:	d04b      	beq.n	8005aee <_malloc_r+0xea>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	4639      	mov	r1, r7
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	eb04 0903 	add.w	r9, r4, r3
 8005a60:	f000 fb5a 	bl	8006118 <_sbrk_r>
 8005a64:	4581      	cmp	r9, r0
 8005a66:	d142      	bne.n	8005aee <_malloc_r+0xea>
 8005a68:	6821      	ldr	r1, [r4, #0]
 8005a6a:	1a6d      	subs	r5, r5, r1
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f7ff ffa6 	bl	80059c0 <sbrk_aligned>
 8005a74:	3001      	adds	r0, #1
 8005a76:	d03a      	beq.n	8005aee <_malloc_r+0xea>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	442b      	add	r3, r5
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	bb62      	cbnz	r2, 8005ae0 <_malloc_r+0xdc>
 8005a86:	f8c8 7000 	str.w	r7, [r8]
 8005a8a:	e00f      	b.n	8005aac <_malloc_r+0xa8>
 8005a8c:	6822      	ldr	r2, [r4, #0]
 8005a8e:	1b52      	subs	r2, r2, r5
 8005a90:	d420      	bmi.n	8005ad4 <_malloc_r+0xd0>
 8005a92:	2a0b      	cmp	r2, #11
 8005a94:	d917      	bls.n	8005ac6 <_malloc_r+0xc2>
 8005a96:	1961      	adds	r1, r4, r5
 8005a98:	42a3      	cmp	r3, r4
 8005a9a:	6025      	str	r5, [r4, #0]
 8005a9c:	bf18      	it	ne
 8005a9e:	6059      	strne	r1, [r3, #4]
 8005aa0:	6863      	ldr	r3, [r4, #4]
 8005aa2:	bf08      	it	eq
 8005aa4:	f8c8 1000 	streq.w	r1, [r8]
 8005aa8:	5162      	str	r2, [r4, r5]
 8005aaa:	604b      	str	r3, [r1, #4]
 8005aac:	4630      	mov	r0, r6
 8005aae:	f000 f82f 	bl	8005b10 <__malloc_unlock>
 8005ab2:	f104 000b 	add.w	r0, r4, #11
 8005ab6:	1d23      	adds	r3, r4, #4
 8005ab8:	f020 0007 	bic.w	r0, r0, #7
 8005abc:	1ac2      	subs	r2, r0, r3
 8005abe:	bf1c      	itt	ne
 8005ac0:	1a1b      	subne	r3, r3, r0
 8005ac2:	50a3      	strne	r3, [r4, r2]
 8005ac4:	e7af      	b.n	8005a26 <_malloc_r+0x22>
 8005ac6:	6862      	ldr	r2, [r4, #4]
 8005ac8:	42a3      	cmp	r3, r4
 8005aca:	bf0c      	ite	eq
 8005acc:	f8c8 2000 	streq.w	r2, [r8]
 8005ad0:	605a      	strne	r2, [r3, #4]
 8005ad2:	e7eb      	b.n	8005aac <_malloc_r+0xa8>
 8005ad4:	4623      	mov	r3, r4
 8005ad6:	6864      	ldr	r4, [r4, #4]
 8005ad8:	e7ae      	b.n	8005a38 <_malloc_r+0x34>
 8005ada:	463c      	mov	r4, r7
 8005adc:	687f      	ldr	r7, [r7, #4]
 8005ade:	e7b6      	b.n	8005a4e <_malloc_r+0x4a>
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	42a3      	cmp	r3, r4
 8005ae6:	d1fb      	bne.n	8005ae0 <_malloc_r+0xdc>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	6053      	str	r3, [r2, #4]
 8005aec:	e7de      	b.n	8005aac <_malloc_r+0xa8>
 8005aee:	230c      	movs	r3, #12
 8005af0:	6033      	str	r3, [r6, #0]
 8005af2:	4630      	mov	r0, r6
 8005af4:	f000 f80c 	bl	8005b10 <__malloc_unlock>
 8005af8:	e794      	b.n	8005a24 <_malloc_r+0x20>
 8005afa:	6005      	str	r5, [r0, #0]
 8005afc:	e7d6      	b.n	8005aac <_malloc_r+0xa8>
 8005afe:	bf00      	nop
 8005b00:	200003d8 	.word	0x200003d8

08005b04 <__malloc_lock>:
 8005b04:	4801      	ldr	r0, [pc, #4]	@ (8005b0c <__malloc_lock+0x8>)
 8005b06:	f7ff bf0f 	b.w	8005928 <__retarget_lock_acquire_recursive>
 8005b0a:	bf00      	nop
 8005b0c:	200003d0 	.word	0x200003d0

08005b10 <__malloc_unlock>:
 8005b10:	4801      	ldr	r0, [pc, #4]	@ (8005b18 <__malloc_unlock+0x8>)
 8005b12:	f7ff bf0a 	b.w	800592a <__retarget_lock_release_recursive>
 8005b16:	bf00      	nop
 8005b18:	200003d0 	.word	0x200003d0

08005b1c <__ssputs_r>:
 8005b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b20:	688e      	ldr	r6, [r1, #8]
 8005b22:	461f      	mov	r7, r3
 8005b24:	42be      	cmp	r6, r7
 8005b26:	680b      	ldr	r3, [r1, #0]
 8005b28:	4682      	mov	sl, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	4690      	mov	r8, r2
 8005b2e:	d82d      	bhi.n	8005b8c <__ssputs_r+0x70>
 8005b30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b38:	d026      	beq.n	8005b88 <__ssputs_r+0x6c>
 8005b3a:	6965      	ldr	r5, [r4, #20]
 8005b3c:	6909      	ldr	r1, [r1, #16]
 8005b3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b42:	eba3 0901 	sub.w	r9, r3, r1
 8005b46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b4a:	1c7b      	adds	r3, r7, #1
 8005b4c:	444b      	add	r3, r9
 8005b4e:	106d      	asrs	r5, r5, #1
 8005b50:	429d      	cmp	r5, r3
 8005b52:	bf38      	it	cc
 8005b54:	461d      	movcc	r5, r3
 8005b56:	0553      	lsls	r3, r2, #21
 8005b58:	d527      	bpl.n	8005baa <__ssputs_r+0x8e>
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	f7ff ff52 	bl	8005a04 <_malloc_r>
 8005b60:	4606      	mov	r6, r0
 8005b62:	b360      	cbz	r0, 8005bbe <__ssputs_r+0xa2>
 8005b64:	6921      	ldr	r1, [r4, #16]
 8005b66:	464a      	mov	r2, r9
 8005b68:	f000 fae6 	bl	8006138 <memcpy>
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b76:	81a3      	strh	r3, [r4, #12]
 8005b78:	6126      	str	r6, [r4, #16]
 8005b7a:	6165      	str	r5, [r4, #20]
 8005b7c:	444e      	add	r6, r9
 8005b7e:	eba5 0509 	sub.w	r5, r5, r9
 8005b82:	6026      	str	r6, [r4, #0]
 8005b84:	60a5      	str	r5, [r4, #8]
 8005b86:	463e      	mov	r6, r7
 8005b88:	42be      	cmp	r6, r7
 8005b8a:	d900      	bls.n	8005b8e <__ssputs_r+0x72>
 8005b8c:	463e      	mov	r6, r7
 8005b8e:	6820      	ldr	r0, [r4, #0]
 8005b90:	4632      	mov	r2, r6
 8005b92:	4641      	mov	r1, r8
 8005b94:	f000 faa6 	bl	80060e4 <memmove>
 8005b98:	68a3      	ldr	r3, [r4, #8]
 8005b9a:	1b9b      	subs	r3, r3, r6
 8005b9c:	60a3      	str	r3, [r4, #8]
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	4433      	add	r3, r6
 8005ba2:	6023      	str	r3, [r4, #0]
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005baa:	462a      	mov	r2, r5
 8005bac:	f000 fad2 	bl	8006154 <_realloc_r>
 8005bb0:	4606      	mov	r6, r0
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d1e0      	bne.n	8005b78 <__ssputs_r+0x5c>
 8005bb6:	6921      	ldr	r1, [r4, #16]
 8005bb8:	4650      	mov	r0, sl
 8005bba:	f7ff feb7 	bl	800592c <_free_r>
 8005bbe:	230c      	movs	r3, #12
 8005bc0:	f8ca 3000 	str.w	r3, [sl]
 8005bc4:	89a3      	ldrh	r3, [r4, #12]
 8005bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bca:	81a3      	strh	r3, [r4, #12]
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	e7e9      	b.n	8005ba6 <__ssputs_r+0x8a>
	...

08005bd4 <_svfiprintf_r>:
 8005bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	4698      	mov	r8, r3
 8005bda:	898b      	ldrh	r3, [r1, #12]
 8005bdc:	061b      	lsls	r3, r3, #24
 8005bde:	b09d      	sub	sp, #116	@ 0x74
 8005be0:	4607      	mov	r7, r0
 8005be2:	460d      	mov	r5, r1
 8005be4:	4614      	mov	r4, r2
 8005be6:	d510      	bpl.n	8005c0a <_svfiprintf_r+0x36>
 8005be8:	690b      	ldr	r3, [r1, #16]
 8005bea:	b973      	cbnz	r3, 8005c0a <_svfiprintf_r+0x36>
 8005bec:	2140      	movs	r1, #64	@ 0x40
 8005bee:	f7ff ff09 	bl	8005a04 <_malloc_r>
 8005bf2:	6028      	str	r0, [r5, #0]
 8005bf4:	6128      	str	r0, [r5, #16]
 8005bf6:	b930      	cbnz	r0, 8005c06 <_svfiprintf_r+0x32>
 8005bf8:	230c      	movs	r3, #12
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005c00:	b01d      	add	sp, #116	@ 0x74
 8005c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c06:	2340      	movs	r3, #64	@ 0x40
 8005c08:	616b      	str	r3, [r5, #20]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c0e:	2320      	movs	r3, #32
 8005c10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c18:	2330      	movs	r3, #48	@ 0x30
 8005c1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005db8 <_svfiprintf_r+0x1e4>
 8005c1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c22:	f04f 0901 	mov.w	r9, #1
 8005c26:	4623      	mov	r3, r4
 8005c28:	469a      	mov	sl, r3
 8005c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c2e:	b10a      	cbz	r2, 8005c34 <_svfiprintf_r+0x60>
 8005c30:	2a25      	cmp	r2, #37	@ 0x25
 8005c32:	d1f9      	bne.n	8005c28 <_svfiprintf_r+0x54>
 8005c34:	ebba 0b04 	subs.w	fp, sl, r4
 8005c38:	d00b      	beq.n	8005c52 <_svfiprintf_r+0x7e>
 8005c3a:	465b      	mov	r3, fp
 8005c3c:	4622      	mov	r2, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	4638      	mov	r0, r7
 8005c42:	f7ff ff6b 	bl	8005b1c <__ssputs_r>
 8005c46:	3001      	adds	r0, #1
 8005c48:	f000 80a7 	beq.w	8005d9a <_svfiprintf_r+0x1c6>
 8005c4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c4e:	445a      	add	r2, fp
 8005c50:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c52:	f89a 3000 	ldrb.w	r3, [sl]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 809f 	beq.w	8005d9a <_svfiprintf_r+0x1c6>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c66:	f10a 0a01 	add.w	sl, sl, #1
 8005c6a:	9304      	str	r3, [sp, #16]
 8005c6c:	9307      	str	r3, [sp, #28]
 8005c6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c72:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c74:	4654      	mov	r4, sl
 8005c76:	2205      	movs	r2, #5
 8005c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c7c:	484e      	ldr	r0, [pc, #312]	@ (8005db8 <_svfiprintf_r+0x1e4>)
 8005c7e:	f7fa fadf 	bl	8000240 <memchr>
 8005c82:	9a04      	ldr	r2, [sp, #16]
 8005c84:	b9d8      	cbnz	r0, 8005cbe <_svfiprintf_r+0xea>
 8005c86:	06d0      	lsls	r0, r2, #27
 8005c88:	bf44      	itt	mi
 8005c8a:	2320      	movmi	r3, #32
 8005c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c90:	0711      	lsls	r1, r2, #28
 8005c92:	bf44      	itt	mi
 8005c94:	232b      	movmi	r3, #43	@ 0x2b
 8005c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ca0:	d015      	beq.n	8005cce <_svfiprintf_r+0xfa>
 8005ca2:	9a07      	ldr	r2, [sp, #28]
 8005ca4:	4654      	mov	r4, sl
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f04f 0c0a 	mov.w	ip, #10
 8005cac:	4621      	mov	r1, r4
 8005cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cb2:	3b30      	subs	r3, #48	@ 0x30
 8005cb4:	2b09      	cmp	r3, #9
 8005cb6:	d94b      	bls.n	8005d50 <_svfiprintf_r+0x17c>
 8005cb8:	b1b0      	cbz	r0, 8005ce8 <_svfiprintf_r+0x114>
 8005cba:	9207      	str	r2, [sp, #28]
 8005cbc:	e014      	b.n	8005ce8 <_svfiprintf_r+0x114>
 8005cbe:	eba0 0308 	sub.w	r3, r0, r8
 8005cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	9304      	str	r3, [sp, #16]
 8005cca:	46a2      	mov	sl, r4
 8005ccc:	e7d2      	b.n	8005c74 <_svfiprintf_r+0xa0>
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	1d19      	adds	r1, r3, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	9103      	str	r1, [sp, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bfbb      	ittet	lt
 8005cda:	425b      	neglt	r3, r3
 8005cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8005ce0:	9307      	strge	r3, [sp, #28]
 8005ce2:	9307      	strlt	r3, [sp, #28]
 8005ce4:	bfb8      	it	lt
 8005ce6:	9204      	strlt	r2, [sp, #16]
 8005ce8:	7823      	ldrb	r3, [r4, #0]
 8005cea:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cec:	d10a      	bne.n	8005d04 <_svfiprintf_r+0x130>
 8005cee:	7863      	ldrb	r3, [r4, #1]
 8005cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cf2:	d132      	bne.n	8005d5a <_svfiprintf_r+0x186>
 8005cf4:	9b03      	ldr	r3, [sp, #12]
 8005cf6:	1d1a      	adds	r2, r3, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	9203      	str	r2, [sp, #12]
 8005cfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d00:	3402      	adds	r4, #2
 8005d02:	9305      	str	r3, [sp, #20]
 8005d04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005dc8 <_svfiprintf_r+0x1f4>
 8005d08:	7821      	ldrb	r1, [r4, #0]
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	4650      	mov	r0, sl
 8005d0e:	f7fa fa97 	bl	8000240 <memchr>
 8005d12:	b138      	cbz	r0, 8005d24 <_svfiprintf_r+0x150>
 8005d14:	9b04      	ldr	r3, [sp, #16]
 8005d16:	eba0 000a 	sub.w	r0, r0, sl
 8005d1a:	2240      	movs	r2, #64	@ 0x40
 8005d1c:	4082      	lsls	r2, r0
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	3401      	adds	r4, #1
 8005d22:	9304      	str	r3, [sp, #16]
 8005d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d28:	4824      	ldr	r0, [pc, #144]	@ (8005dbc <_svfiprintf_r+0x1e8>)
 8005d2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d2e:	2206      	movs	r2, #6
 8005d30:	f7fa fa86 	bl	8000240 <memchr>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d036      	beq.n	8005da6 <_svfiprintf_r+0x1d2>
 8005d38:	4b21      	ldr	r3, [pc, #132]	@ (8005dc0 <_svfiprintf_r+0x1ec>)
 8005d3a:	bb1b      	cbnz	r3, 8005d84 <_svfiprintf_r+0x1b0>
 8005d3c:	9b03      	ldr	r3, [sp, #12]
 8005d3e:	3307      	adds	r3, #7
 8005d40:	f023 0307 	bic.w	r3, r3, #7
 8005d44:	3308      	adds	r3, #8
 8005d46:	9303      	str	r3, [sp, #12]
 8005d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d4a:	4433      	add	r3, r6
 8005d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d4e:	e76a      	b.n	8005c26 <_svfiprintf_r+0x52>
 8005d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d54:	460c      	mov	r4, r1
 8005d56:	2001      	movs	r0, #1
 8005d58:	e7a8      	b.n	8005cac <_svfiprintf_r+0xd8>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	3401      	adds	r4, #1
 8005d5e:	9305      	str	r3, [sp, #20]
 8005d60:	4619      	mov	r1, r3
 8005d62:	f04f 0c0a 	mov.w	ip, #10
 8005d66:	4620      	mov	r0, r4
 8005d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d6c:	3a30      	subs	r2, #48	@ 0x30
 8005d6e:	2a09      	cmp	r2, #9
 8005d70:	d903      	bls.n	8005d7a <_svfiprintf_r+0x1a6>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0c6      	beq.n	8005d04 <_svfiprintf_r+0x130>
 8005d76:	9105      	str	r1, [sp, #20]
 8005d78:	e7c4      	b.n	8005d04 <_svfiprintf_r+0x130>
 8005d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d7e:	4604      	mov	r4, r0
 8005d80:	2301      	movs	r3, #1
 8005d82:	e7f0      	b.n	8005d66 <_svfiprintf_r+0x192>
 8005d84:	ab03      	add	r3, sp, #12
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	462a      	mov	r2, r5
 8005d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc4 <_svfiprintf_r+0x1f0>)
 8005d8c:	a904      	add	r1, sp, #16
 8005d8e:	4638      	mov	r0, r7
 8005d90:	f3af 8000 	nop.w
 8005d94:	1c42      	adds	r2, r0, #1
 8005d96:	4606      	mov	r6, r0
 8005d98:	d1d6      	bne.n	8005d48 <_svfiprintf_r+0x174>
 8005d9a:	89ab      	ldrh	r3, [r5, #12]
 8005d9c:	065b      	lsls	r3, r3, #25
 8005d9e:	f53f af2d 	bmi.w	8005bfc <_svfiprintf_r+0x28>
 8005da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005da4:	e72c      	b.n	8005c00 <_svfiprintf_r+0x2c>
 8005da6:	ab03      	add	r3, sp, #12
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	462a      	mov	r2, r5
 8005dac:	4b05      	ldr	r3, [pc, #20]	@ (8005dc4 <_svfiprintf_r+0x1f0>)
 8005dae:	a904      	add	r1, sp, #16
 8005db0:	4638      	mov	r0, r7
 8005db2:	f000 f879 	bl	8005ea8 <_printf_i>
 8005db6:	e7ed      	b.n	8005d94 <_svfiprintf_r+0x1c0>
 8005db8:	080066f5 	.word	0x080066f5
 8005dbc:	080066ff 	.word	0x080066ff
 8005dc0:	00000000 	.word	0x00000000
 8005dc4:	08005b1d 	.word	0x08005b1d
 8005dc8:	080066fb 	.word	0x080066fb

08005dcc <_printf_common>:
 8005dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd0:	4616      	mov	r6, r2
 8005dd2:	4698      	mov	r8, r3
 8005dd4:	688a      	ldr	r2, [r1, #8]
 8005dd6:	690b      	ldr	r3, [r1, #16]
 8005dd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	bfb8      	it	lt
 8005de0:	4613      	movlt	r3, r2
 8005de2:	6033      	str	r3, [r6, #0]
 8005de4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005de8:	4607      	mov	r7, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	b10a      	cbz	r2, 8005df2 <_printf_common+0x26>
 8005dee:	3301      	adds	r3, #1
 8005df0:	6033      	str	r3, [r6, #0]
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	0699      	lsls	r1, r3, #26
 8005df6:	bf42      	ittt	mi
 8005df8:	6833      	ldrmi	r3, [r6, #0]
 8005dfa:	3302      	addmi	r3, #2
 8005dfc:	6033      	strmi	r3, [r6, #0]
 8005dfe:	6825      	ldr	r5, [r4, #0]
 8005e00:	f015 0506 	ands.w	r5, r5, #6
 8005e04:	d106      	bne.n	8005e14 <_printf_common+0x48>
 8005e06:	f104 0a19 	add.w	sl, r4, #25
 8005e0a:	68e3      	ldr	r3, [r4, #12]
 8005e0c:	6832      	ldr	r2, [r6, #0]
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	42ab      	cmp	r3, r5
 8005e12:	dc26      	bgt.n	8005e62 <_printf_common+0x96>
 8005e14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	3b00      	subs	r3, #0
 8005e1c:	bf18      	it	ne
 8005e1e:	2301      	movne	r3, #1
 8005e20:	0692      	lsls	r2, r2, #26
 8005e22:	d42b      	bmi.n	8005e7c <_printf_common+0xb0>
 8005e24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e28:	4641      	mov	r1, r8
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	47c8      	blx	r9
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d01e      	beq.n	8005e70 <_printf_common+0xa4>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	6922      	ldr	r2, [r4, #16]
 8005e36:	f003 0306 	and.w	r3, r3, #6
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	bf02      	ittt	eq
 8005e3e:	68e5      	ldreq	r5, [r4, #12]
 8005e40:	6833      	ldreq	r3, [r6, #0]
 8005e42:	1aed      	subeq	r5, r5, r3
 8005e44:	68a3      	ldr	r3, [r4, #8]
 8005e46:	bf0c      	ite	eq
 8005e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e4c:	2500      	movne	r5, #0
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	bfc4      	itt	gt
 8005e52:	1a9b      	subgt	r3, r3, r2
 8005e54:	18ed      	addgt	r5, r5, r3
 8005e56:	2600      	movs	r6, #0
 8005e58:	341a      	adds	r4, #26
 8005e5a:	42b5      	cmp	r5, r6
 8005e5c:	d11a      	bne.n	8005e94 <_printf_common+0xc8>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e008      	b.n	8005e74 <_printf_common+0xa8>
 8005e62:	2301      	movs	r3, #1
 8005e64:	4652      	mov	r2, sl
 8005e66:	4641      	mov	r1, r8
 8005e68:	4638      	mov	r0, r7
 8005e6a:	47c8      	blx	r9
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d103      	bne.n	8005e78 <_printf_common+0xac>
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e78:	3501      	adds	r5, #1
 8005e7a:	e7c6      	b.n	8005e0a <_printf_common+0x3e>
 8005e7c:	18e1      	adds	r1, r4, r3
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	2030      	movs	r0, #48	@ 0x30
 8005e82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e86:	4422      	add	r2, r4
 8005e88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e90:	3302      	adds	r3, #2
 8005e92:	e7c7      	b.n	8005e24 <_printf_common+0x58>
 8005e94:	2301      	movs	r3, #1
 8005e96:	4622      	mov	r2, r4
 8005e98:	4641      	mov	r1, r8
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	47c8      	blx	r9
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d0e6      	beq.n	8005e70 <_printf_common+0xa4>
 8005ea2:	3601      	adds	r6, #1
 8005ea4:	e7d9      	b.n	8005e5a <_printf_common+0x8e>
	...

08005ea8 <_printf_i>:
 8005ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eac:	7e0f      	ldrb	r7, [r1, #24]
 8005eae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005eb0:	2f78      	cmp	r7, #120	@ 0x78
 8005eb2:	4691      	mov	r9, r2
 8005eb4:	4680      	mov	r8, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	469a      	mov	sl, r3
 8005eba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ebe:	d807      	bhi.n	8005ed0 <_printf_i+0x28>
 8005ec0:	2f62      	cmp	r7, #98	@ 0x62
 8005ec2:	d80a      	bhi.n	8005eda <_printf_i+0x32>
 8005ec4:	2f00      	cmp	r7, #0
 8005ec6:	f000 80d1 	beq.w	800606c <_printf_i+0x1c4>
 8005eca:	2f58      	cmp	r7, #88	@ 0x58
 8005ecc:	f000 80b8 	beq.w	8006040 <_printf_i+0x198>
 8005ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ed4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ed8:	e03a      	b.n	8005f50 <_printf_i+0xa8>
 8005eda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ede:	2b15      	cmp	r3, #21
 8005ee0:	d8f6      	bhi.n	8005ed0 <_printf_i+0x28>
 8005ee2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ee8 <_printf_i+0x40>)
 8005ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ee8:	08005f41 	.word	0x08005f41
 8005eec:	08005f55 	.word	0x08005f55
 8005ef0:	08005ed1 	.word	0x08005ed1
 8005ef4:	08005ed1 	.word	0x08005ed1
 8005ef8:	08005ed1 	.word	0x08005ed1
 8005efc:	08005ed1 	.word	0x08005ed1
 8005f00:	08005f55 	.word	0x08005f55
 8005f04:	08005ed1 	.word	0x08005ed1
 8005f08:	08005ed1 	.word	0x08005ed1
 8005f0c:	08005ed1 	.word	0x08005ed1
 8005f10:	08005ed1 	.word	0x08005ed1
 8005f14:	08006053 	.word	0x08006053
 8005f18:	08005f7f 	.word	0x08005f7f
 8005f1c:	0800600d 	.word	0x0800600d
 8005f20:	08005ed1 	.word	0x08005ed1
 8005f24:	08005ed1 	.word	0x08005ed1
 8005f28:	08006075 	.word	0x08006075
 8005f2c:	08005ed1 	.word	0x08005ed1
 8005f30:	08005f7f 	.word	0x08005f7f
 8005f34:	08005ed1 	.word	0x08005ed1
 8005f38:	08005ed1 	.word	0x08005ed1
 8005f3c:	08006015 	.word	0x08006015
 8005f40:	6833      	ldr	r3, [r6, #0]
 8005f42:	1d1a      	adds	r2, r3, #4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6032      	str	r2, [r6, #0]
 8005f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f50:	2301      	movs	r3, #1
 8005f52:	e09c      	b.n	800608e <_printf_i+0x1e6>
 8005f54:	6833      	ldr	r3, [r6, #0]
 8005f56:	6820      	ldr	r0, [r4, #0]
 8005f58:	1d19      	adds	r1, r3, #4
 8005f5a:	6031      	str	r1, [r6, #0]
 8005f5c:	0606      	lsls	r6, r0, #24
 8005f5e:	d501      	bpl.n	8005f64 <_printf_i+0xbc>
 8005f60:	681d      	ldr	r5, [r3, #0]
 8005f62:	e003      	b.n	8005f6c <_printf_i+0xc4>
 8005f64:	0645      	lsls	r5, r0, #25
 8005f66:	d5fb      	bpl.n	8005f60 <_printf_i+0xb8>
 8005f68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f6c:	2d00      	cmp	r5, #0
 8005f6e:	da03      	bge.n	8005f78 <_printf_i+0xd0>
 8005f70:	232d      	movs	r3, #45	@ 0x2d
 8005f72:	426d      	negs	r5, r5
 8005f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f78:	4858      	ldr	r0, [pc, #352]	@ (80060dc <_printf_i+0x234>)
 8005f7a:	230a      	movs	r3, #10
 8005f7c:	e011      	b.n	8005fa2 <_printf_i+0xfa>
 8005f7e:	6821      	ldr	r1, [r4, #0]
 8005f80:	6833      	ldr	r3, [r6, #0]
 8005f82:	0608      	lsls	r0, r1, #24
 8005f84:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f88:	d402      	bmi.n	8005f90 <_printf_i+0xe8>
 8005f8a:	0649      	lsls	r1, r1, #25
 8005f8c:	bf48      	it	mi
 8005f8e:	b2ad      	uxthmi	r5, r5
 8005f90:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f92:	4852      	ldr	r0, [pc, #328]	@ (80060dc <_printf_i+0x234>)
 8005f94:	6033      	str	r3, [r6, #0]
 8005f96:	bf14      	ite	ne
 8005f98:	230a      	movne	r3, #10
 8005f9a:	2308      	moveq	r3, #8
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fa2:	6866      	ldr	r6, [r4, #4]
 8005fa4:	60a6      	str	r6, [r4, #8]
 8005fa6:	2e00      	cmp	r6, #0
 8005fa8:	db05      	blt.n	8005fb6 <_printf_i+0x10e>
 8005faa:	6821      	ldr	r1, [r4, #0]
 8005fac:	432e      	orrs	r6, r5
 8005fae:	f021 0104 	bic.w	r1, r1, #4
 8005fb2:	6021      	str	r1, [r4, #0]
 8005fb4:	d04b      	beq.n	800604e <_printf_i+0x1a6>
 8005fb6:	4616      	mov	r6, r2
 8005fb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fbc:	fb03 5711 	mls	r7, r3, r1, r5
 8005fc0:	5dc7      	ldrb	r7, [r0, r7]
 8005fc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fc6:	462f      	mov	r7, r5
 8005fc8:	42bb      	cmp	r3, r7
 8005fca:	460d      	mov	r5, r1
 8005fcc:	d9f4      	bls.n	8005fb8 <_printf_i+0x110>
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d10b      	bne.n	8005fea <_printf_i+0x142>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	07df      	lsls	r7, r3, #31
 8005fd6:	d508      	bpl.n	8005fea <_printf_i+0x142>
 8005fd8:	6923      	ldr	r3, [r4, #16]
 8005fda:	6861      	ldr	r1, [r4, #4]
 8005fdc:	4299      	cmp	r1, r3
 8005fde:	bfde      	ittt	le
 8005fe0:	2330      	movle	r3, #48	@ 0x30
 8005fe2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fe6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fea:	1b92      	subs	r2, r2, r6
 8005fec:	6122      	str	r2, [r4, #16]
 8005fee:	f8cd a000 	str.w	sl, [sp]
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	aa03      	add	r2, sp, #12
 8005ff6:	4621      	mov	r1, r4
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	f7ff fee7 	bl	8005dcc <_printf_common>
 8005ffe:	3001      	adds	r0, #1
 8006000:	d14a      	bne.n	8006098 <_printf_i+0x1f0>
 8006002:	f04f 30ff 	mov.w	r0, #4294967295
 8006006:	b004      	add	sp, #16
 8006008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	f043 0320 	orr.w	r3, r3, #32
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	4832      	ldr	r0, [pc, #200]	@ (80060e0 <_printf_i+0x238>)
 8006016:	2778      	movs	r7, #120	@ 0x78
 8006018:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	6831      	ldr	r1, [r6, #0]
 8006020:	061f      	lsls	r7, r3, #24
 8006022:	f851 5b04 	ldr.w	r5, [r1], #4
 8006026:	d402      	bmi.n	800602e <_printf_i+0x186>
 8006028:	065f      	lsls	r7, r3, #25
 800602a:	bf48      	it	mi
 800602c:	b2ad      	uxthmi	r5, r5
 800602e:	6031      	str	r1, [r6, #0]
 8006030:	07d9      	lsls	r1, r3, #31
 8006032:	bf44      	itt	mi
 8006034:	f043 0320 	orrmi.w	r3, r3, #32
 8006038:	6023      	strmi	r3, [r4, #0]
 800603a:	b11d      	cbz	r5, 8006044 <_printf_i+0x19c>
 800603c:	2310      	movs	r3, #16
 800603e:	e7ad      	b.n	8005f9c <_printf_i+0xf4>
 8006040:	4826      	ldr	r0, [pc, #152]	@ (80060dc <_printf_i+0x234>)
 8006042:	e7e9      	b.n	8006018 <_printf_i+0x170>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	f023 0320 	bic.w	r3, r3, #32
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	e7f6      	b.n	800603c <_printf_i+0x194>
 800604e:	4616      	mov	r6, r2
 8006050:	e7bd      	b.n	8005fce <_printf_i+0x126>
 8006052:	6833      	ldr	r3, [r6, #0]
 8006054:	6825      	ldr	r5, [r4, #0]
 8006056:	6961      	ldr	r1, [r4, #20]
 8006058:	1d18      	adds	r0, r3, #4
 800605a:	6030      	str	r0, [r6, #0]
 800605c:	062e      	lsls	r6, r5, #24
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	d501      	bpl.n	8006066 <_printf_i+0x1be>
 8006062:	6019      	str	r1, [r3, #0]
 8006064:	e002      	b.n	800606c <_printf_i+0x1c4>
 8006066:	0668      	lsls	r0, r5, #25
 8006068:	d5fb      	bpl.n	8006062 <_printf_i+0x1ba>
 800606a:	8019      	strh	r1, [r3, #0]
 800606c:	2300      	movs	r3, #0
 800606e:	6123      	str	r3, [r4, #16]
 8006070:	4616      	mov	r6, r2
 8006072:	e7bc      	b.n	8005fee <_printf_i+0x146>
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	1d1a      	adds	r2, r3, #4
 8006078:	6032      	str	r2, [r6, #0]
 800607a:	681e      	ldr	r6, [r3, #0]
 800607c:	6862      	ldr	r2, [r4, #4]
 800607e:	2100      	movs	r1, #0
 8006080:	4630      	mov	r0, r6
 8006082:	f7fa f8dd 	bl	8000240 <memchr>
 8006086:	b108      	cbz	r0, 800608c <_printf_i+0x1e4>
 8006088:	1b80      	subs	r0, r0, r6
 800608a:	6060      	str	r0, [r4, #4]
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	6123      	str	r3, [r4, #16]
 8006090:	2300      	movs	r3, #0
 8006092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006096:	e7aa      	b.n	8005fee <_printf_i+0x146>
 8006098:	6923      	ldr	r3, [r4, #16]
 800609a:	4632      	mov	r2, r6
 800609c:	4649      	mov	r1, r9
 800609e:	4640      	mov	r0, r8
 80060a0:	47d0      	blx	sl
 80060a2:	3001      	adds	r0, #1
 80060a4:	d0ad      	beq.n	8006002 <_printf_i+0x15a>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	079b      	lsls	r3, r3, #30
 80060aa:	d413      	bmi.n	80060d4 <_printf_i+0x22c>
 80060ac:	68e0      	ldr	r0, [r4, #12]
 80060ae:	9b03      	ldr	r3, [sp, #12]
 80060b0:	4298      	cmp	r0, r3
 80060b2:	bfb8      	it	lt
 80060b4:	4618      	movlt	r0, r3
 80060b6:	e7a6      	b.n	8006006 <_printf_i+0x15e>
 80060b8:	2301      	movs	r3, #1
 80060ba:	4632      	mov	r2, r6
 80060bc:	4649      	mov	r1, r9
 80060be:	4640      	mov	r0, r8
 80060c0:	47d0      	blx	sl
 80060c2:	3001      	adds	r0, #1
 80060c4:	d09d      	beq.n	8006002 <_printf_i+0x15a>
 80060c6:	3501      	adds	r5, #1
 80060c8:	68e3      	ldr	r3, [r4, #12]
 80060ca:	9903      	ldr	r1, [sp, #12]
 80060cc:	1a5b      	subs	r3, r3, r1
 80060ce:	42ab      	cmp	r3, r5
 80060d0:	dcf2      	bgt.n	80060b8 <_printf_i+0x210>
 80060d2:	e7eb      	b.n	80060ac <_printf_i+0x204>
 80060d4:	2500      	movs	r5, #0
 80060d6:	f104 0619 	add.w	r6, r4, #25
 80060da:	e7f5      	b.n	80060c8 <_printf_i+0x220>
 80060dc:	08006706 	.word	0x08006706
 80060e0:	08006717 	.word	0x08006717

080060e4 <memmove>:
 80060e4:	4288      	cmp	r0, r1
 80060e6:	b510      	push	{r4, lr}
 80060e8:	eb01 0402 	add.w	r4, r1, r2
 80060ec:	d902      	bls.n	80060f4 <memmove+0x10>
 80060ee:	4284      	cmp	r4, r0
 80060f0:	4623      	mov	r3, r4
 80060f2:	d807      	bhi.n	8006104 <memmove+0x20>
 80060f4:	1e43      	subs	r3, r0, #1
 80060f6:	42a1      	cmp	r1, r4
 80060f8:	d008      	beq.n	800610c <memmove+0x28>
 80060fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006102:	e7f8      	b.n	80060f6 <memmove+0x12>
 8006104:	4402      	add	r2, r0
 8006106:	4601      	mov	r1, r0
 8006108:	428a      	cmp	r2, r1
 800610a:	d100      	bne.n	800610e <memmove+0x2a>
 800610c:	bd10      	pop	{r4, pc}
 800610e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006116:	e7f7      	b.n	8006108 <memmove+0x24>

08006118 <_sbrk_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4d06      	ldr	r5, [pc, #24]	@ (8006134 <_sbrk_r+0x1c>)
 800611c:	2300      	movs	r3, #0
 800611e:	4604      	mov	r4, r0
 8006120:	4608      	mov	r0, r1
 8006122:	602b      	str	r3, [r5, #0]
 8006124:	f7fb fc8e 	bl	8001a44 <_sbrk>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_sbrk_r+0x1a>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	b103      	cbz	r3, 8006132 <_sbrk_r+0x1a>
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	200003cc 	.word	0x200003cc

08006138 <memcpy>:
 8006138:	440a      	add	r2, r1
 800613a:	4291      	cmp	r1, r2
 800613c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006140:	d100      	bne.n	8006144 <memcpy+0xc>
 8006142:	4770      	bx	lr
 8006144:	b510      	push	{r4, lr}
 8006146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800614a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800614e:	4291      	cmp	r1, r2
 8006150:	d1f9      	bne.n	8006146 <memcpy+0xe>
 8006152:	bd10      	pop	{r4, pc}

08006154 <_realloc_r>:
 8006154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006158:	4607      	mov	r7, r0
 800615a:	4614      	mov	r4, r2
 800615c:	460d      	mov	r5, r1
 800615e:	b921      	cbnz	r1, 800616a <_realloc_r+0x16>
 8006160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006164:	4611      	mov	r1, r2
 8006166:	f7ff bc4d 	b.w	8005a04 <_malloc_r>
 800616a:	b92a      	cbnz	r2, 8006178 <_realloc_r+0x24>
 800616c:	f7ff fbde 	bl	800592c <_free_r>
 8006170:	4625      	mov	r5, r4
 8006172:	4628      	mov	r0, r5
 8006174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006178:	f000 f81a 	bl	80061b0 <_malloc_usable_size_r>
 800617c:	4284      	cmp	r4, r0
 800617e:	4606      	mov	r6, r0
 8006180:	d802      	bhi.n	8006188 <_realloc_r+0x34>
 8006182:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006186:	d8f4      	bhi.n	8006172 <_realloc_r+0x1e>
 8006188:	4621      	mov	r1, r4
 800618a:	4638      	mov	r0, r7
 800618c:	f7ff fc3a 	bl	8005a04 <_malloc_r>
 8006190:	4680      	mov	r8, r0
 8006192:	b908      	cbnz	r0, 8006198 <_realloc_r+0x44>
 8006194:	4645      	mov	r5, r8
 8006196:	e7ec      	b.n	8006172 <_realloc_r+0x1e>
 8006198:	42b4      	cmp	r4, r6
 800619a:	4622      	mov	r2, r4
 800619c:	4629      	mov	r1, r5
 800619e:	bf28      	it	cs
 80061a0:	4632      	movcs	r2, r6
 80061a2:	f7ff ffc9 	bl	8006138 <memcpy>
 80061a6:	4629      	mov	r1, r5
 80061a8:	4638      	mov	r0, r7
 80061aa:	f7ff fbbf 	bl	800592c <_free_r>
 80061ae:	e7f1      	b.n	8006194 <_realloc_r+0x40>

080061b0 <_malloc_usable_size_r>:
 80061b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061b4:	1f18      	subs	r0, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	bfbc      	itt	lt
 80061ba:	580b      	ldrlt	r3, [r1, r0]
 80061bc:	18c0      	addlt	r0, r0, r3
 80061be:	4770      	bx	lr

080061c0 <_init>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	bf00      	nop
 80061c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c6:	bc08      	pop	{r3}
 80061c8:	469e      	mov	lr, r3
 80061ca:	4770      	bx	lr

080061cc <_fini>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	bf00      	nop
 80061d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d2:	bc08      	pop	{r3}
 80061d4:	469e      	mov	lr, r3
 80061d6:	4770      	bx	lr
